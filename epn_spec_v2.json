{
	"swagger": 2,
	"info": {
		"title": "EPN API v2 (Early Beta)",
		"description": "Description of API methods\n#### Список возвращаемых ошибок\n<details><summary>Развернуть</summary>\n | Http код | Код ошибки | Описание |\n| ------- | -------- | -------- |\n| 400 | 400000 | Wrong entity id |\n| 400 | 400001 | Required api version |\n| 400 | 400005 | Required grand type |\n| 400 | 400006 | Unsupported grant type |\n| 400 | 400007 | Wrong url for cut |\n| 400 | 400009 | Wrong confirmation code |\n| 400 | 400010 | Required fields |\n| 400 | 400011 | Wrong client id |\n| 400 | 400012 | Wrong username or password |\n| 400 | 400013 | Wrong refresh token |\n| 400 | 400014 | Wrong email format |\n| 400 | 400015 | Wrong password format |\n| 400 | 400016 | Email already exists |\n| 400 | 400017 | Invalid ssid token |\n| 400 | 400018 | Required client id |\n| 400 | 400019 | Wrong input params |\n| 400 | 400020 | Wrong state parameter |\n| 400 | 400021 | Email not found |\n| 400 | 400022 | Wrong currency format |\n| 400 | 400023 | Purse not found |\n| 400 | 400025 | Batch request parsed body error |\n| 400 | 400027 | Status error type |\n| 400 | 400028 | Status error purse json |\n| 400 | 400029 | Status error purse exist |\n| 400 | 400030 | Promocode not found |\n| 400 | 400031 | Promocode expired |\n| 400 | 400032 | Promocode has not yet begun |\n| 400 | 400033 | Promocode over limit |\n| 400 | 400034 | Promocode already activated |\n| 422 | 422034 | Coupon already exist in bookmarks |\n| 400 | 400035 | Social network authorization error email already exists |\n| 400 | 400036 | Promocode wrong user role |\n| 400 | 400037 | Promocode denied by acl |\n| 400 | 400038 | Coupon attitude already set |\n| 400 | 400039 | Review order already exist |\n| 400 | 400040 | Send code limited |\n| 400 | 400041 | Send confirmation timeout minutes |\n| 400 | 400042 | Send confirmation code timeout days |\n| 400 | 400043 | Confirmation code required |\n| 400 | 400044 | Need purchase first |\n| 400 | 400045 | Sms code not exist |\n| 400 | 400046 | Check code limited |\n| 400 | 400047 | Purchase already exists |\n| 400 | 400048 | Good already reserved |\n| 400 | 400049 | Good limit exceeded |\n| 400 | 400050 | Confirmation send timeout |\n| 400 | 400051 | Email already confirmed |\n| 400 | 400050 | Wrong user role |\n| 400 | 400052 | Coupon comment like not found |\n| 400 | 400053 | Coupon comment like already exist |\n| 400 | 400054 | Coupon comment not found |\n| 400 | 400060 | Phones are equal |\n| 400 | 400061 | Current phone not correct |\n| 400 | 400062 | Phone not confirmed |\n| 400 | 400063 | Wrong sso token |\n| 400 | 400064 | Wrong offer link |\n| 400 | 400065 | Another user order |\n| 400 | 400069 | Need confirmed placement |\n| 400 | 400070 | Tracking number not found |\n| 400 | 400071 | Tracking number user subscribe |\n| 400 | 400072 | Need allow cashback link |\n| 400 | 400080 | Wrong compensations order |\n| 400 | 400105 | Need verify email first |\n| 400 | 400106 | User profile not edited |\n| 400 | 400200 | Feed deleting error |\n| 400 | 400201 | Feed updating error |\n| 401 | 401001 | Grant type not allowed |\n| 401 | 401002 | Unauthorized invalid token |\n| 401 | 401003 | Unauthorized invalid hash |\n| 403 | 403001 | Acl role not allowed for request |\n| 403 | 403002 | Csrf invalid or expired |\n| 403 | 403003 | Acl user status not allowed |\n| 403 | 403004 | Acl user project not allowed |\n| 403 | 403005 | Current client ip not equals token payload client ip |\n| 403 | 403006 | Acl user id method not allowed |\n| 404 | 404001 | Request handler not found |\n| 404 | 404002 | Offer not found |\n| 404 | 404003 | Product id not found |\n| 404 | 404004 | File not found |\n| 404 | 404005 | Bookmark not found |\n| 404 | 404006 | Placement not found |\n| 422 | 422001 | Validation not passed |\n| 422 | 422100 | Validation unknown error |\n| 422 | 422101 | Validation paypal purse not found |\n| 422 | 422102 | Validation amount not correct |\n| 422 | 422103 | Validation limit request exceeded |\n| 422 | 422104 | Validation not correct purse for currency |\n| 422 | 422106 | Validation purse not found |\n| 422 | 422107 | Validation payment is blocked |\n| 422 | 422108 | Validation amount balance exceeded |\n| 422 | 422109 | Validation user status banned |\n| 422 | 422110 | Validation wiretransfer add address |\n| 422 | 422111 | Validation wiretransfer contract signed |\n| 422 | 422112 | Validation payment is hold |\n| 422 | 422113 | Validation out of range date |\n| 422 | 422114 | Validation invalid goods or store link |\n| 422 | 422115 | Validation payout available with lower amount |\n| 422 | 422116 | Price history is empty |\n| 422 | 422117 | Social confirmation user not found by email |\n| 422 | 422118 | Social confirmation user status not allowed |\n| 422 | 422119 | Social confirmation user role not allowed |\n| 422 | 422120 | Social confirmation user account not confirmed |\n| 422 | 422121 | Validation payment system is not allowed |\n| 422 | 422122 | Validation payment country is not allowed |\n| 429 | 429000 | Too many requests |\n| 429 | 429001 | Need captcha |\n| 429 | 429002 | User is deleting |\n| 429 | 429003 | Wrong captcha |\n| 429 | 429004 | Missing linked captcha key |\n| 429 | 429005 | Request is limited |\n| 500 | 500000 | Undefined server error |\n| 500 | 500001 | Server error while creating access token |\n| 500 | 500002 | Error while creating new user |\n| 500 | 500003 | Server error while creating refresh token |\n| 500 | 500004 | Server error while creating social network auth |\n| 500 | 500005 | Undefined service error |\n| 500 | 500010 | Get profile from social network error |\n| 500 | 500011 | Link social profile error |\n| 500 | 500017 | Error while creating ssid token |\n| 500 | 500020 | Password recovery server error |\n| 500 | 500021 | Cant lock user payments |\n| 500 | 500022 | Cant update user password |\n| 500 | 500030 | Sending confirmation email error |\n| 500 | 500031 | Subscribe user error |\n| 500 | 500032 | Cant add new hash for short url |\n| 500 | 500024 | Cant get balance |\n| 500 | 500025 | Cant get user purses |\n| 500 | 500026 | Cant get confirm purse |\n| 500 | 500027 | Cant remove purse |\n| 500 | 500028 | Cant add new purse |\n| 500 | 500029 | Incorrect batch response |\n| 500 | 500033 | Cant make purse charity |\n| 500 | 500034 | Purse charity is not exist |\n| 500 | 500035 | Promocode activation failed |\n| 500 | 500050 | Acquire lock error |\n| 500 | 500101 | Current password not correct |\n| 500 | 500102 | Password change is blocked |\n| 500 | 500103 | Passwords not equal |\n| 500 | 500104 | Password not edited |\n| 500 | 500105 | Confirmation impossible |\n| 500 | 500106 | Profile not edited |\n| 500 | 500107 | Send email retry limited |\n| 500 | 500108 | Phone already confirmed |\n| 500 | 500109 | Phone not confirmed by sms |\n| 500 | 500110 | Active code not exist |\n| 500 | 500111 | Account got deleted |\n| 500 | 500112 | Avatar not found |\n| 422 | 422002 | Creative ref offer id error |\n| 422 | 422004 | Creative offer not found error |\n| 422 | 422005 | Creative placement for offer id error |\n| 422 | 422006 | Creative link not support by offer error |\n| 422 | 422007 | Creative banner list error |\n| 422 | 422008 | Creative link default error |\n| 422 | 422009 | Creative placement for ref offer id error |\n| 422 | 422010 | Creative link not valid error |\n| 422 | 422011 | Creative description error |\n| 422 | 422012 | Creative type string error |\n| 422 | 422013 | Creative type required error |\n| 422 | 422014 | Creative offer id required error |\n| 422 | 422015 | Creative offer id number error |\n| 422 | 422016 | Creative link error |\n| 422 | 422017 | Creative size value error |\n| 422 | 422018 | Creative banners value error |\n| 422 | 422019 | Creative ref offer id value error |\n| 422 | 422020 | Creative attract to cashback value error |\n| 422 | 422021 | Creative expiration time error |\n| 422 | 422022 | Creative description required error |\n#### tokens \n <Details> <Summary> Expand </ Summary>\nFor access to the API, JSON Web Tokens [RFC7519] is used (https://tools.ietf.org/html/rfc7519), \n [Introduction] (https://jwt.io/introduction/) \n </ Details>\n#### Authorization. Sample working with Client Credentials Flow \n <Details> <Summary> Expand </ Summary>\nThe web wizard's office has the ability to write client_id, client_secret for authorization in the system, without using the login / password. \n Steps: \n + Authorizes under a web master account. \n + Go to Profile Settings, Personal Data Tab `` `https: // epn.bz / ru / cabinet # / Profile / Info`````````` \n + In the Management section, select \"Get API 2.0 Keys\" (IMPORTANT: VERSOY 2.0). \n + Press \"Create Key\", a pair of client_id, client_secret will be generated.\nAfter receiving Client_ID, Client_Secret, you can use them instead of a login password.\nAuthorization: \n + Get SSID-TOKEN \n + If the request is executed more permitted number times, in response, please enter the captcha (see \"Captcha 'section) \n + It is important to remember that SSID TOKEN lives long, so prepare a request for Access_Token (see below):\n```bash\ncurl -i https://oauth2.epn.bz/ssid\\?v\\=2\\&client_id\\=android-client\nHTTP/2 200\nserver: nginx\ndate: Wed, 13 May 2020 06:53:04 GMT\ncontent-type: application/json; charset=UTF-8\nstrict-transport-security: max-age=31536000\nrequest-id: b59b73f565fc605edf70d5d2b04e4866\nx-frame-options: DENY\n{\"data\":{\"type\":\"ssid\",\"id\":\"\",\"attributes\":{\"ssid_token\":\"bf2d282247749062855474ca2ec4b1af\"}},\"result\":true,\"request\":[]}%\n```\n+ Take`s ssid_token` out of the answer \n + Authorizam using client_id, client_secret from the office (it is important to transmit a Content-Type header if parameters are transmitted as JSON in Request Body)\n`` `` \n Post https://oauth2.epn.bz/Token?v=2. \n  Headers: \n  Content-Type: Application / Json \n  Body: \n  { \n \"ssid_token\": \"ssid token from the previous step\", \n \"Client_ID\": \"Client_ID from the Cabinet\", \n \"Client_Secret\": \"Client_Secret from the Cabinet\", \n \"GRANT_TYPE\": \"client_credential\", \n \"Check_IP\": false // Do I need to remember the current user of the user \n  } \n `` ``\nExample with CURL: \n - Suppose that in the office we got client_id = ktn0fiab3ougwzi5sfukpe9alodhl1, client_secret = 3rr457qmceyo16knbdo9cjppswxzwzi, ssid_token take from the previous step, then the request will look:\n```bash\ncurl -i --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data '{\"ssid_token\":\"bf2d282247749062855474ca2ec4b1af\",\"client_id\":\"KTn0FIaB3OuGwzi5sfUkpe9AloDHL1\",\"client_secret\":\"3rR457qmCEyo16knBDO9cjpPSwxZWzi\",\"grant_type\":\"client_credential\"}' \\\n  https://oauth2.epn.bz/token\\?v\\=2\nHTTP/2 200\nserver: nginx\ndate: Wed, 13 May 2020 06:58:48 GMT\ncontent-type: application/json; charset=UTF-8\nstrict-transport-security: max-age=31536000\nrequest-id: 2b73cc3a5613216e9302e2b158209ca2\nx-frame-options: DENY\n{\"data\":{\"type\":\"token\",\"id\":\"\",\"attributes\":{\"token_type\":\"jwt\",\"access_token\":\"eyJ0eX...\",\"refresh_token\":\"eyJ0eXAiOi...\"}},\"result\":true,\"request\":[]}\n```\nIn response, we get access_token, refresh_token, which we use for authorized requests to the API, until the torque expires.\nAn example of an API request using Access_Token from the previous step:\n```bash\ncurl -i -H \"X-ACCESS-TOKEN: eyJ0eXA.....\" \\\nhttps://app.epn.bz/transactions/user\\?limit\\=10\\&offset\\=0\\&tsFrom\\=2020-04-01\\&tsTo\\=2020-05-12\nHTTP/2 200\nserver: nginx\ndate: Wed, 13 May 2020 06:58:50 GMT\ncontent-type: application/json; charset=UTF-8\nstrict-transport-security: max-age=31536000\nrequest-id: 3c73cc3a5613216e9302e2b158209c66\nx-frame-options: DENY\n{\"data\":[{\"type\":\"transactions\",\"id\":\"214250186\",\"attributes\":{\"stats_ts\":\"2020-05-08 12:00:00\",\"order_number\":\"8013764964425\",\"order_time\":\"2020-05-08 12:25:11\",\"order_status\":\"waiting\",\"transaction_time\":\"0000-00-00 00:00:00\",\"revenue\":\"1.980\",\"commission_user\":\"0.04\",\"creative_title\":\"magnets ali\",\"sub_title\":\"magnets_n50\",\"offer_type\":\"ali\",\"offer_id\":\"1\",\"currency\":\"USD\",\"transactionId\":\"214250\",\"product_link\":\"https://www.aliexpress.com/item/N50-10/32693221433.html\",\"type_id\":\"1\",\"date\":\"08.05.2020\",\"link\":\"/en/cashback/go?to=http%3A%2F%2Ftrade.aliexpress.com%2Forder_detail.htm%3ForderId%3D8013764964425722\"}},\n```\nAs soon as Access_Token expires, the request to the API will receive HTTP 401 unauthorized. Then we go and change Refresh_Token to a new pair of Access_Token, Refresh_Token.\nThe token update is described in the documentation in the \"Request token Request\" section: \n https://app.epn.bz/swagger/redoc?v=2#tag/auth%2FPaths%2F~1Token €1refresh%2Fpost.\n</details>\n#### Captcha\n<details>\nA number of queries to the server are limited and requires the input of capping to achieve this limit. \n How to determine that the captcha returned:\nThe request to the server, depending on the client_id, is returned either recapthca for Web-Client or image for mobile platforms.\nFor Web Platform: \n <Summary> Expand </ Summary> \n <Details> <Summary> Expand </ Summary>\nHttp code: 429\nBody:\n```json\n{\n  \"errors\": [\n    {\n      \"error\": 429001,\n      \"error_description\": \"need captcha\",\n      \"captcha\": {\n        \"type\": \"reCaptcha\",\n        \"captcha_phrase_key\": \"URlBjiJCdYnZPV2XxD1E3svWT0K5o7eF\",\n        \"captcha\": {\n          \"site_key\": \"6LdLYTEUAAAAAGuJ4UOnX_nQ6H1MBeBH6A8otRy\"\n        }\n      }\n    }\n  ],\n  \"result\": false,\n  \"request\": []\n}\n```\n</details>\nFor Mobile Platform:\n<Details> <Summary> Expand </ Summary>\nHttp code: 429\nBody:\n```json\n{\n  \"errors\": [\n    {\n      \"error\": 429001,\n      \"error_description\": \"need captcha\",\n      \"captcha\": {\n        \"type\": \"reCaptcha\",\n        \"captcha_phrase_key\": \"URlBjiJCdYnZPV2XxD1E3svWT0K5o7eF\",\n        \"captcha\": {\n          \"image\": \"base64 encoded image with captch\"\n        }\n      }\n    }\n  ],\n  \"result\": false,\n  \"request\": []\n}\n```\n</details>\nThe user must solve the captcha and the client sends the same request again, \n But already with the additional parameter ** CAPTCHA ** and ** CAPTCHA_PHRASE_KEY **\n** Captcha ** - Contains the phrase soluble \n  ** Captcha_Phrase_Key ** - the same line that came in response HTTP 429\nExample: \n `` `Http Request \n Get https://app.epn.bz/ssd_v=2&client_id=ios-client&captcha=9me7c&captcha_phrase_key=urlbjijcdynzpv2xxd1e3svwt0k5o7ef. \n `` `` \n If the pin is incorrect, the new picture will return\n</details>\n",
		"version": 2
	},
	"paths": {
		"/affiliate/cashback/landings": {
			"get": {
				"tags": [
					"affiliate/cashback"
				],
				"summary": "Get links (lending) for referral links",
				"description": "We receive a list of references to the project pages for referral links",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "refOfferId",
						"in": "query",
						"description": "Id Offers, Partner Program",
						"required": true,
						"type": "integer",
						"example": 99
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "landings_for_ref_links",
										"id": 4837,
										"attributes": {
											"title": "ePN Weekly giveaway",
											"link": "https://epn.bz/ru/gifts"
										}
									},
									{
										"type": "landings_for_ref_links",
										"id": 4834,
										"attributes": {
											"title": "Landing page ePN Connect",
											"link": "https://epn.bz/ru/connect"
										}
									},
									{
										"type": "landings_for_ref_links",
										"id": 4831,
										"attributes": {
											"title": "ePN Cashback Affiliate program",
											"link": "https://epn.bz/ru/info/cashback-affiliate-program"
										}
									},
									{
										"type": "landings_for_ref_links",
										"id": 4818,
										"attributes": {
											"title": "ePN.bz",
											"link": "https://epn.bz/"
										}
									}
								],
								"result": true,
								"request": {
									"refOfferId": 99
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters / This link does not relate to EPN stores.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "refOfferId is required."
									},
									{
										"error": 422001,
										"error_description": "refOfferId must be a number."
									},
									{
										"error": 422001,
										"error_description": "not allowed refOfferId."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/affiliate/cashback/link": {
			"get": {
				"tags": [
					"affiliate/cashback"
				],
				"summary": "Get a link to refund for a product or shop",
				"description": "Creating a cashback reference to a product or shop",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "refOfferId",
						"in": "query",
						"description": "Id Offers, Partner Program",
						"required": true,
						"type": "integer",
						"example": 99
					},
					{
						"name": "link",
						"in": "query",
						"description": "Links to a product or shop",
						"required": true,
						"type": "string",
						"example": "https://best.aliexpress.com/?lan=ru"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "cashback_link",
										"id": "",
										"attributes": {
											"link": "http://buyeasy.by/cashback/view/{hash}/?to=https%3A%2F%2Fbest.aliexpress.com%2F%3Flan%3Dru"
										}
									}
								],
								"result": true,
								"request": {
									"refOfferId": 95,
									"link": "https://best.aliexpress.com/?lan=ru"
								}
							}
						}
					},
					"400": {
						"description": "Creating cachek references for this store is not available",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400072,
										"error_description": "Need allow cashback link"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters / This link does not relate to EPN stores.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "refOfferId is required."
									},
									{
										"error": 422001,
										"error_description": "refOfferId must be a number."
									},
									{
										"error": 422001,
										"error_description": "not allowed refOfferId."
									},
									{
										"error": 422001,
										"error_description": "link is required."
									},
									{
										"error": 422001,
										"error_description": "link must be a valid URL."
									},
									{
										"error": 422114,
										"error_description": "This link does not apply to ePN stores."
									},
									{
										"error": 422100,
										"error_description": "Unsupported offer type or ref program."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/affiliate/checkLink": {
			"get": {
				"tags": [
					"affiliate"
				],
				"summary": "Check the goods on the link",
				"description": "Getting product information and generating affiliate links",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "link",
						"in": "query",
						"description": "Link to the product",
						"required": true,
						"type": "string",
						"example": "https://ru.aliexpress.com/item/-/32830142882345.html"
					},
					{
						"name": "material",
						"in": "query",
						"description": "material",
						"required": false,
						"type": "string",
						"example": [
							"cb-p-opera",
							"cb-p-chrome",
							"cb-p-ff",
							"cb-p-yandex",
							"cb-p-edge"
						]
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Доступные поля: redirectUrl, offerName, cashbackPercent, isHotsale, affiliateType, productName, productImage, logoSmall, image, maxRate, rates, ratesDesc, hasDynamics, cashbackAvailable",
						"required": false,
						"type": "string",
						"default": "redirectUrl, offerName, cashbackPercent, isHotsale, affiliateType, productName, productImage, logoSmall, image, maxRate, rates, ratesDesc, hasDynamics, cashbackAvailable",
						"example": "redirectUrl, offerName"
					}
				],
				"responses": {
					"200": {
						"description": "Provides information about the product to which the link leads, including an affiliate link to this product",
						"schema": {
							"$ref": "#/definitions/Affiliate_checkLink"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "affiliate",
									"id": "",
									"attributes": {
										"redirectUrl": "http://site.ru/redirect/cpa/u",
										"offerName": "AliExpress",
										"cashbackPercent": 7.5,
										"isHotsale": true,
										"productName": "MERRY'S DESIGN Men Polarized Square",
										"productImage": "https://site.ru/ow64i4rokqvjeli2dptb9h05der7r2w2.png",
										"logoSmall": "https://site.ru/ow64i4rokqvjeli2dptb9h05der7r2w2.png",
										"maxRate": "6%",
										"rates": {
											"newRate": "6%",
											"description": "Accessories",
											"newRateColor": "#ff5252"
										},
										"ratesDesc": "Rates need description",
										"hasDynamics": false,
										"affiliateType": 1
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"400": {
						"description": "Offer not found",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 404002,
										"error_description": "Offer Not Found"
									}
								],
								"result": false
							}
						}
					},
					"422": {
						"description": "Validation errors",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "link must be a valid URL"
									},
									{
										"error": 422001,
										"error_description": "Material not correct"
									},
									{
										"error": 422001,
										"error_description": "Not allowed field test for fields. Allowed: redirectUrl, offerName, cashbackPercent, isHotsale, affiliateType, productName, productImage, logoSmall, image, maxRate, rates, ratesDesc, hasDynamics, cashbackAvailable"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/auth/social/apple": {
			"get": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / User Register through Apple ID",
				"description": "User authorization via AppleID. \n  * Beck will make a redirect to Apple's website, the user will enact account data \n  * Apple will return these beck \n  * Beck authorizes / register the user and make a redirect on the SPA application",
				"parameters": [
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": true,
						"type": "string",
						"example": "web-client"
					},
					{
						"name": "role",
						"in": "query",
						"description": "Role of the user",
						"required": false,
						"type": "string",
						"default": "cashback",
						"enum": [
							"user",
							"cashback"
						],
						"example": "user"
					},
					{
						"name": "check_ip",
						"in": "query",
						"description": "Optional parameter determines whether it is necessary to remember the current IP and to further do the check",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "promocode",
						"in": "query",
						"description": "Promotional user",
						"required": false,
						"type": "string",
						"example": "1Hy87"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Local user",
						"required": false,
						"type": "string",
						"example": "es"
					},
					{
						"name": "redirect_after_auth_url",
						"in": "query",
						"description": "URL forwarding after social. authorization, by default redirects on Spa Login Page",
						"required": false,
						"type": "string",
						"example": "https%3A%2F%2Fepn.bz%2Fapp-auth"
					}
				],
				"responses": {
					"302": {
						"description": "* Successful answer. Redirect on Spa `https: //epn.bz/app-Auth? Access_Token = asdfasdf & refresh_token = asdfadsf` \n  * Mistake. Redirect on Spa `https: //epn.bz/app-Auth? Error = Social + Network + Authorization + Error & Description = User + WITH + Social + Network + Profile + email + Already + Exist & Code = 400016`"
					}
				}
			}
		},
		"/auth/social/token/apple": {
			"post": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / user registration via Apple ID, with authorization parameters from the application.",
				"description": "User authorization via AppleID. Using the parameters obtained during the authorization process through the application. \n  * The client itself goes authorizes the user using AppleID and receives access parameters and user information. \n  * Klent pulls this request by passing the received data \n  * Beck authorizes / register the user and returns JSON data for access or error.",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"required": [
								"access_data",
								"client_id"
							],
							"properties": {
								"access_data": {
									"description": "Authorization data obtained by AppleID Authorization client",
									"type": "string"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								},
								"role": {
									"description": "Role of the user",
									"type": "string",
									"default": "cashback",
									"enum": [
										"user",
										"cashback"
									],
									"example": "user"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								},
								"promocode": {
									"description": "** Optional ** Parameter - Promocode entered by the user",
									"type": "string",
									"example": "1Hy87"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful authorization, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenAuth"
						}
					}
				}
			}
		},
		"/auth/social/token/fb": {
			"post": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / User Register via Facebook, with Access_Token.",
				"description": "User authorization via Facebook. Using Access_Token derived from social. network. \n  * The client himself goes to social. Network and gets token access to user account. \n  * Klent pulls this request by passing the obtained access token \n  * Beck authorizes / register the user and returns JSON data for access or error.",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"required": [
								"social_network_access_token",
								"client_id"
							],
							"properties": {
								"social_network_access_token": {
									"description": "Tocken derived from social. network client",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"email": {
									"description": "** Optional ** key, email user",
									"type": "string",
									"example": "test11@gmail.com"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								},
								"role": {
									"description": "Role of the user",
									"type": "string",
									"default": "cashback",
									"enum": [
										"user",
										"cashback"
									],
									"example": "user"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								},
								"promocode": {
									"description": "** Optional ** Parameter - Promocode entered by the user",
									"type": "string",
									"example": "1Hy87"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful authorization, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenAuth"
						}
					}
				}
			}
		},
		"/auth/social/token/google": {
			"post": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / user registration via Google, with Access_Token.",
				"description": "User authorization through Google. Using Access_Token derived from social. network. \n  * The client himself goes to social. Network and gets token access to user account. \n  * Klent pulls this request by passing the obtained access token \n  * Beck authorizes / register the user and returns JSON data for access or error.",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"required": [
								"social_network_access_token",
								"client_id"
							],
							"properties": {
								"social_network_access_token": {
									"description": "Tocken derived from social. network client",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"email": {
									"description": "** Optional ** key, email user",
									"type": "string",
									"example": "test11@gmail.com"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								},
								"role": {
									"description": "Role of the user",
									"type": "string",
									"default": "cashback",
									"enum": [
										"user",
										"cashback"
									],
									"example": "user"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								},
								"promocode": {
									"description": "** Optional ** Parameter - Promocode entered by the user",
									"type": "string",
									"example": "1Hy87"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful authorization, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenAuth"
						}
					}
				}
			}
		},
		"/auth/social/token/vk": {
			"post": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / user registration via VK, with Access_Token.",
				"description": "User authorization via vk. Using Access_Token derived from social. network. \n  * The client himself goes to social. Network and gets token access to user account. \n  * Klent pulls this request by passing the obtained access token \n  * Beck authorizes / register the user and returns JSON data for access or error.",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"required": [
								"social_network_access_token",
								"client_id"
							],
							"properties": {
								"social_network_access_token": {
									"description": "Tocken derived from social. network client",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"email": {
									"description": "** Optional ** key, email user received from social. Network VK.",
									"type": "string",
									"example": "test11@gmail.com"
								},
								"role": {
									"description": "Role of the user",
									"type": "string",
									"default": "cashback",
									"enum": [
										"user",
										"cashback"
									],
									"example": "user"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								},
								"promocode": {
									"description": "** Optional ** Parameter - Promocode entered by the user",
									"type": "string",
									"example": "1Hy87"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful authorization, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenAuth"
						}
					}
				}
			}
		},
		"/auth/social/fb": {
			"get": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / User Register via Facebook",
				"description": "User authorization via Facebook. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck authorizes / register the user and make a redirect on the SPA application",
				"parameters": [
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": true,
						"type": "string",
						"example": "web-client"
					},
					{
						"name": "role",
						"in": "query",
						"description": "Role of the user",
						"required": false,
						"type": "string",
						"default": "cashback",
						"enum": [
							"user",
							"cashback"
						],
						"example": "user"
					},
					{
						"name": "check_ip",
						"in": "query",
						"description": "Optional parameter determines whether it is necessary to remember the current IP and to further do the check",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "promocode",
						"in": "query",
						"description": "Promotional user",
						"required": false,
						"type": "string",
						"example": "1Hy87"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Local user",
						"required": false,
						"type": "string",
						"example": "es"
					},
					{
						"name": "redirect_after_auth_url",
						"in": "query",
						"description": "URL forwarding after social. authorization, by default redirects on Spa Login Page",
						"required": false,
						"type": "string",
						"example": "https%3A%2F%2Fepn.bz%2Fapp-auth"
					}
				],
				"responses": {
					"302": {
						"description": "* Successful answer. Redirect on Spa `https: //epn.bz/app-Auth? Access_Token = asdfasdf & refresh_token = asdfadsf` \n  * Mistake. Redirect on Spa `https: //epn.bz/app-Auth? Error = Social + Network + Authorization + Error & Description = User + WITH + Social + Network + Profile + email + Already + Exist & Code = 400016`"
					}
				}
			}
		},
		"/auth/social/google": {
			"get": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / User Register through Google",
				"description": "User authorization through Google. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck authorizes / register the user and make a redirect on the SPA application",
				"parameters": [
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": true,
						"type": "string",
						"example": "web-client"
					},
					{
						"name": "role",
						"in": "query",
						"description": "Role of the user",
						"required": false,
						"type": "string",
						"default": "cashback",
						"enum": [
							"user",
							"cashback"
						],
						"example": "user"
					},
					{
						"name": "check_ip",
						"in": "query",
						"description": "Optional parameter determines whether it is necessary to remember the current IP and to further do the check",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "promocode",
						"in": "query",
						"description": "Promotional user",
						"required": false,
						"type": "string",
						"example": "1Hy87"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Local user",
						"required": false,
						"type": "string",
						"example": "es"
					},
					{
						"name": "redirect_after_auth_url",
						"in": "query",
						"description": "URL forwarding after social. authorization, by default redirects on Spa Login Page",
						"required": false,
						"type": "string",
						"example": "https%3A%2F%2Fepn.bz%2Fapp-auth"
					}
				],
				"responses": {
					"302": {
						"description": "* Successful answer. Redirect on Spa `https: //epn.bz/app-Auth? Access_Token = asdfasdf & refresh_token = asdfadsf` \n  * Mistake. Redirect on Spa `https: //epn.bz/app-Auth? Error = Social + Network + Authorization + Error & Description = User + WITH + Social + Network + Profile + email + Already + Exist & Code = 400016`"
					}
				}
			}
		},
		"/auth/social/redirect": {
			"get": {
				"tags": [
					"auth/social"
				],
				"summary": "Postback from social. Networks",
				"description": "Postback from social. Networks. \n  * Redue to us with tokens in cookies. \n  * In Cook Social_is_Auth will be true if authorization occurred, and not registration through social. net. \n  * If registration occurred, then in Cook Social_is_Auth will be false.",
				"responses": {
					"200": {
						"description": ""
					}
				}
			},
			"post": {
				"tags": [
					"auth/social"
				],
				"summary": "Postback from social. Networks",
				"description": "Postback from social. Networks. \n  * Redue to us with tokens in cookies. \n  * In Cook Social_is_Auth will be true if authorization occurred, and not registration through social. net. \n  * If registration occurred, then in Cook Social_is_Auth will be false.",
				"responses": {
					"200": {
						"description": ""
					}
				}
			}
		},
		"/auth/social/vk": {
			"get": {
				"tags": [
					"auth/social"
				],
				"summary": "Authorization / Registration of user Cherry VK",
				"description": "User authorization via vk. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck authorizes / register the user and make a redirect on the SPA application",
				"parameters": [
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": true,
						"type": "string",
						"example": "web-client"
					},
					{
						"name": "role",
						"in": "query",
						"description": "Role of the user",
						"required": false,
						"type": "string",
						"default": "cashback",
						"enum": [
							"user",
							"cashback"
						],
						"example": "user"
					},
					{
						"name": "check_ip",
						"in": "query",
						"description": "Optional parameter determines whether it is necessary to remember the current IP and to further do the check",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "promocode",
						"in": "query",
						"description": "Promotional user",
						"required": false,
						"type": "string",
						"example": "1Hy87"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Local user",
						"required": false,
						"type": "string",
						"example": "es"
					},
					{
						"name": "redirect_after_auth_url",
						"in": "query",
						"description": "URL forwarding after social. authorization, by default redirects on Spa Login Page",
						"required": false,
						"type": "string",
						"example": "https%3A%2F%2Fepn.bz%2Fapp-auth"
					}
				],
				"responses": {
					"302": {
						"description": "* Successful answer. Redirect on Spa `https: //epn.bz/app-Auth? Access_Token = asdfasdf & refresh_token = asdfadsf` \n  * Mistake. Redirect on Spa `https: //epn.bz/app-Auth? Error = Social + Network + Authorization + Error & Description = User + WITH + Social + Network + Profile + email + Already + Exist & Code = 400016`"
					}
				}
			}
		},
		"/user/links/broken": {
			"get": {
				"tags": [
					"user/links/broken"
				],
				"summary": "Bought links",
				"description": "Getting a List of Bied Links for User",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records on the page, Max 100",
						"required": true,
						"type": "integer",
						"example": 20
					},
					{
						"name": "offset",
						"in": "query",
						"description": "(Page number - 1) * Limit",
						"required": true,
						"type": "integer",
						"example": 2
					}
				],
				"responses": {
					"200": {
						"description": "List of broken links",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "broken-links"
										},
										"id": {
											"type": "integer",
											"default": ""
										},
										"attributes": {
											"properties": {
												"offerId": {
													"description": "Identifier Offer",
													"type": "integer",
													"example": 1
												},
												"creativeId": {
													"description": "Creative identifier",
													"type": "integer",
													"example": 1
												},
												"sub": {
													"description": "SubID 1",
													"type": "string"
												},
												"sub2": {
													"description": "SubID 2",
													"type": "string"
												},
												"sub3": {
													"description": "SubID 3",
													"type": "string"
												},
												"sub4": {
													"description": "SubID 4",
													"type": "string"
												},
												"sub5": {
													"description": "SubID 5",
													"type": "string"
												},
												"targetUrl": {
													"description": "Link for transition",
													"type": "string",
													"example": "https://aliexpress.ru/item/1.html"
												},
												"referer": {
													"description": "Where came from",
													"type": "string",
													"example": "https://www.youtube.com/"
												},
												"requestUrl": {
													"description": "Where to go",
													"type": "string",
													"example": "https://cooldeal.by/redirect/cpa/o/1/?_shorturl=http%3A%2F%2Falii.pub%2F4eeu63&_shorturl_sign=1&ref_url=https%3A%2F%2Fwww.youtube.com%2F&ref_sign=1"
												},
												"urltoshosrt": {
													"description": "Short link",
													"type": "string",
													"example": "http://alii.pub/1"
												},
												"checkingTime": {
													"description": "Check time",
													"type": "string",
													"example": "2020-02-18 18:59:08"
												},
												"statusDescription": {
													"description": "the product is available",
													"type": "string",
													"example": "the product is available"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "broken-links",
										"id": "",
										"attributes": {
											"offerId": 1,
											"creativeId": 1,
											"sub": "sub",
											"sub2": "sub2",
											"sub3": "sub3",
											"sub4": "sub4",
											"sub5": "sub5",
											"targetUrl": "https://aliexpress.ru/item/1.html?af=1&cv=1&cn=1&dp=1",
											"referer": "https://www.youtube.com/",
											"requestUrl": "https://cooldeal.by/redirect/cpa/o/q4gsbgwi5zil9iabgwl6npmpg79t9ynl/?_shorturl=http%3A%2F%2Falii.pub%2F4eeu63&_shorturl_sign=1&ref_url=https%3A%2F%2Fwww.youtube.com%2F&ref_sign=1",
											"urltoshort": "http://alii.pub/4eeu63",
											"checkingTime": "2020-02-18 18:59:08",
											"statusDescription": "the product is available"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation error",
						"schema": {
							"properties": {
								"errors": {
									"properties": {
										"error": {
											"type": "integer",
											"default": 422001
										},
										"error_description": {
											"type": "integer",
											"default": "offset is required"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": "false"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offset is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/cdn/upload/url": {
			"get": {
				"tags": [
					"cdn"
				],
				"summary": "Get the URL to download on CDN",
				"description": "We receive a server and token URL to load pictures using [Method] (# Tag / CDN% 2FPaths% 2fcdn.epn.bz ~ 1upload% 2FPOST).",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "visibility",
						"in": "query",
						"description": "Access level.",
						"required": true,
						"type": "string",
						"enum": [
							"public",
							"private",
							"redirect"
						]
					},
					{
						"name": "type",
						"in": "query",
						"description": "File type.",
						"required": true,
						"type": "string",
						"enum": [
							"image",
							"file"
						]
					}
				],
				"responses": {
					"200": {
						"description": "Generated token and uploadurl",
						"examples": {
							"application/json": {
								"data": {
									"type": "cdn",
									"id": "",
									"attributes": {
										"token": "test",
										"uploadUrl": "https://example.com"
									}
								},
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect Type or Visibility",
						"schema": {
							"$ref": "#/definitions/422_Errors_Cdn_GetUploadUrl"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "type not correct"
									},
									{
										"error": 422001,
										"error_description": "visibility not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/clicks": {
			"get": {
				"tags": [
					"clicks"
				],
				"summary": "List of clicks",
				"description": "Click's list",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Sampling restriction",
						"required": false,
						"type": "integer",
						"default": 4,
						"example": 10
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Selection displacement",
						"required": false,
						"type": "integer",
						"default": 0,
						"example": 4
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Fields sorting through the comma. By default, sorting ascending, if there is a minus sign before the field name, then sorting descending. Available fields: Time, Referer, Refererhost",
						"required": false,
						"type": "string",
						"example": "-time,referer"
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "List of offering",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Sampling start date, default sample for the last 14 days",
						"required": false,
						"type": "string",
						"example": "2020-05-15"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "Sampling end date",
						"required": false,
						"type": "string",
						"example": "2020-05-16"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Fields for sampling clicks. The ClickCode field is the resource ID",
						"required": false,
						"type": "string",
						"default": "time,offerId,clickCode",
						"enum": [
							"time",
							"offerId",
							"os",
							"material",
							"clickCode",
							"countryCode"
						],
						"example": "time,clickCode"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "clicks",
										"id": "41otc514mb0394z896o3ry2lwxcb2fol",
										"attributes": {
											"time": "2020-05-17 10:10:10",
											"offerId": 3
										}
									},
									{
										"type": "clicks",
										"id": "41otc514mb0394z896o3ry2lwxcb2fb2",
										"attributes": {
											"time": "2020-05-12 11:11:11",
											"offerId": 1
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "limit must be a minimum of 1."
									},
									{
										"error": 422001,
										"error_description": "Sort not correct"
									},
									{
										"error": 422001,
										"error_description": "DateFrom not valid."
									},
									{
										"error": 422001,
										"error_description": "The dateTo should be over than dateFrom."
									},
									{
										"error": 422001,
										"error_description": "Fields not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/compensations": {
			"get": {
				"tags": [
					"compensations"
				],
				"summary": "Get compensation for user-cacheker",
				"description": "All user compensation requested",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records (maximum = 200)",
						"required": false,
						"type": "integer",
						"default": 20,
						"maximum": 200,
						"example": 20
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Bias",
						"required": false,
						"type": "integer",
						"default": 0,
						"example": 20
					}
				],
				"responses": {
					"200": {
						"description": "Search results",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "compensations",
										"id": 321,
										"attributes": {
											"user_id": 123,
											"compensation": 5.55,
											"currency": "USD",
											"status": "paid",
											"comment": "",
											"created_at": "2019-04-01 10:06:07",
											"order_number": 1234560,
											"offer_id": 1,
											"price": 7.77
										}
									}
								],
								"meta": {
									"total_found": 2,
									"has_next": false
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "limit must be a maximum of 200."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"compensations"
				],
				"summary": "Order compensation. For Cashbacker",
				"description": "Order compensation.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"example": "ru"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Order compensation.",
						"schema": {
							"required": [
								"cashback_order_search_id",
								"img_urls",
								"date",
								"survey_response"
							],
							"properties": {
								"cashback_order_search_id": {
									"description": "Order ID order",
									"type": "integer",
									"example": 1234
								},
								"img_urls": {
									"description": "An array of sizes of pictures.",
									"type": "array",
									"example": "['https://cdn1.epn.bz/public/a58b0454.jpg']"
								},
								"date": {
									"description": "order date",
									"type": "string",
									"example": "2019-01-15"
								},
								"survey_response": {
									"description": "JSON responded (the answer can be empty if the questionnaire was not when called [method1] (# Tag / Compensation% 2FPaths% 2F ~ 1COMPensations ~ 1SURVEY ~ 1Phone% 2fget) or [Method2] (# Tag / Compensation% 2FPaths% 2F ~ 1Compensations ~ 1SURVEY ~ 1WEB% 2FGET).).",
									"type": "object",
									"example": {
										"type": "web",
										"answers": {
											"browserSession": "truth",
											"plugin": "lie",
											"AdBlock": "truth",
											"orderInTheBasket": "lie"
										}
									}
								},
								"type": {
									"description": "Type of questionnaire for purchases from PC or mobile devices.",
									"type": "string",
									"enum": [
										"web",
										"phone"
									],
									"example": "web"
								},
								"answers": {
									"description": "Answers to questionnaire questions. Where JSON keys are from methods: [method1] (# Tag / Compensation% 2FPaths% 2F ~ 1COMPensations ~ 1SURVEY ~ 1Phone% 2fget) or [Method2] (# Tag / Compensation% 2FPaths% 2F ~ 1Compensations ~ 1SURVEY ~ 1WEB% 2FGET ).",
									"type": "object"
								},
								"browserSession": {
									"description": "The answer to the question",
									"type": "string",
									"enum": [
										"truth",
										"lie"
									],
									"example": "truth"
								},
								"plugin": {
									"description": "The answer to the question",
									"type": "string",
									"enum": [
										"truth",
										"lie"
									],
									"example": "lie"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The compensation order was successful.",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": {
									"cashback_order_search_id": 1234,
									"img_urls": "['https://cdn1.epn.bz/public/a58b0454.jpg']",
									"date": "2019-01-01"
								}
							}
						}
					},
					"400": {
						"description": "Invalid request",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400080,
										"error_description": "Limit request in compensation."
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "img_urls must be an array."
									},
									{
										"error": 422001,
										"error_description": "date must be a valid date."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/compensations/survey/phone": {
			"get": {
				"tags": [
					"compensations"
				],
				"summary": "A questionnaire for shopping through a mobile device. For cachexker.",
				"description": "A questionnaire for shopping through a mobile device, with questions and answers. The questionnaire returns questions and answers no more than 3 times a month for each user.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"example": "ru"
					}
				],
				"responses": {
					"200": {
						"description": "List of questions and answers.",
						"examples": {
							"application/json": {
								"data": {
									"0": {
										"type": "compensation-survey-phone-list",
										"id": 1,
										"attributes": {
											"question": "Test",
											"answer": {
												"truth": [
													"Test",
													"Test2"
												],
												"lie": [
													"Test"
												]
											},
											"faq_link": true,
											"recommendations": [
												{
													"type": "text",
													"text": "Test"
												},
												{
													"type": "list",
													"text": "list 1"
												}
											]
										}
									},
									"1": {
										"type": "compensation-survey-phone-list",
										"id": 2,
										"attributes": {
											"question": "Test",
											"answer": {
												"truth": [
													"Test"
												],
												"lie": [
													"Test"
												]
											},
											"faq_link": false,
											"recommendations": [
												{
													"type": "text",
													"text": "Test"
												},
												{
													"type": "list",
													"text": "list 1"
												}
											]
										}
									},
									"result": true
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect language.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "language not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/compensations/survey/web": {
			"get": {
				"tags": [
					"compensations"
				],
				"summary": "Questionnaire for shopping with PC. For Cashbacker",
				"description": "A questionnaire for purchases from a PC, with questions and answers. The questionnaire returns questions and answers no more than 3 times a month for each user.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"example": "ru"
					}
				],
				"responses": {
					"200": {
						"description": "List of questions and answers.",
						"examples": {
							"application/json": {
								"data": {
									"0": {
										"type": "compensation-survey-web-list",
										"id": 1,
										"attributes": {
											"question": "Test",
											"answer": {
												"truth": [
													"Test",
													"Test2"
												],
												"lie": [
													"Test"
												]
											},
											"faq_link": false,
											"recommendations": [
												{
													"type": "text",
													"text": "Test"
												},
												{
													"type": "list",
													"text": "list 1"
												}
											]
										}
									},
									"1": {
										"type": "compensation-survey-web-list",
										"id": 2,
										"attributes": {
											"question": "Test",
											"answer": {
												"truth": [
													"Test"
												],
												"lie": [
													"Test"
												]
											},
											"faq_link": true,
											"recommendations": [
												{
													"type": "text",
													"text": "Test"
												},
												{
													"type": "list",
													"text": "list 1"
												}
											]
										}
									},
									"result": true
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect language.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "language not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/confirmation/payout": {
			"get": {
				"tags": [
					"confirmation/payout"
				],
				"summary": "Get code for the output of funds",
				"description": "Obtaining a code for the output of funds",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "purseId",
						"in": "query",
						"description": "Wallet number",
						"required": true,
						"type": "integer",
						"example": 79531231212
					},
					{
						"name": "transport",
						"in": "query",
						"description": "How to send",
						"required": false,
						"type": "string",
						"default": "sms",
						"enum": [
							"sms",
							"call"
						],
						"example": "call"
					}
				],
				"responses": {
					"200": {
						"description": "Get code to phone number.",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": {
									"purseId": 79531231234,
									"transport": "call"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters are transmitted",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "purseId is required"
									},
									{
										"error": 422001,
										"error_description": "purseId must be a number."
									},
									{
										"error": 422001,
										"error_description": "transport not correct"
									},
									{
										"error": 400062,
										"error_description": "need confirmed phone"
									},
									{
										"error": 400041,
										"error_description": "timeout 1 minute"
									},
									{
										"error": 400042,
										"error_description": "timeout 1 day"
									},
									{
										"error": 500000,
										"error_description": "Error code generation"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/confirmation/time-to-reply-sms": {
			"get": {
				"tags": [
					"confirmation"
				],
				"summary": "Time to re-send SMS",
				"description": "Residual time to re-send SMS with code",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "SMS type confirmation",
						"required": true,
						"type": "string",
						"enum": [
							"confirmation",
							"recovery",
							"purse_add",
							"phone_confirm",
							"payout"
						]
					},
					{
						"name": "itemId",
						"in": "query",
						"description": "ID Wallet (if confirmation type - purse_add)",
						"required": false,
						"type": "integer",
						"example": 123
					},
					{
						"name": "phoneValue",
						"in": "query",
						"description": "Telephone number (if confirmation type - Phone_Confirm)",
						"required": false,
						"type": "string",
						"example": 895236748234
					}
				],
				"responses": {
					"200": {
						"description": "Time through which you can send SMS reuse",
						"schema": {
							"property": "data",
							"properties": {
								"result": {
									"type": "boolean",
									"default": true
								}
							},
							"type": "array",
							"items": {
								"properties": {
									"type": {
										"description": "Type of resource",
										"type": "string",
										"default": "sms_confirmation"
									},
									"id": {
										"type": "string",
										"default": ""
									},
									"attributes": {
										"properties": {
											"moment_end": {
												"description": "Time (UTC) through which you can send the code again. Example: 2018-06-07 12:44:06",
												"type": "string"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						}
					},
					"400": {
						"description": "No active code",
						"schema": {
							"property": "errors",
							"properties": {
								"result": {
									"type": "boolean",
									"default": false
								}
							},
							"type": "array",
							"items": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 400045
									},
									"error_description": {
										"type": "string",
										"default": "active code not exist"
									}
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect Type, ItemID or PhoneValue",
						"schema": {
							"property": "errors",
							"properties": {
								"result": {
									"type": "boolean",
									"default": false
								}
							},
							"type": "array",
							"items": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "Description of the validation error",
										"type": "string",
										"enum": [
											"type is required.",
											"Type not correct"
										]
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/coupons/attitude": {
			"get": {
				"tags": [
					"coupons"
				],
				"summary": "Getting information with the user to coupons",
				"description": "Obtaining information with the user to coupons (Likes / Dyslike)",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "User's relation to coupons",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "coupons-attitude",
										"id": 1,
										"attributes": {
											"couponId": 100,
											"attitude": "like"
										}
									},
									{
										"type": "coupons-attitude",
										"id": 2,
										"attributes": {
											"couponId": 150,
											"attitude": "dislike"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"coupons"
				],
				"summary": "Update user relation to coupon",
				"description": "Update user's relation to the coupon (husky / dyslaike)",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"couponId"
							],
							"properties": {
								"couponId": {
									"description": "id coupon",
									"type": "integer",
									"example": 50
								},
								"attitude": {
									"description": "User's relation to promotion",
									"type": "string",
									"enum": [
										"like",
										"dislike",
										"delete"
									],
									"example": "like"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"204": {
						"description": "User's relation to promotion updated"
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "couponId is required."
									},
									{
										"error": 422001,
										"error_description": "couponId must be a number."
									},
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									},
									{
										"error": 422001,
										"error_description": "attitude is required."
									},
									{
										"error": 422001,
										"error_description": "attitude not valid."
									},
									{
										"error": 422001,
										"error_description": "attitude must be a string."
									},
									{
										"error": 400038,
										"error_description": "coupon attitude already set."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/coupons/bookmarks": {
			"get": {
				"tags": [
					"coupons"
				],
				"summary": "Getting coupons in user bookmarks",
				"description": "Getting coupons in user bookmarks",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Local",
						"required": false,
						"type": "string",
						"default": "ru",
						"enum": [
							"ru",
							"en"
						]
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records (MAX 500)",
						"required": false,
						"type": "integer",
						"default": 100
					},
					{
						"name": "offset",
						"in": "query",
						"description": "bias",
						"required": false,
						"type": "integer"
					}
				],
				"responses": {
					"200": {
						"description": "Coupon list in user bookmarks",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "coupon-bookmarks",
										"id": 1,
										"attributes": {
											"description": "Coupon Description",
											"name": "Coupon name",
											"code": "Coupon code",
											"isPersonal": 0,
											"userId": 0,
											"themeId": 0,
											"typeId": 0,
											"offerId": 0,
											"dateFrom": "2019-11-11",
											"dateTo": "2019-11-11",
											"url": "https://backit.me",
											"likeCount": 1,
											"dislikeCount": 1,
											"slug": "slug-name"
										}
									}
								],
								"meta": {
									"count": 1,
									"hasNext": false
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "lang must be a string."
									},
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									},
									{
										"error": 422001,
										"error_description": "limit must be a number."
									},
									{
										"error": 422001,
										"error_description": "limit must be a maximum of 500."
									},
									{
										"error": 422001,
										"error_description": "offset must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"coupons"
				],
				"summary": "Adding a coupon in bookmarks",
				"description": "Adding a coupon in bookmarks",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"couponId"
							],
							"properties": {
								"couponId": {
									"description": "id coupon",
									"type": "integer",
									"example": 50
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Coupon added to bookmarks",
						"examples": {
							"application/json": {
								"data": {
									"type": "coupon-bookmarks",
									"id": 1
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "couponId is required."
									},
									{
										"error": 422001,
										"error_description": "couponId must be a number."
									},
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									},
									{
										"error": 422034,
										"error_description": "Coupon already exist in bookmarks"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"coupons"
				],
				"summary": "Coupon removal from bookmarks",
				"description": "Coupon removal from bookmarks",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "couponId",
						"in": "query",
						"description": "id coupon",
						"required": true,
						"type": "integer",
						"example": 1
					}
				],
				"responses": {
					"204": {
						"description": "Coupon removed from bookmarks"
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "couponId is required."
									},
									{
										"error": 422001,
										"error_description": "couponId must be a number."
									},
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									},
									{
										"error": 404005,
										"error_description": "bookmark not found."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/coupons/themes": {
			"get": {
				"tags": [
					"coupons"
				],
				"summary": "List of topics coupons",
				"description": "List of topics coupons",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "required if no X-ACCESS-TOKEN",
						"required": false,
						"type": "string",
						"enum": [
							"role_cashback",
							"role_user"
						]
					}
				],
				"responses": {
					"200": {
						"description": "coupon theme list",
						"examples": {
							"application/json": {
								"data": {
									"type": "coupon_theme",
									"id": 1,
									"attributes": {
										"description": "Coupon theme #0"
									}
								},
								"result": true
							}
						}
					}
				}
			}
		},
		"/coupons/types": {
			"get": {
				"tags": [
					"coupons"
				],
				"summary": "List of types of coupons",
				"description": "List of types of coupons",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "required if no X-ACCESS-TOKEN",
						"required": false,
						"type": "string",
						"enum": [
							"role_cashback",
							"role_user"
						]
					}
				],
				"responses": {
					"200": {
						"description": "coupon types list",
						"examples": {
							"application/json": {
								"data": {
									"type": "coupon_type",
									"id": 1,
									"attributes": {
										"description": "Coupon type #0"
									}
								},
								"result": true
							}
						}
					}
				}
			}
		},
		"/coupons": {
			"get": {
				"tags": [
					"coupons"
				],
				"summary": "List of coupons",
				"description": "List of coupons",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "required for get with personal coupons",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "isPersonal",
						"in": "query",
						"description": "send this field to get with/without personal coupons, if not set then false is selected",
						"required": false,
						"type": "boolean",
						"default": "false"
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "required if no X-ACCESS-TOKEN",
						"required": false,
						"type": "string",
						"enum": [
							"role_cashback",
							"role_user"
						]
					},
					{
						"name": "typeId",
						"in": "query",
						"description": "send this field to get coupons by types",
						"required": false,
						"type": "integer",
						"example": "1,2"
					},
					{
						"name": "themeId",
						"in": "query",
						"description": "send this field to get coupons by theme",
						"required": false,
						"type": "integer"
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "send this field to get coupons by offers",
						"required": false,
						"type": "integer",
						"example": "1,4"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "By default, sorting is in ascending order, if there is a minus sign in front of the field name, then sorting is in descending order.\n * Available fields: dateFrom,id,rating,commentsCount,relevance(for relevance supports sorting in one direction only)",
						"required": false,
						"type": "string",
						"example": "-dateFrom,-rating,-commentsCount"
					},
					{
						"name": "slug",
						"in": "query",
						"description": "Send this field to get coupons by slug.\n * For get by slug_en, send en in language param, if you need get coupon by slug_ru, send ru in language param",
						"required": false,
						"type": "string",
						"example": "skidka-na-vse"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "send this field to control count of reterned coupons",
						"required": true,
						"type": "integer"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "send this field to control select starting position",
						"required": true,
						"type": "integer"
					},
					{
						"name": "placingPossibility",
						"in": "query",
						"description": "send this field to get coupons can be placed on store page",
						"required": false,
						"type": "bool"
					}
				],
				"responses": {
					"200": {
						"description": "coupons list",
						"examples": {
							"application/json": {
								"data": {
									"type": "coupon",
									"id": 1,
									"attributes": {
										"description": "Coupon Description",
										"name": "Coupon name",
										"code": "Coupon code",
										"isPersonal": 0,
										"userId": 0,
										"themeId": 0,
										"typeId": 0,
										"offerId": 0,
										"inBookmarks": 1,
										"likeCount": 50,
										"dislikeCount": 3,
										"dateFrom": "2019-11-11",
										"dateTo": "2019-11-11",
										"url": "https://backit.me",
										"placingPossibility": 0,
										"slug": "slug-name-by-lang",
										"commentsCount": 2
									}
								},
								"meta": {
									"count": 1,
									"hasNext": false
								},
								"result": true
							}
						}
					}
				}
			}
		},
		"/coupons/offers": {
			"get": {
				"tags": [
					"coupons"
				],
				"summary": "Coupon Suggestions",
				"description": "Get a list of proposals that have special coupons",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "required for get with personal coupons",
						"required": false,
						"type": "string"
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "filter by role (if there is no X-ACCESS-TOKEN)",
						"required": false,
						"type": "string",
						"enum": [
							"role_cashback",
							"role_user"
						]
					}
				],
				"responses": {
					"200": {
						"description": "offers with coupon list",
						"examples": {
							"application/json": {
								"data": {
									"type": "offer_id",
									"id": 1
								},
								"result": true
							}
						}
					}
				}
			}
		},
		"/creative/create": {
			"post": {
				"tags": [
					"creatives"
				],
				"summary": "Creating Creative",
				"description": "Creating a new creativity.",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"offerId",
								"description",
								"type"
							],
							"properties": {
								"link": {
									"description": "Link",
									"type": "string",
									"example": "https://test-site.ru, **обязательный параметр для type = deeplink, link. Для  type = banner указывать не нужно**."
								},
								"offerId": {
									"description": "Id Offer, ** Required Parameter **.",
									"type": "integer",
									"example": 1
								},
								"placementId": {
									"description": "Playground ID, ** Optional Parameter **",
									"type": "integer",
									"example": 1
								},
								"description": {
									"description": "Creativity Description, no more than 100 characters ** Required parameter **.",
									"type": "string",
									"example": "Creative test name"
								},
								"type": {
									"description": "Creative type, ** required parameter **.",
									"type": "string",
									"enum": [
										"deeplink",
										"banner",
										"link"
									],
									"example": "deeplink"
								},
								"sizes": {
									"description": "The size of the banner is required if Type = Banner, ** optional parameter **.",
									"type": "string",
									"example": "560x116"
								},
								"banners": {
									"description": "List of banner ID is required if Type = Banner, ** optional parameter **.",
									"type": "array",
									"example": [
										1,
										2,
										4
									]
								},
								"attractToCashback": {
									"description": "Use to attract Cashback EPN, BANNER or IFRAME users (not available for all offer), ** Optional parameter **. If specified, the ** Refofferid parameter is required to fill **.",
									"type": "string",
									"enum": [
										"iframe",
										"banner"
									],
									"example": "banner"
								},
								"refOfferId": {
									"description": "The referral offer ID (94, 95, 99), if creative is used to attract referrals, ** Optional parameter **. If it is specified, the AttractTocashBack parameter, ** is required to fill **.",
									"type": "integer",
									"example": 1
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Creative preserved",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "creatives",
										"id": 1,
										"attributes": {
											"code": "https://test-code.ru",
											"hash": "hash1"
										}
									}
								],
								"result": true,
								"request": {
									"url": "https://test-site.ru",
									"offerId": 1,
									"type": "deeplink",
									"name": "Тестовый креатив"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Error creating creativity",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "link must be a valid URL."
									},
									{
										"error": 422001,
										"error_description": "description must be a string."
									},
									{
										"error": 422001,
										"error_description": "description must be a maximum of 100."
									},
									{
										"error": 422001,
										"error_description": "type must be a string."
									},
									{
										"error": 422001,
										"error_description": "type is required."
									},
									{
										"error": 422001,
										"error_description": "offerId is required."
									},
									{
										"error": 422001,
										"error_description": "offerId must be a number."
									},
									{
										"error": 422001,
										"error_description": "Offer not found!"
									},
									{
										"error": 422001,
										"error_description": "Placement for refOfferId not found!"
									},
									{
										"error": 422001,
										"error_description": "Link error!"
									},
									{
										"error": 422001,
										"error_description": "Failed to create creative, try again later!"
									},
									{
										"error": 422001,
										"error_description": "Size value error!"
									},
									{
										"error": 422001,
										"error_description": "Banners value error!"
									},
									{
										"error": 422001,
										"error_description": "Banners value error!"
									},
									{
										"error": 422001,
										"error_description": "RefOfferId value error!"
									},
									{
										"error": 422001,
										"error_description": "AttractToCashback value error!"
									},
									{
										"error": 422001,
										"error_description": "RefOfferId error!"
									},
									{
										"error": 422001,
										"error_description": "Offer not supported iframe!"
									},
									{
										"error": 422001,
										"error_description": "Banners list error!"
									},
									{
										"error": 422001,
										"error_description": "Placement does not exist!"
									},
									{
										"error": 422001,
										"error_description": "Placement is not allowed!"
									},
									{
										"error": 422001,
										"error_description": "Offer does not match placement!"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/creatives/deeplinks": {
			"get": {
				"tags": [
					"creatives"
				],
				"summary": "List of Deeplinks by user",
				"description": "List of Deeplinks by user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Fields that need to be returned. Available fields: \n  * id \n  * user_id, \n  * LINK, \n  * Status, \n  * Type, \n  * OFFER_TYPE, \n  * offer_id, \n  * Code, \n  * Description, \n  * hash, \n  * Created_at.",
						"required": true,
						"type": "string",
						"example": "id,link"
					},
					{
						"name": "statuses",
						"in": "query",
						"description": "Necessary statuses.",
						"required": true,
						"type": "string",
						"enum": [
							"new",
							"working"
						],
						"example": "new"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records on the page, Max 100",
						"required": false,
						"type": "integer",
						"example": 50
					},
					{
						"name": "offset",
						"in": "query",
						"description": "(page number-1) * limit",
						"required": false,
						"type": "integer",
						"example": 0
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "Id Offers for which you need a list of Deeplink'ov",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "description",
						"in": "query",
						"description": "Filter by Deeplink name (accurate match).",
						"required": false,
						"type": "string",
						"example": "deeplink name here"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting. Valid values: id. \n  * The default sorting order is ascending. Sign '-' in front of the field - the reverse order of sorting (descending)",
						"type": "string",
						"example": "-id"
					}
				],
				"responses": {
					"200": {
						"description": "List of Deeplinks by user",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "deeplink",
										"id": 1,
										"attributes": {
											"link": "http://site.ru",
											"offer_id": 1
										}
									},
									{
										"type": "deeplink",
										"id": 2,
										"attributes": {
											"link": "http://site.ru",
											"offer_id": 2
										}
									}
								],
								"result": true,
								"request": {
									"offerId": "1,2",
									"limit": 10,
									"offset": 0,
									"fields": "id, link, offer_id"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect fields",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "fields is required."
									},
									{
										"error": 422001,
										"error_description": "fields must be a string."
									},
									{
										"error": 422001,
										"error_description": "statuses is required."
									},
									{
										"error": 422001,
										"error_description": "statuses must be a string."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/creatives/{creativeId}/banners": {
			"get": {
				"tags": [
					"creatives"
				],
				"summary": "List of banners",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "creativeId",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of banners",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "creatives-banners"
										},
										"id": {
											"type": "integer",
											"default": ""
										},
										"attributes": {
											"properties": {
												"link": {
													"description": "The target page on which the banner leads",
													"type": "string",
													"example": "http://activities.aliexpress.com/handbags.php"
												},
												"src": {
													"description": "Relative way to image banner",
													"type": "string",
													"example": "/banners/aliexpress/T1sa0SFTpbXXXG_RZI-728-90.jpg"
												},
												"cdn_url": {
													"description": "Link to CDN.",
													"type": "string",
													"example": ""
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"properties": {
										"creativeId": {
											"type": "string",
											"default": 7
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "creatives-banners",
										"id": 7,
										"attributes": {
											"link": "http://activities.aliexpress.com/handbags.php",
											"src": "/banners/aliexpress/T1sa0SFTpbXXXG_RZI-728-90.jpg",
											"cdn_url": ""
										}
									}
								],
								"result": true,
								"request": {
									"creativeId": 7
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "The request failed",
						"schema": {
							"properties": {
								"errors": {
									"properties": {
										"error": {
											"type": "integer",
											"default": 422001
										},
										"error_description": {
											"type": "string",
											"default": "creativeId is required."
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": "false"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": [
								{
									"errors": [
										{
											"error": 422001,
											"error_description": "creativeId must be a number."
										}
									],
									"result": false
								}
							]
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/creatives": {
			"get": {
				"tags": [
					"creatives"
				],
				"summary": "List of creative",
				"description": "List of creative",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "Full name creative",
						"required": false,
						"type": "string",
						"example": "test creative"
					},
					{
						"name": "creativeIds",
						"in": "query",
						"description": "Creative identifiers, through commas",
						"required": false,
						"type": "string",
						"example": "1,2"
					},
					{
						"name": "types",
						"in": "query",
						"description": "Types) of creative, through commas",
						"required": false,
						"type": "string",
						"enum": [
							"deeplink",
							"banner",
							"link"
						],
						"example": "link,banner"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Field (s) from the creative table for sampling",
						"required": true,
						"type": "string",
						"enum": [
							"id",
							"link",
							"offerId",
							"offerType",
							"createdAt",
							"status",
							"code",
							"description",
							"showRedirectText",
							"type",
							"hash",
							"sizes",
							"role",
							"extInfoType"
						],
						"example": "description,link"
					},
					{
						"name": "offersIds",
						"in": "query",
						"description": "Identifiers of offering creatives",
						"required": false,
						"type": "string",
						"example": "1,2"
					},
					{
						"name": "placementIds",
						"in": "query",
						"description": "Identifiers of the sites to which the creatives are tied",
						"required": false,
						"type": "string",
						"example": "1,2"
					},
					{
						"name": "statuses",
						"in": "query",
						"description": "Creative status (s), through commas",
						"required": false,
						"type": "string",
						"enum": [
							"new",
							"working",
							"denied",
							"banned",
							"waiting"
						],
						"example": "new,working"
					},
					{
						"name": "isDeleted",
						"in": "query",
						"description": "Choose Active (False) or Archive (True) Creative",
						"required": true,
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"example": "true"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records on the page, Max 100",
						"required": true,
						"type": "integer",
						"example": 20
					},
					{
						"name": "offset",
						"in": "query",
						"description": "(Page number - 1) * Limit",
						"required": false,
						"type": "integer",
						"example": 2
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting. Valid values: isfavorite. \n  * The default sorting order is ascending. Sign '-' in front of the field - the reverse order of sorting (descending)",
						"required": false,
						"type": "string",
						"example": "-isFavorite"
					}
				],
				"responses": {
					"200": {
						"description": "List of creative",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "creative"
										},
										"id": {
											"type": "integer",
											"default": ""
										},
										"attributes": {
											"properties": {
												"link": {
													"description": "link to the page",
													"type": "string",
													"example": "https://aliexpress.com"
												},
												"offerId": {
													"description": "Identifier Offer",
													"type": "string",
													"example": 1
												},
												"offerType": {
													"description": "Offer type",
													"type": "string",
													"example": "ali"
												},
												"status": {
													"description": "Creative status",
													"type": "string",
													"enum": [
														"new",
														"working",
														"banned",
														"waiting"
													],
													"example": "new"
												},
												"code": {
													"description": "Jarled reference",
													"type": "string",
													"example": "https://shopnow.pub/cashback/view/kljrhglerglekrjng/"
												},
												"description": {
													"description": "Creative name",
													"type": "string",
													"example": "epn"
												},
												"showRedirectText": {
													"description": "Outdated, not used",
													"type": "integer",
													"example": 0
												},
												"type": {
													"description": "Type of creative",
													"type": "string",
													"enum": [
														"banner",
														"link",
														"deeplink"
													],
													"example": "deeplink"
												},
												"hash": {
													"description": "Hash - Creative Identifier",
													"type": "string",
													"example": "kljrhglerglekrjng"
												},
												"createdAt": {
													"description": "Creative creation time",
													"type": "string",
													"example": "2021-01-10 09:00:00"
												},
												"sizes": {
													"description": "Image Dimensions for Banner Creativity",
													"type": "string",
													"example": "``"
												},
												"role": {
													"description": "Outdated, not used",
													"type": "string",
													"example": "``"
												},
												"extInfoType": {
													"properties": {
														"refProgram": {
															"description": "Identifier referral program",
															"type": "string",
															"example": 99
														},
														"gearBestOfferType": {
															"description": "Outdated, not used",
															"type": "string",
															"example": "``"
														},
														"attractToCashback": {
															"description": "If when creating creative is set to a check mark \\ 'use to attract CashBack EPN \\', then in the parameter you need to transfer one of the above values.",
															"type": "string",
															"enum": [
																"banner",
																"iframe"
															],
															"example": "banner"
														},
														"placementId": {
															"description": "The site ID to which Creative is tied",
															"type": "string",
															"example": 1
														},
														"isFavorite": {
															"description": "Added creative add to favorites or not (1 - if added)",
															"type": "string",
															"example": 1
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "creative",
										"id": 1,
										"attributes": {
											"type": "deeplink",
											"createdAt": "2021-01-10 09:00:00",
											"description": "description5",
											"link": "https://link5.ru",
											"hash": "hash5",
											"sizes": "",
											"extInfoType": {
												"refProgram": 99,
												"gearbestOfferType": "",
												"attractToCashback": "banner",
												"placementId": 1,
												"isFavorite": 1
											},
											"src": "/uploads/",
											"typeDesc": "DeepLink"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/creatives/types": {
			"get": {
				"tags": [
					"creatives"
				],
				"summary": "List of types of creatives",
				"description": "List of types of creatives",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of creative types.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "creative-types",
										"id": 1,
										"attributes": {
											"name": "deeplink"
										}
									},
									{
										"type": "creative-types",
										"id": 2,
										"attributes": {
											"name": "banner"
										}
									},
									{
										"type": "creative-types",
										"id": 3,
										"attributes": {
											"name": "link"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/creatives/offers": {
			"get": {
				"tags": [
					"creatives"
				],
				"summary": "List of unique Idis Idis Creative",
				"description": "List of unique Idis Idis Creative",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "isDeleted",
						"in": "query",
						"description": "Choose Active (False) or Archive (True) Creative",
						"required": true,
						"type": "boolean",
						"enum": [
							true,
							false
						],
						"example": "true"
					},
					{
						"name": "type",
						"in": "query",
						"description": "Creative type of comma",
						"required": false,
						"type": "string",
						"example": "deeplink,banner"
					}
				],
				"responses": {
					"200": {
						"description": "List of unique Idis Idis Creative",
						"examples": {
							"application/json": {
								"success": true,
								"data": [
									{
										"id": 1,
										"type": "creative-offers-ids"
									},
									{
										"id": 2,
										"type": "creative-offers-ids"
									}
								]
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/creatives/{id}": {
			"patch": {
				"tags": [
					"creatives"
				],
				"summary": "Upgrading an existing creative",
				"description": "Updating the existing creativity by its ID (transmitted to the URL). Returns the fields that were updated",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"properties": {
								"link": {
									"description": "Link. Parameter for Creative Type = Deeplink.",
									"type": "string",
									"example": "https://test-site.ru"
								},
								"description": {
									"description": "Description of creative",
									"type": "string",
									"example": "Creative test name"
								},
								"archiveStatus": {
									"description": "Remove the archive or remove from the archive",
									"type": "string",
									"enum": [
										"archive",
										"unarchive"
									],
									"example": "unarchive"
								},
								"isFavorite": {
									"description": "Add to Favorites or Remove",
									"type": "boolean",
									"enum": [
										true,
										false
									],
									"example": true
								}
							},
							"type": "object"
						}
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Creative updated",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "patch-creative",
										"id": 33,
										"attributes": {
											"link": "https://test-code.ru",
											"description": "some description here"
										}
									}
								],
								"result": true,
								"request": {
									"link": "https://test-code.ru",
									"description": "some description here"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/doodles/list": {
			"get": {
				"tags": [
					"doodles/list"
				],
				"summary": "Dudla",
				"description": "List of Dudlov",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"example": "ru"
					}
				],
				"responses": {
					"200": {
						"description": "List of Dudlov",
						"schema": {
							"$ref": "#/definitions/DoodlesList"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "doodles",
										"id": 3,
										"attributes": {
											"name": "AliExpress",
											"dateTo": "2025-01-01 00:00:00",
											"dateFrom": "2015-01-01 00:00:00",
											"offerLogo": "https://example.com/",
											"background": "https://example.com/",
											"image": "https://example.com/",
											"priority": 4,
											"textColor": "#ffffff",
											"buttonColor": "#000000",
											"textButtonColor": "#ffffff",
											"status": "active",
											"translate": {
												"ru": {
													"title": "Test",
													"subTitle": "Test",
													"textButton": "Test",
													"link": "https://example.com/"
												}
											}
										}
									},
									{
										"type": "doodles",
										"id": 4,
										"attributes": {
											"name": "Test",
											"dateTo": "2025-01-01 00:00:00",
											"dateFrom": "2015-01-01 00:00:00",
											"offerLogo": "https://example.com/",
											"background": "https://example.com/",
											"image": "https://example.com/",
											"priority": 4,
											"textColor": "#ffffff",
											"buttonColor": "#000000",
											"textButtonColor": "#ffffff",
											"status": "active",
											"translate": {
												"ru": {
													"title": "Test",
													"subTitle": "Test",
													"textButton": "Test",
													"link": "https://example.com/"
												}
											},
											"goToCompilation": true,
											"compilationId": 1,
											"goToStore": false,
											"offerId": "",
											"offerTypeId": "",
											"buttonIsDoodle": false
										}
									},
									{
										"type": "doodles",
										"id": 5,
										"attributes": {
											"name": "Test",
											"dateTo": "2025-01-01 00:00:00",
											"dateFrom": "2015-01-01 00:00:00",
											"offerLogo": "https://example.com/",
											"background": "https://example.com/",
											"image": "https://example.com/",
											"priority": 4,
											"textColor": "#ffffff",
											"buttonColor": "",
											"textButtonColor": "",
											"status": "active",
											"translate": {
												"ru": {
													"title": "Test",
													"subTitle": "Test",
													"textButton": "",
													"link": "https://example.com/"
												}
											},
											"goToCompilation": true,
											"compilationId": 1,
											"goToStore": false,
											"offerId": "",
											"offerTypeId": "",
											"buttonIsDoodle": true
										}
									}
								],
								"result": true
							}
						}
					}
				}
			}
		},
		"/export/user/coupons/list": {
			"get": {
				"tags": [
					"export/user"
				],
				"summary": "Export a list of coupons",
				"description": "Unloading a list of coupons on offices, types, coupon topics and in the specified format",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Language for unloading coupons",
						"required": true,
						"type": "string"
					},
					{
						"name": "fileFormat",
						"in": "query",
						"description": "File File Return Data",
						"required": true,
						"type": "string",
						"enum": [
							"xls",
							"xlsx",
							"csv",
							"xml"
						],
						"example": "xls"
					},
					{
						"name": "isPersonal",
						"in": "query",
						"description": "True will be selected only personal coupons, false will be chosen and general, and personal",
						"required": true,
						"type": "boolean",
						"default": "false"
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "Identifier, if not specified, then unload for all offering",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "themeId",
						"in": "query",
						"description": "The identifier of the coupon themes, if not specified, then unload for all themes",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "typeId",
						"in": "query",
						"description": "Coupon type identifier, if not specified, then unload for all types",
						"required": false,
						"type": "integer",
						"example": 1
					}
				],
				"responses": {
					"200": {
						"description": "Unloading coupons"
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "List of errors"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/export/user/offers/list": {
			"get": {
				"tags": [
					"export/user"
				],
				"summary": "Exports of the list of offering",
				"description": "Unloading the list of offshoes with sorting, search by title and filtering in labels and categories",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "fileFormat",
						"in": "query",
						"description": "File File Return Data",
						"required": true,
						"type": "string",
						"enum": [
							"xls",
							"xlsx",
							"csv"
						],
						"example": "xls"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Local Language",
						"required": true,
						"type": "string",
						"example": "ru"
					},
					{
						"name": "hasFeed",
						"in": "query",
						"description": "Flag for obtaining only offers with fids",
						"required": false,
						"type": "string",
						"example": "true"
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Filter via Idefer. ID of offering through commas.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "labelIds",
						"in": "query",
						"description": "Label IDs for which you need a list of offering",
						"required": false,
						"type": "string",
						"example": "1,35"
					},
					{
						"name": "search",
						"in": "query",
						"description": "search line",
						"required": false,
						"type": "string",
						"example": "ali"
					},
					{
						"name": "categoryIds",
						"in": "query",
						"description": "Category IDs for which you need a list of offering",
						"required": false,
						"type": "string",
						"example": "1,2,56"
					},
					{
						"name": "order",
						"in": "query",
						"description": "Sort by novelty, alphabet, max. Cashback, priority. Valid values: New, Alpha, Max-Rate, Priority",
						"required": false,
						"type": "string",
						"example": "new"
					},
					{
						"name": "sortType",
						"in": "query",
						"description": "Sort direction: ASC, DESC",
						"required": false,
						"type": "string",
						"example": "asc"
					},
					{
						"name": "typeId",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					},
					{
						"name": "increasedCashback",
						"in": "query",
						"description": "Return Offer with Elevated Keshbek",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "created",
						"in": "query",
						"description": "Filter by the appearance of an offper in the system (json object interval object)",
						"required": false,
						"type": "string",
						"example": "{'gte':'2019-05-05','lte':2019-10-10'}"
					},
					{
						"name": "priorityByGeo",
						"in": "query",
						"description": "Taking into account the priorities of displaying offer, depending on user geolocation.",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "cityId",
						"in": "query",
						"description": "When priorityBygeo = 1. Used for an unauthorized user, information on which is nowhere to be stored anywhere",
						"required": false,
						"type": "integer",
						"example": 551487
					},
					{
						"name": "trafficSources",
						"in": "query",
						"description": "Search Offers by traffic sources ID",
						"required": false,
						"type": "string",
						"example": "1,2,4"
					},
					{
						"name": "isExclusive",
						"in": "query",
						"description": "Exclusive offper filter.",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": true
					},
					{
						"name": "hasBonusProgram",
						"in": "query",
						"description": "Filter on offenders with bonus programs.",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": true
					},
					{
						"name": "hasCompensation",
						"in": "query",
						"description": "Copinsias filter.",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": true
					},
					{
						"name": "statuses",
						"in": "query",
						"description": "Filter according to status.",
						"required": false,
						"type": "string",
						"example": "stopped,disabled"
					},
					{
						"name": "mustHaveApprovedPlacement",
						"in": "query",
						"description": "Execis filter for which a confirmed site is required",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": "true"
					}
				],
				"responses": {
					"200": {
						"description": "List of offering"
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect language or offerid",
						"schema": {
							"$ref": "#/definitions/422_Lang_is_required"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "fileFormat is required."
									},
									{
										"error": 422001,
										"error_description": "fileFormat must be a string."
									},
									{
										"error": 422001,
										"error_description": "incorrect fileFormat"
									},
									{
										"error": 422001,
										"error_description": "lang not correct"
									},
									{
										"error": 422001,
										"error_description": "lang is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/export/user/transactions/list": {
			"get": {
				"tags": [
					"export/user"
				],
				"summary": "Export transaction list",
				"description": "Uploading the list of user transactions on offices with filters (limit in 1000 lines)",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "fileFormat",
						"in": "query",
						"description": "File File Return Data",
						"required": true,
						"type": "string",
						"enum": [
							"xls",
							"xlsx",
							"csv"
						],
						"example": "xls"
					},
					{
						"name": "tsFrom",
						"in": "query",
						"description": "The beginning of the period when an order was made (not earlier than the year from the current date)",
						"required": true,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "tsTo",
						"in": "query",
						"description": "The end of the period when an order was made (not earlier than the year from the current date)",
						"required": true,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "ID Ofherov.",
						"required": false,
						"type": "string",
						"example": "1,35"
					},
					{
						"name": "confirmTsFrom",
						"in": "query",
						"description": "The beginning of the period when the order was confirmed or rejected (not earlier than the year from the current date)",
						"required": false,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "confirmTsTo",
						"in": "query",
						"description": "The end of the period when the order was confirmed or rejected (not earlier than the year from the current date)",
						"required": false,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "orderNumber",
						"in": "query",
						"description": "Order number",
						"required": false,
						"type": "string",
						"example": 90975990756016
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Currency",
						"required": false,
						"type": "string",
						"enum": [
							"USD",
							"RUB",
							"EUR",
							"GBP"
						],
						"example": "USD"
					},
					{
						"name": "clickId",
						"in": "query",
						"description": "Identifier click",
						"required": false,
						"type": "string",
						"example": "39c8e9953fe8ea40ff1c59876e0e2f28"
					},
					{
						"name": "sub",
						"in": "query",
						"description": "Identify Saba.",
						"required": false,
						"type": "integer",
						"example": 12
					},
					{
						"name": "creative",
						"in": "query",
						"description": "Creative identifier",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "typeIds",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					}
				],
				"responses": {
					"200": {
						"description": "Unloading transactions"
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"schema": {
							"$ref": "#/definitions/422_Errors_Transactions"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "fileFormat is required."
									},
									{
										"error": 422001,
										"error_description": "fileFormat must be a string."
									},
									{
										"error": 422001,
										"error_description": "incorrect fileFormat"
									},
									{
										"error": 422001,
										"error_description": "tsFrom is required."
									},
									{
										"error": 422001,
										"error_description": "tsTo is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/faq/answers/cashback/category/{category_id}": {
			"get": {
				"tags": [
					"faq"
				],
				"summary": "Getting Questions Replies for Category",
				"description": "Getting Question Responses by Category ID for UserRole = CashBack",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "category_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Categories with answers",
						"schema": {
							"$ref": "#/definitions/Faq_answers_with_categories"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "faq-answers",
									"id": 3,
									"attributes": [
										{
											"id": 3,
											"title": "Tools",
											"icon": "https://cdn.epn.bz/icon-for-category-Tools.jpg",
											"slug": "tools",
											"data": [
												{
													"answer": "To get an affiliate link, just go to...",
													"question": "How do I get an affiliate link?",
													"lang": "en",
													"question_answer_id": 1
												}
											]
										}
									],
									"result": true,
									"request": []
								}
							}
						}
					}
				}
			}
		},
		"/faq/answers/cashback": {
			"get": {
				"tags": [
					"faq"
				],
				"summary": "Getting Questions Replies for UserRole = Cashback",
				"description": "List of categories and for each category WORD-answer",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Categories with answers inside, sorted by parameter 'category_priority'",
						"schema": {
							"$ref": "#/definitions/Faq_answers_get_all"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "faq-answers",
									"id": "",
									"attributes": [
										{
											"category_id": 3,
											"category_title": "Tools",
											"category_priority": 1,
											"category_icon": "https://cdn.epn.bz/icon-for-category-Tools.jpg",
											"category_slug": "tools",
											"data": [
												{
													"answer": "To get an affiliate link, just go to...",
													"question": "How do I get an affiliate link?",
													"lang": "en",
													"question_answer_id": 1
												}
											]
										}
									],
									"result": true,
									"request": []
								}
							}
						}
					}
				}
			}
		},
		"/faq/answers/cashback/search": {
			"get": {
				"tags": [
					"faq"
				],
				"summary": "Lock search among the response questions for UserRole = CashBack",
				"description": "Lock search among the list of questions, returns the first 10 default results",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "search",
						"in": "query",
						"description": "Row of request",
						"required": true,
						"type": "string",
						"example": "выплаты али"
					},
					{
						"name": "page",
						"in": "query",
						"description": "search results page, on each page of 10 results",
						"required": false,
						"type": "integer",
						"example": 2
					}
				],
				"responses": {
					"200": {
						"description": "Categories with answers inside, sorted by the 'Priority' parameter",
						"schema": {
							"$ref": "#/definitions/Faq_answers_search"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "faq-answers",
									"id": "",
									"attributes": {
										"data": [
											{
												"category_id": 3,
												"category_title": "Tools",
												"category_slug": "tools",
												"category_icon": "https://cdn.epn.bz/icon-for-category-Tools.jpg",
												"lang": "en",
												"answer": "To get an affiliate link, just go to...",
												"question": "How do I get an affiliate link?",
												"question_answer_id": 1
											}
										],
										"hasNext": false
									},
									"result": true,
									"request": []
								}
							}
						}
					}
				}
			}
		},
		"/faq/answers/user/category/{category_id}": {
			"get": {
				"tags": [
					"faq"
				],
				"summary": "Getting Questions Replies for Category",
				"description": "Getting Question Responses by Category ID for UserRole = User",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "category_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Categories with answers inside, sorted by the 'Priority' parameter",
						"schema": {
							"$ref": "#/definitions/Faq_answers_with_categories"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "faq-answers",
									"id": 3,
									"attributes": [
										{
											"id": 3,
											"title": "Tools",
											"icon": "https://cdn.epn.bz/icon-for-category-Tools.jpg",
											"slug": "tools",
											"data": [
												{
													"answer": "To get an affiliate link, just go to...",
													"question": "How do I get an affiliate link?",
													"lang": "en",
													"question_answer_id": 1
												}
											]
										}
									],
									"result": true,
									"request": []
								}
							}
						}
					}
				}
			}
		},
		"/faq/answers/user": {
			"get": {
				"tags": [
					"faq"
				],
				"summary": "Getting Questions Replies for UserRole = User",
				"description": "List of categories and for each category WORD-answer",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Categories with answers inside, sorted by parameter 'category_priority'",
						"schema": {
							"$ref": "#/definitions/Faq_answers_get_all"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "faq-answers",
									"id": "",
									"attributes": [
										{
											"category_id": 3,
											"category_title": "Tools",
											"category_priority": 1,
											"category_icon": "https://cdn.epn.bz/icon-for-category-Tools.jpg",
											"category_slug": "tools",
											"data": [
												{
													"answer": "To get an affiliate link, just go to...",
													"question": "How do I get an affiliate link?",
													"lang": "en",
													"question_answer_id": 1
												}
											]
										}
									],
									"result": true,
									"request": []
								}
							}
						}
					}
				}
			}
		},
		"/faq/answers/user/search": {
			"get": {
				"tags": [
					"faq"
				],
				"summary": "Lock search among question-replies for userrole = user",
				"description": "Lock search among the list of questions",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "search",
						"in": "query",
						"description": "Row of request",
						"required": true,
						"type": "string",
						"example": "выплаты али"
					},
					{
						"name": "page",
						"in": "query",
						"description": "search results page, on each page of 10 results",
						"required": false,
						"type": "integer",
						"example": 2
					}
				],
				"responses": {
					"200": {
						"description": "Categories with answers",
						"schema": {
							"$ref": "#/definitions/Faq_answers_search"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "faq-answers",
									"id": "",
									"attributes": {
										"data": [
											{
												"category_id": 3,
												"category_title": "Tools",
												"category_icon": "https://cdn.epn.bz/icon-for-category-Tools.jpg",
												"category_slug": "tools",
												"lang": "en",
												"answer": "To get an affiliate link, just go to...",
												"question": "How do I get an affiliate link?",
												"question_answer_id": 1
											}
										],
										"hasNext": false
									},
									"result": true,
									"request": []
								}
							}
						}
					}
				}
			}
		},
		"/goods/feeds": {
			"get": {
				"tags": [
					"feed"
				],
				"summary": "Obtaining fids user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Maximum number of records received during one request",
						"required": true,
						"type": "integer"
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Number of records that need to be skipped before starting the sample",
						"required": false,
						"type": "integer",
						"default": 0
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting. Valid values: Created_at. The default sorting order is ascending. Sign '-' in front of the field - the reverse order of sorting (descending)",
						"required": false,
						"type": "string",
						"example": "-created_at"
					}
				],
				"responses": {
					"200": {
						"description": "FID",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "feed",
										"id": 1,
										"attributes": [
											{
												"userId": 3414897,
												"material": "goods",
												"name": "my test feed",
												"placementId": 1,
												"offerId": 1,
												"offerDumpId": 1,
												"categories": 1,
												"currency": "RUB",
												"format": "yml",
												"sub": "subid",
												"metaGoodsCount": 0,
												"domain": "l.com",
												"hash": "tipahash",
												"createdAt": "2019-07-25 17:23:21",
												"updatedAt": "null",
												"deletedAt": "null",
												"downloadLink": "https://link.com"
											}
										]
									}
								],
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"put": {
				"tags": [
					"feed"
				],
				"summary": "Fida update",
				"description": "Creating a new FIDA",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"currency",
								"format",
								"id",
								"deepLink",
								"sub",
								"domain"
							],
							"properties": {
								"currency": {
									"description": "currency",
									"type": "string",
									"enum": [
										"RUB",
										"EUR",
										"BYR",
										"KZT",
										"CNY",
										"UAH",
										"USD"
									],
									"example": "RUB"
								},
								"format": {
									"description": "Unloading format",
									"type": "string",
									"enum": [
										"yml"
									]
								},
								"id": {
									"description": "id confige fida",
									"type": "integer"
								},
								"deepLink": {
									"description": "Hash Dipine",
									"type": "string"
								},
								"sub": {
									"description": "SUB (string) which will be add to all partner links",
									"type": "string"
								},
								"domain": {
									"description": "Domain through which affiliates will be generated",
									"type": "string"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Fid preserved",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "feed",
										"id": ""
									}
								],
								"result": true
							}
						}
					},
					"400": {
						"description": "Update error, occurs when there is no FIDA or an attempt of a user to update not your feed",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400200,
										"error_description": "feed_updating_error"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"feed"
				],
				"summary": "Create Fida",
				"description": "Creating a new FIDA",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"feedName",
								"placementId",
								"offerId",
								"offerDumpId",
								"currency",
								"format",
								"deepLinkHash"
							],
							"properties": {
								"feedName": {
									"description": "Fida name",
									"type": "string",
									"example": "New Feed"
								},
								"sub": {
									"description": "SUB (string) which will be add to all partner links",
									"type": "string"
								},
								"domain": {
									"description": "Domain through which affiliates will be generated",
									"type": "string"
								},
								"placementId": {
									"description": "ID ID",
									"type": "integer"
								},
								"offerId": {
									"description": "ID Offer",
									"type": "integer"
								},
								"offerDumpId": {
									"description": "ID Dumpa Offer",
									"type": "integer"
								},
								"categories": {
									"description": "List of selected categories",
									"type": "array",
									"example": "[1,2,4,5,6,7]"
								},
								"currency": {
									"description": "currency",
									"type": "string",
									"enum": [
										"RUB",
										"EUR",
										"BYR",
										"KZT",
										"CNY",
										"UAH",
										"USD"
									],
									"example": "RUB"
								},
								"format": {
									"description": "Unloading format",
									"type": "string",
									"enum": [
										"yml"
									]
								},
								"deepLinkHash": {
									"description": "Hash Dipine",
									"type": "string"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Fid preserved",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "feed",
										"id": 55,
										"attributes": {
											"userId": 1,
											"material": "goods",
											"name": "name",
											"placementId": 1,
											"offerId": 1,
											"offerDumpId": 1,
											"categories": "[1,2,3]",
											"currency": "USD",
											"format": "yml",
											"sub": "this is sub",
											"metaGoodsCount": 0,
											"domain": "domain.com",
											"hash": "deepLinkHash"
										}
									}
								],
								"result": "true"
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/goods/feeds/{id}": {
			"get": {
				"tags": [
					"feed"
				],
				"summary": "The result obtained by ID",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "FID",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "feed",
										"id": 1,
										"attributes": {
											"userId": 3414897,
											"material": "goods",
											"name": "my test feed",
											"placementId": 1,
											"offerId": 1,
											"offerDumpId": 1,
											"categories": 1,
											"currency": "RUB",
											"formatId": 1,
											"sub": "subid",
											"metaGoodsCount": 0,
											"domain": "l.com",
											"hash": "tipahash",
											"createdAt": "2019-07-25 17:23:21",
											"updatedAt": "null",
											"deletedAt": "null",
											"downloadLink": "https://link.com"
										}
									}
								],
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"feed"
				],
				"summary": "Removing FIDI on ID",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "FID",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "feed",
										"id": ""
									}
								],
								"result": true
							}
						}
					},
					"400": {
						"description": "Removal error occurs in the absence of FIDA or user attempt to remove not your feed",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400200,
										"error_description": "feed_deleting_error"
									}
								],
								"result": "false"
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/goods/dumps/{dumpId}/categories": {
			"get": {
				"tags": [
					"feed"
				],
				"summary": "Getting a list of categories of dump file",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "categoriesIds",
						"in": "query",
						"description": "Category identifiers over commas. If the identifier consists of several values, you must specify the entire set.",
						"required": false,
						"type": "string",
						"example": "1,570"
					},
					{
						"name": "dumpId",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Categories",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "dump-category",
										"id": 1,
										"attributes": {
											"name": "Certificates",
											"parentId": 570,
											"goodsCount": 7
										}
									},
									{
										"type": "dump-category",
										"id": "6715,6718,7286,7494,7303,6717,6716",
										"attributes": {
											"name": "Computers",
											"parentId": 990,
											"categories": 6,
											"goodsCount": 0
										}
									},
									{
										"type": "dump-category",
										"id": "1Ras445Ws009af",
										"attributes": {
											"name": "Phones",
											"parentId": 990,
											"categories": 6,
											"goodsCount": 0
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/geo/countries/{country_code}/cities": {
			"get": {
				"tags": [
					"geo"
				],
				"summary": "Get cities",
				"description": "Get a list of cities around the country",
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"description": "content type string: application/json or application/x-www-form-urlencoded",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "search",
						"in": "query",
						"description": "Name of the city to search. Minimum 3 characters.",
						"required": false,
						"type": "string"
					},
					{
						"name": "country_code",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "geo-city",
										"id": 1122,
										"attributes": {
											"name": "Kazan"
										}
									},
									{
										"type": "geo-city",
										"id": 1123,
										"attributes": {
											"name": "Zelenodolsk"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/geo/countries/{country_code}/regions/{region_code}/cities": {
			"get": {
				"tags": [
					"geo"
				],
				"summary": "Get cities",
				"description": "Get a list of cities around the country",
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"description": "content type string: application/json or application/x-www-form-urlencoded",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "search",
						"in": "query",
						"description": "Name of the city to search. Minimum 3 characters.",
						"required": false,
						"type": "string"
					},
					{
						"name": "country_code",
						"in": "query",
						"required": true,
						"type": "string"
					},
					{
						"name": "region_code",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "geo-city",
										"id": 1122,
										"attributes": {
											"name": "Kazan"
										}
									},
									{
										"type": "geo-city",
										"id": 1123,
										"attributes": {
											"name": "Zelenodolsk"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/geo/countries": {
			"get": {
				"tags": [
					"geo"
				],
				"summary": "Get countries",
				"description": "Get a list of countries",
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"description": "content type string: application/json or application/x-www-form-urlencoded",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "geo-country",
										"id": "",
										"attributes": {
											"country_code": "RU",
											"name": "Russia"
										}
									},
									{
										"type": "geo-country",
										"id": "",
										"attributes": {
											"country_code": "CN",
											"name": "China"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/geo/countries/{country_code}/regions": {
			"get": {
				"tags": [
					"geo"
				],
				"summary": "Get regions",
				"description": "Get a list of regions of the first level in the country",
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"description": "content type string: application/json or application/x-www-form-urlencoded",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "search",
						"in": "query",
						"description": "Region name for search. Minimum 3 characters.",
						"required": false,
						"type": "string"
					},
					{
						"name": "country_code",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "geo-region",
										"id": "",
										"attributes": {
											"code": "ttst",
											"name": "Tatarstan republic"
										}
									},
									{
										"type": "geo-region",
										"id": "",
										"attributes": {
											"code": 73,
											"name": "Kirovskaya oblast"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/geo/identity": {
			"get": {
				"tags": [
					"geo"
				],
				"summary": "Get identity",
				"description": "Get geo user location",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "geo-identity",
									"id": "",
									"attributes": {
										"cityId": 12554,
										"cityName": "Kazan",
										"regionCode": 66,
										"regionName": "St Petersburg",
										"countryCode": "RU",
										"countryName": "Russia"
									}
								},
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/goods/offers/{offerId}/dumps": {
			"get": {
				"tags": [
					"goods"
				],
				"summary": "List of available offper goods dumps.",
				"description": "List of available offper goods dumps.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "offerId",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of available offper goods dumps.",
						"examples": {
							"application/json": {
								"data": {
									"type": "offer-dump",
									"id": 1,
									"attributes": {
										"name": "товары",
										"lang": "en",
										"logs": {
											"dumpOffersCount": 13,
											"addedAt": "2019-07-04 07:26:13"
										}
									}
								},
								"result": true,
								"request": {
									"offerId": 1
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect offer ID.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId must be a number."
									},
									{
										"error": 422001,
										"error_description": "offerId must be a minimum of 1."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/goods/dumps/{dumpId}": {
			"get": {
				"tags": [
					"goods"
				],
				"summary": "Obtaining information on the dump of goods.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "dumpId",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "An example of a response",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "dumps",
										"id": 1,
										"attributes": {
											"name": "ru small"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/goods/hot-sells": {
			"get": {
				"tags": [
					"goods"
				],
				"summary": "Get a list of united (votor and hot) products in a single format",
				"description": "List of products with elevated cachekkom and voting winners",
				"parameters": [
					{
						"name": "search",
						"in": "query",
						"description": "Row of search for goods by name",
						"required": false,
						"type": "string",
						"example": "brand"
					},
					{
						"name": "order",
						"in": "query",
						"description": "Sort parameter",
						"required": false,
						"type": "string",
						"default": "newDate",
						"enum": [
							"percent",
							"newDate",
							"orders"
						],
						"example": "percent"
					},
					{
						"name": "sortType",
						"in": "query",
						"description": "Sorting direction",
						"required": false,
						"type": "string",
						"default": "desc",
						"enum": [
							"asc",
							"desc"
						],
						"example": "asc"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number for display",
						"required": false,
						"type": "integer",
						"default": 1,
						"example": 2
					},
					{
						"name": "perPage",
						"in": "query",
						"description": "Number of products for display on page",
						"required": false,
						"type": "integer",
						"default": 20,
						"example": 40
					},
					{
						"name": "filterFrom",
						"in": "query",
						"description": "The initial parameter of filtering goods in the size of the cachek in percent.",
						"required": false,
						"type": "integer",
						"default": 0,
						"example": 30
					},
					{
						"name": "filterTo",
						"in": "query",
						"description": "The final parameter of the filtering of goods in the size of the cachek in percent",
						"required": false,
						"type": "integer",
						"default": 100,
						"example": 80
					},
					{
						"name": "filterGoods",
						"in": "query",
						"description": "Filtration parameter of goods according to one of the types: only goods with elevated - 1 Only goods-winners voting - 2",
						"required": false,
						"type": "integer",
						"enum": [
							1,
							2
						],
						"example": 1
					},
					{
						"name": "filterOffers",
						"in": "query",
						"description": "Filtration parameter of goods for one or several stores",
						"required": false,
						"type": "string",
						"example": "1,2"
					},
					{
						"name": "filterProduct",
						"in": "query",
						"description": "Filtration Parameter for Product_ID",
						"required": false,
						"type": "string",
						"example": 32914689306
					}
				],
				"responses": {
					"200": {
						"description": "List of products with elevated cachekkom and / or voting winners",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"id": {
											"description": "ID records",
											"type": "integer"
										},
										"title": {
											"description": "Name of product",
											"type": "string"
										},
										"title_ru": {
											"description": "Russian name of goods",
											"type": "string"
										},
										"cashback_percent": {
											"description": "Cacheback percentage for goods",
											"type": "integer"
										},
										"direct_url": {
											"description": "Link to the product",
											"type": "string"
										},
										"image": {
											"description": "Link to the product",
											"type": "string"
										},
										"offer_id": {
											"description": "ID of the Офfold",
											"type": "integer"
										},
										"product_id": {
											"description": "Castitoducer",
											"type": "string"
										},
										"price": {
											"description": "The price of the product",
											"type": "float"
										},
										"sale_price": {
											"description": "Price of goods at a discount",
											"type": "float"
										},
										"valid_time": {
											"description": "Life lifetime",
											"type": "integer"
										},
										"orders_count": {
											"description": "Number of orders for goods",
											"type": "integer"
										},
										"exception_type": {
											"description": "Product Type: 1 - Product with elevated Keshbek, 2 - Voting Winner",
											"type": "integer"
										},
										"currency": {
											"description": "Currency",
											"type": "string"
										},
										"added_at": {
											"description": "Date of the proposal",
											"type": "integer"
										},
										"product_score": {
											"description": "Rating goods",
											"type": "integer"
										},
										"cashback": {
											"description": "The size of the returned Kesbek",
											"type": "float"
										}
									},
									"type": "object"
								},
								"meta": {
									"description": "Metaverage",
									"properties": {
										"totalFound": {
											"description": "Number of products found",
											"type": "integer"
										},
										"hasNext": {
											"description": "Flag of availability next page with results",
											"type": "boolean"
										}
									},
									"type": "object"
								},
								"result": {
									"description": "Request result",
									"type": "boolean",
									"default": true
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"id": 16445801,
										"title": "TINYAT Men Casual Chest Bag Brand Leisure Shoulder Bag for Male Leather Crossbody Bag for Ipad Canvas Messenger Bag Black T650",
										"title_ru": "",
										"cashback_percent": 6,
										"direct_url": "https://www.aliexpress.com/item/-/32827157785.html",
										"image": "https://ae01.alicdn.com/kf/HTB1l3bqbsTMeJjSszhq6AGCFXav/TINYAT-Man-s-Leather-Crossbody-Bag-for-Ipad-Male-Men-Chest-Bag-Casual-Messenger-Bag-Brand.jpg_220x220.jpg",
										"offer_id": 1,
										"product_id": 32915356752,
										"price": 33.98,
										"sale_price": 16.99,
										"valid_time": 382446,
										"orders_count": 0,
										"exception_type": 1,
										"added_at": 1510661838,
										"product_score": 2.05,
										"cashback": 0.15,
										"currency": "USD"
									},
									{
										"id": 6844801,
										"title": "Luxury Brand WWOOR Watch Men Famous Business Men Watches Casual Quartz Watch Stainless Steel Wristwatches Waterproof Male Clock",
										"title_ru": "",
										"cashback_percent": 6,
										"direct_url": "https://www.aliexpress.com/item/-/32792269590.html",
										"image": "https://ae01.alicdn.com/kf/HTB1VheXPFXXXXcYXpXXq6xXFXXXS/Men-Watches-Brand-WWOOR-Men-s-Watch-Famous-Casual-Quartz-Watches-Stainless-Steel-Wristwatches-Waterproof-Male.jpg_220x220.jpg",
										"offer_id": 1,
										"product_id": 32915356752,
										"price": 35.279999,
										"sale_price": 17.99,
										"valid_time": 382446,
										"orders_count": 0,
										"exception_type": 1,
										"added_at": 1510216306,
										"product_score": 2.21,
										"cashback": 0.85,
										"currency": "USD"
									}
								],
								"meta": {
									"totalFound": 82,
									"hasNext": "false"
								},
								"result": true
							}
						}
					}
				}
			}
		},
		"/goods/hot/categories": {
			"get": {
				"tags": [
					"goods"
				],
				"summary": "Categories of goods with high cachekkom",
				"description": "Categories in which there are products with elevated cachekkom",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"example": "ru"
					}
				],
				"responses": {
					"200": {
						"description": "Categories of goods with high cachekkom",
						"schema": {
							"$ref": "#/definitions/CategoryTree"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "categoryTree",
									"id": "",
									"attributes": {
										"name": "Все категории",
										"level": 0,
										"tree": {
											"1": {
												"id": 1,
												"name": "Авто",
												"translations": "Auto",
												"level": 1
											},
											"2": {
												"id": 2,
												"name": "Бытовая техника",
												"translations": "Appliances",
												"level": 1
											},
											"3": {
												"id": 3,
												"name": "Все для офиса",
												"translations": "Everything for the office",
												"level": 1
											}
										}
									}
								},
								"result": true
							}
						}
					}
				}
			}
		},
		"/goods/hot": {
			"get": {
				"tags": [
					"goods"
				],
				"summary": "High Cachebank Products",
				"description": "High Cachebank Products",
				"parameters": [
					{
						"name": "filter",
						"in": "query",
						"description": "Filter. Valid values: CashBack, Categories, Offers, Name, Price, Rate",
						"required": false,
						"type": "string",
						"example": {
							"cashback": {
								"gte": 0,
								"lte": 88
							},
							"categories": [
								13,
								18
							],
							"goodsCategories": [
								1
							],
							"offers": [
								1
							],
							"name": "ali",
							"price": {
								"gte": 0,
								"lte": 50.5
							},
							"products": [
								12
							],
							"rate": {
								"gte": 3,
								"lte": 5
							}
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records on the page",
						"required": false,
						"type": "integer",
						"default": 15,
						"example": 1
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Bias",
						"required": false,
						"type": "integer",
						"default": 0,
						"example": 1
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting. Valid values: CashBack, Date, Orders, Price, Rate. \n  * The default sorting order is ascending. Sign '-' in front of the field - the reverse order of sorting (descending)",
						"required": false,
						"type": "string",
						"example": "cashback,-date"
					}
				],
				"responses": {
					"200": {
						"description": "List of products with high cachekkom",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"description": "Type of resource",
											"type": "string",
											"default": "goods"
										},
										"id": {
											"description": "Castitoducer",
											"type": "integer"
										},
										"attributes": {
											"properties": {
												"addedAt": {
													"description": "Date of adding goods (TimeStamp)",
													"type": "integer"
												},
												"cashbackPercent": {
													"description": "Percentage Cacheback",
													"type": "float"
												},
												"cashback": {
													"description": "Cacheback size for goods",
													"type": "float"
												},
												"categoryId": {
													"description": "High Cacheback Category ID",
													"type": "integer"
												},
												"currency": {
													"description": "Currency goods",
													"type": "string"
												},
												"directUrl": {
													"description": "Url of goods in the store",
													"type": "string"
												},
												"goodsCategoryId": {
													"description": "ID category goods",
													"type": "integer"
												},
												"image": {
													"description": "Link to product image",
													"type": "string"
												},
												"offerId": {
													"description": "ID of the Офfold",
													"type": "integer"
												},
												"ordersCount": {
													"description": "Number of orders for goods",
													"type": "integer"
												},
												"price": {
													"description": "The price of the product",
													"type": "float"
												},
												"productId": {
													"description": "Product design",
													"type": "string"
												},
												"productScore": {
													"description": "Rating goods",
													"type": "float"
												},
												"salePrice": {
													"description": "Selling selling goods",
													"type": "float"
												},
												"titleRu": {
													"description": "Title of goods in Russian",
													"type": "string"
												},
												"title": {
													"description": "Product Name",
													"type": "string"
												},
												"validTime": {
													"description": "Date of completion of the goods offer (TimeStamp)",
													"type": "integer"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"meta": {
									"description": "Metaverage",
									"properties": {
										"totalFound": {
											"description": "Number of products found",
											"type": "integer"
										}
									},
									"type": "object"
								},
								"result": {
									"description": "Request result",
									"type": "boolean",
									"default": true
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "goods",
										"id": 16445801,
										"attributes": {
											"addedAt": 1510661838,
											"cashbackPercent": 6,
											"cashback": 0.15,
											"categoryId": 18,
											"currency": "USD",
											"directUrl": "https://www.aliexpress.com/item/-/32827157785.html",
											"goodsCategoryId": 15,
											"image": "https://ae01.alicdn.com/kf/HTB1l3bqbsTMeJjSszhq6AGCFXav/TINYAT-Man-s-Leather-Crossbody-Bag-for-Ipad-Male-Men-Chest-Bag-Casual-Messenger-Bag-Brand.jpg_220x220.jpg",
											"offerId": 1,
											"ordersCount": 0,
											"price": 33.98,
											"productId": 32830716024,
											"productScore": 2.05,
											"salePrice": 16.99,
											"titleRu": "",
											"title": "TINYAT Men Casual Chest Bag Brand Leisure Shoulder Bag for Male Leather Crossbody Bag for Ipad Canvas Messenger Bag Black T650",
											"validTime": 382446
										}
									},
									{
										"type": "goods",
										"id": 6844801,
										"attributes": {
											"addedAt": 1510216306,
											"cashbackPercent": 6,
											"cashback": 0.85,
											"categoryId": 54,
											"currency": "USD",
											"directUrl": "https://www.aliexpress.com/item/-/32792269590.html",
											"goodsCategoryId": 15,
											"image": "https://ae01.alicdn.com/kf/HTB1VheXPFXXXXcYXpXXq6xXFXXXS/Men-Watches-Brand-WWOOR-Men-s-Watch-Famous-Casual-Quartz-Watches-Stainless-Steel-Wristwatches-Waterproof-Male.jpg_220x220.jpg",
											"offerId": 1,
											"ordersCount": 0,
											"price": 35.279999,
											"productId": 32830716023,
											"productScore": 2.21,
											"salePrice": 17.99,
											"titleRu": "",
											"title": "Luxury Brand WWOOR Watch Men Famous Business Men Watches Casual Quartz Watch Stainless Steel Wristwatches Waterproof Male Clock",
											"validTime": 382446
										}
									}
								],
								"meta": {
									"totalFound": 2
								},
								"result": true
							}
						}
					}
				}
			}
		},
		"/batch": {
			"post": {
				"tags": [
					"batch"
				],
				"summary": "Batch request",
				"description": "The ability to send a few requests to the API in one http",
				"parameters": [
					{
						"name": "data",
						"in": "body",
						"description": "",
						"schema": {
							"required": [
								"data"
							],
							"properties": {
								"data": {
									"description": "Array of batch subqueries",
									"type": "array",
									"items": {
										"properties": {
											"type": {
												"type": "string",
												"enum": [
													"request"
												]
											},
											"id": {
												"description": "Each subquery must have a unique id",
												"type": "integer"
											},
											"attributes": {
												"properties": {
													"url": {
														"description": "For Get Request Parameters are transmitted to URL",
														"type": "string",
														"example": "/offers/links?urlTo=https%3A%2F%2Fepn.bz%2Fcashback&ids=95"
													},
													"method": {
														"type": "string",
														"enum": [
															"GET",
															"POST",
															"PUT",
															"DELETE",
															"OPTIONS"
														],
														"example": "GET"
													},
													"body": {
														"description": "The necessary parameters are transmitted here (for GET request an empty array)",
														"type": "object"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The answer contains all processed subqueries",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "response",
										"id": 1,
										"attributes": {
											"status": 200,
											"body": {
												"data": {
													"type": "offersLinks",
													"id": 95,
													"attributes": {
														"cashbackDefault": "https://epnclick.ru/redirect/c",
														"cashbackPackage": []
													}
												},
												"result": true,
												"request": {
													"urlTo": "https://epn.bz/cashback",
													"ids": 95
												}
											}
										}
									},
									{
										"type": "response",
										"id": 3,
										"attributes": {
											"status": 403,
											"body": []
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"cdn.epn.bz/upload": {
			"post": {
				"tags": [
					"cdn"
				],
				"summary": "Download avatar to server",
				"description": "Loading user avatar to the CDN server. The address and token must be previously obtained using [Method] (# Tag / CDN / PATHS / ~ 1CDN ~ 1UPLOAD ~ 1URL / GET). The resulting URL can be used in [Avatar Conservation Method] (# Tag / UserProfile% 2FPaths% 2F ~ 1USER ~ 1PROFILE ~ 1AVATAR ~ 1UPLOAD% 2FPOST).",
				"consumes": [
					"multipart/form-data"
				],
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"required": true,
						"type": "string",
						"enum": [
							"multipart/form-data; boundary=---some_boundary"
						]
					},
					{
						"name": "Content-Length",
						"in": "header",
						"required": true,
						"type": "integer"
					},
					{
						"name": "file",
						"in": "formData",
						"description": "Avatar file in binary format",
						"required": true,
						"type": "file"
					},
					{
						"name": "token",
						"in": "formData",
						"description": "Token, obtained on the previous [step] (# Tag / CDN% 2FPaths% 2F ~ 1cdn ~ 1upload ~ 1URL% 2FGET)",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful answer",
						"examples": {
							"application/json": {
								"data": [
									[
										{
											"id": "f6bab88e96d895ee8bd9ad6a682e453d",
											"type": "file",
											"attributes": {
												"url": "https://cdn/image/f6bab88e96d895ee8bd9ad6a682e453d.png"
											}
										}
									]
								],
								"result": true
							}
						}
					}
				}
			}
		},
		"oauth2.epn.bz/ssid": {
			"get": {
				"tags": [
					"request_limit"
				],
				"summary": "Oauth ssid token",
				"description": "Getting a temporary token to access limited methods. \n\n Tocken has limited lifetime and limit generation of new tokens in time (captcha) \n\n ** Important: ** The query goes to domain `oauth2.epn.bz`",
				"parameters": [
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": true,
						"type": "string",
						"example": "web-client"
					}
				],
				"responses": {
					"200": {
						"description": "Parameter containing ssid token",
						"examples": {
							"application/json": {
								"data": {
									"type": "ssid",
									"attributes": {
										"ssid_token": "b2da20a7ccb1190d0b8e019ba637848f"
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"429": {
						"description": "Too many requests. Need [captcha](#tag/captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/token": {
			"post": {
				"tags": [
					"auth"
				],
				"summary": "Request for authorization",
				"description": "Request for login / email login and password, as well as a request for a token update \n\n To update the token, send the GRANT_TYPE = 'REFRESH_TOKEN' parameter and Refresh Token himself \n\n ** IMPORTANT ** Request for token is outdated, it will take it to use `/ token / refresh` \n\n ** Important: ** The query goes to domain `oauth2.epn.bz`",
				"parameters": [
					{
						"name": "X-API-VERSION",
						"in": "header",
						"description": "api version",
						"required": false,
						"type": "number",
						"enum": [
							2
						]
					},
					{
						"name": "X-SSID",
						"in": "header",
						"description": "SSID TKEN received from request / ssid (see Oauth SSID TOKEN)",
						"required": false,
						"type": "string",
						"example": "a9457hfbukskdlf87qtudksil"
					},
					{
						"name": "body",
						"in": "body",
						"description": "User data (Email, Password) for registration in the system and receiving access token",
						"schema": {
							"required": [
								"grant_type",
								"username",
								"password",
								"refresh_token",
								"client_id",
								"client_secret"
							],
							"properties": {
								"grant_type": {
									"type": "string",
									"enum": [
										"password",
										"refresh_token",
										"client_credential"
									],
									"example": "password"
								},
								"username": {
									"description": "Login / email user (only for GRANT_TYPE = PASSWORD)",
									"type": "string",
									"example": "test11@gmail.com"
								},
								"password": {
									"description": "User password (only for GRANT_TYPE = PASSWORD)",
									"type": "string",
									"example": "1Ypnq]0vbA"
								},
								"refresh_token": {
									"description": "The previously obtained token (only for GRANT_TYPE = REFRESH_TOKEN)",
									"type": "string",
									"example": "GciOiJIUzUxMiJ9.eyJ0b2tlbl90eXBlIj"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								},
								"client_secret": {
									"description": "The SECRET client from which the request is made (only for GRANT_TYPE = Client_Credentials)",
									"type": "string",
									"example": "wasdf7sk9ba8ehb8yaksdjhfk"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful authorization, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenAuth"
						}
					},
					"400": {
						"description": "Invalid Username or Password",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400012,
										"error_description": "Wrong 'username' or 'password'. User not found"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/token/code": {
			"post": {
				"tags": [
					"auth"
				],
				"summary": "Authorization Code Authorization Request",
				"description": "Authorization Code Authorization Request \n  ** Important: ** The query goes to domain `oauth2.epn.bz`",
				"parameters": [
					{
						"name": "X-API-VERSION",
						"in": "header",
						"description": "api version",
						"required": false,
						"type": "number",
						"enum": [
							2
						]
					},
					{
						"name": "body",
						"in": "body",
						"description": "",
						"schema": {
							"required": [
								"grant_type",
								"client_id",
								"code",
								"client_secret",
								"redirect_uri"
							],
							"properties": {
								"grant_type": {
									"type": "string",
									"enum": [
										"code"
									],
									"example": "code"
								},
								"client_id": {
									"description": "Identifier of your application",
									"type": "string",
									"example": "a9457hfbukskdlf87qtudksil"
								},
								"code": {
									"description": "Temporary code obtained after passing authorization. (Authorization Code)",
									"type": "string",
									"example": "07337bfb597dd60d3c0210595a15818255618b51"
								},
								"client_secret": {
									"description": "The protected key of your application (specified in the application settings)",
									"type": "string",
									"example": "wasdf7sk9ba8ehb8yaksdjhfk"
								},
								"redirect_uri": {
									"description": "The URL that was used when receiving Code at the first stage of authorization. Must be similar to transmitted during authorization.",
									"type": "string",
									"example": "http://epn.bz/oauth"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful authorization, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenAuth"
						}
					},
					"400": {
						"description": "Wrong data",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400011,
										"error_description": "Wrong client_id or client_secret"
									},
									{
										"error": 404002,
										"error_description": "OAuth app not found"
									},
									{
										"error": 400019,
										"error_description": "Wrong auth code"
									},
									{
										"error": 404003,
										"error_description": "Client id is not found"
									},
									{
										"error": 400018,
										"error_description": "Redirect uri is not valid"
									},
									{
										"error": 400022,
										"error_description": "auth code id expired"
									},
									{
										"error": 401001,
										"error_description": "Grant type not allowed for this client"
									},
									{
										"error": 400010,
										"error_description": "Required params"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/authorize": {
			"get": {
				"tags": [
					"auth"
				],
				"summary": "Site Authorization - Getting AUTHORIZATION Code",
				"description": "To access the EPN API from your site, there is a mechanism for server authorization based on the protocol \n         Oauth 2.0. This method allows you to implement safe user authentication to \n         Your site via EPN and access the API from the server of your application.\n** Important: ** The user is sent to the domain `oauth2.epn.bz`\nThe site authorization process consists of 4 steps:\n* Opening the browser window to authenticate the user on the EPN website. \n  * Permission by user access to its data. \n  * Transfer Code values to get the access key. \n  * Getting an Access_Token Access Key Application server to access the EPN API.\nTo get access_token according to the Code received, you need to use *** Authorization request for Authorization Code (/ Token / Code) ***\nTo get the user data for received by Access_Token, you need to use *** Get Short Data About User (/ user / Profile / Short) ***\nTo authorize the user, you must redirect its browser to the address: \n https://oauth2.epn.bz/Authorize, passing the following GET Parameters:",
				"parameters": [
					{
						"name": "v",
						"in": "query",
						"description": "The API version that you use is mandatory. Actual version: 2.",
						"required": true,
						"type": "integer",
						"example": 2
					},
					{
						"name": "client_id",
						"in": "query",
						"description": "Identifier your application.",
						"required": true,
						"type": "string",
						"example": "wasdf7sk9ba8ehb8yaksdjhfk"
					},
					{
						"name": "redirect_uri",
						"in": "query",
						"description": "The address to which the user will be redirected \n   After passing the authorization (the domain of the specified address must correspond to the main domain in \n      Application settings and listed values in the list \n     Trusted Redirect URI addresses are compared until the PATH part).",
						"required": true,
						"type": "string",
						"example": "http://epn.bz/oauth"
					},
					{
						"name": "scope",
						"in": "query",
						"description": "Application access settings that need to be checked when you authorize the user and request missing",
						"required": true,
						"type": "string",
						"example": "short_profile"
					},
					{
						"name": "response_type",
						"in": "query",
						"description": "Answer type you want to get. Specify CODE to carry out requests from a third-party server.",
						"required": true,
						"type": "string",
						"example": "code"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "The language of the dialogue on the EPN side",
						"required": false,
						"type": "string",
						"default": "en",
						"enum": [
							"ru",
							"en",
							"es"
						],
						"example": "ru"
					},
					{
						"name": "state",
						"in": "query",
						"description": "An arbitrary string that will be returned along with the result of authorization. Be sure to use this parameter to protect against Oauth CSRF",
						"required": true,
						"type": "string",
						"example": "state45646"
					}
				],
				"responses": {
					"200": {
						"description": "After successful authorization of the application, the user's browser will be redirected to Redirect_uri, \n     Specified when opening the authorization dialog. \n\n At the same time, code to get the Code access key will be transferred as the Get-parameter: redirect_uri? Code = 7A6FA4DFF77A28EEDA56603B8F53806C883F011C40B72630F011C40B72630BB50DF056F6479E52A & STATE = state6fa4d \n\n The Code parameter can be used within 1 hour to receive Access_Token from your server."
					},
					"422": {
						"description": "In the event of an error, the user browser will be redirected to the code and error description: redirect_uri? Error = invalid_request & error_description = invalid + display + parameter"
					}
				}
			}
		},
		"/authorize ": {
			"get": {
				"tags": [
					"auth"
				],
				"summary": "Implicit Flow to get a user access key",
				"description": "Use Implicit Flow to call the EPN API methods directly from the user device (for example, from JavaScript).\n\n ** Important: ** The user is sent to the domain `oauth2.epn.bz`\n\nThe site authorization process consists of 3-steps:\n\n * Opening the browser window to authenticate the user on the EPN website.\n * Permission by user access to its data.\n * Access_Token key transfer to https://oauth2.epn.bz/blank.html, access_token comes in Foat JWT and from it you can pull out the lifetime\n\nTo get the user data for received by Access_Token, you need to use *** Get Short Data About User (/ user / Profile / Short) ***\n\nTo authorize the user, you must redirect its browser to the address:\nhttps://oauth2.epn.bz/Authorize, passing the following GET Parameters:",
				"parameters": [
					{
						"name": "v",
						"in": "query",
						"description": "The API version that you use is mandatory. Actual version: 2.",
						"required": true,
						"type": "integer",
						"example": 2
					},
					{
						"name": "client_id",
						"in": "query",
						"description": "Identifier your application.",
						"required": true,
						"type": "string",
						"example": "wasdf7sk9ba8ehb8yaksdjhfk"
					},
					{
						"name": "redirect_uri",
						"in": "query",
						"description": "The address to which the user will be redirected after the passage of authorization (https://oauth2.epn.bz/blank.html).",
						"required": true,
						"type": "string",
						"example": "https://oauth2.epn.bz/blank.html"
					},
					{
						"name": "scope",
						"in": "query",
						"description": "Application access settings that need to be checked when you authorize the user and request missing",
						"required": true,
						"type": "string",
						"example": "short_profile"
					},
					{
						"name": "response_type",
						"in": "query",
						"description": "Answer type you want to get. Specify token to make requests from the user device.",
						"required": true,
						"type": "string",
						"example": "token"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "The language of the dialogue on the EPN side",
						"required": false,
						"type": "string",
						"default": "en",
						"enum": [
							"ru",
							"en",
							"es"
						],
						"example": "ru"
					},
					{
						"name": "state",
						"in": "query",
						"description": "An arbitrary string that will be returned along with the result of authorization. Be sure to use this parameter to protect against Oauth CSRF",
						"required": true,
						"type": "string",
						"example": "state45646"
					}
				],
				"responses": {
					"200": {
						"description": "After successful authorization of the application, the user's browser will be redirected to https://oauth2.epn.bz/blank.html \n\n At the same time, Access_Token will be transferred as the GET parameter: \n\n  https://oauth2.epn.bz/blank.html?access_token=3b8f53806c8.83f011c40b72630bb50df.056f6479e52a&user_id=8492&state=state6fa4d."
					},
					"422": {
						"description": "In case of error, the user browser will be redirected to the code and description of the error: https://oauth2.epn.bz/blank.html?rror=invalid_request&error_Description=InvalID+Display+Parameter"
					}
				}
			}
		},
		"/token/refresh": {
			"post": {
				"tags": [
					"auth"
				],
				"summary": "Request for update token",
				"description": "Request for update token by refresh_token \n\n  ** Important: ** The query goes to domain `oauth2.epn.bz`",
				"parameters": [
					{
						"name": "X-API-VERSION",
						"in": "header",
						"description": "api version",
						"required": false,
						"type": "number",
						"enum": [
							2
						]
					},
					{
						"name": "body",
						"in": "body",
						"description": "Refresh Token Access",
						"schema": {
							"required": [
								"grant_type",
								"refresh_token",
								"client_id"
							],
							"properties": {
								"grant_type": {
									"description": "value = refresh_token",
									"type": "string",
									"example": "refresh_token"
								},
								"refresh_token": {
									"description": "Refresh_Token received earlier",
									"type": "string",
									"example": "GciOiJIUzUxMiJ9.eyJ0b2tlbl90eXBlIj"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful tokens update, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenAuth"
						}
					},
					"400": {
						"description": "invalid refresh token",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400013,
										"error_description": "Can't regenerate refresh token. Check refresh token first."
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/brandlink/token": {
			"get": {
				"tags": [
					"brandlink"
				],
				"summary": "Getting a token to access Brandlink",
				"description": "Getting a token to access Brandlink",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "BRANDLINK access token",
						"examples": {
							"application/json": {
								"data": {
									"type": "brandlink-token",
									"id": "",
									"attributes": {
										"token": "grtrhtyjtrsegw"
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"500": {
						"description": "server error",
						"schema": {
							"property": "errors",
							"properties": {
								"result": {
									"type": "boolean",
									"default": false
								}
							},
							"type": "array",
							"items": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 500005
									},
									"error_description": {
										"type": "string",
										"default": "token not created"
									}
								}
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/labels/addToOffer": {
			"post": {
				"tags": [
					"offer/labels"
				],
				"summary": "Label's prevention Offer",
				"description": "Adding a label to a specific offer",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Offer data and label data (Offer ID, Label ID)",
						"schema": {
							"required": [
								"offerId",
								"labelId"
							],
							"properties": {
								"offerId": {
									"description": "ID Offer",
									"type": "integer",
									"example": 1
								},
								"labelId": {
									"description": "LARE ID.",
									"type": "integer",
									"example": 50
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns the result of adding",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect labelid or offerid",
						"schema": {
							"$ref": "#/definitions/422_Label_validation"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId must be a number."
									},
									{
										"error": 422001,
										"error_description": "labelId must be a number."
									},
									{
										"error": 422001,
										"error_description": "This label already has 100 offers for this user."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/{offer_id}/labels/favorite": {
			"post": {
				"tags": [
					"offer/labels"
				],
				"summary": "Additional Offer add to favorites",
				"description": "Notes Offer Label Favorites",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offer_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns the result of adding",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect offerid",
						"schema": {
							"$ref": "#/definitions/422_Label_validation"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId must be a number."
									},
									{
										"error": 422001,
										"error_description": "This label already has 100 offers for this user."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"offer/labels"
				],
				"summary": "Offer removal from favorites",
				"description": "Removal of the label Favorites from a certain offer",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offer_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns the result of removal",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect labelid or offerid",
						"schema": {
							"$ref": "#/definitions/422_Label_validation"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/labels/deleteFromOffer": {
			"delete": {
				"tags": [
					"offer/labels"
				],
				"summary": "Removing a label with offer",
				"description": "Removal of the label from a certain offper",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "ID Offer",
						"required": true,
						"type": "integer",
						"example": 1
					},
					{
						"name": "labelId",
						"in": "query",
						"description": "LARE ID.",
						"required": true,
						"type": "integer",
						"example": 50
					}
				],
				"responses": {
					"200": {
						"description": "Returns the result of removal",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect labelid or offerid",
						"schema": {
							"$ref": "#/definitions/422_Label_validation"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId must be a number."
									},
									{
										"error": 422001,
										"error_description": "labelId must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/labels/list": {
			"get": {
				"tags": [
					"offer/labels"
				],
				"summary": "List of available labels",
				"description": "List of active labels",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Local Language",
						"required": true,
						"type": "string",
						"example": "ru"
					}
				],
				"responses": {
					"200": {
						"description": "Returns List of available labels",
						"schema": {
							"$ref": "#/definitions/LabelsList"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "labels",
										"id": 1,
										"attributes": {
											"date_start": "0000-00-00 00:00:00",
											"date_end": "0000-00-00 00:00:00",
											"permission": [
												"cashback",
												"admin"
											],
											"priority": 1,
											"name": "Первый",
											"description": "First Lebl"
										}
									}
								],
								"result": true
							}
						}
					},
					"422": {
						"description": "Incorrect language",
						"schema": {
							"$ref": "#/definitions/422_Lang_is_required"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Lang not correct"
									},
									{
										"error": 422001,
										"error_description": "lang is required."
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/link-reduction/domain-cutter-list": {
			"get": {
				"tags": [
					"link-reduction"
				],
				"summary": "Get domain cutter list for link reduction",
				"description": "Receiving a list of available domains of shortcuts",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "get-domain-cutter-list",
									"id": "",
									"attributes": [
										"oli.pub",
										"alii.pub",
										"alli.pub",
										"shopnow.pub",
										"shp.pub",
										"avia.ws",
										"gbest.by",
										"mvo.bz",
										"htl.by",
										"lres.bz",
										"ozn.by",
										"bgd.by"
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/link-reduction/domain-for-cut-list": {
			"get": {
				"tags": [
					"link-reduction"
				],
				"summary": "Get domain for cut list for link reduction",
				"description": "Receiving a list of available domains to reduce",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "get-domains-for-cut-list",
									"id": "",
									"attributes": [
										"byeasy.by",
										"shopeasy.by",
										"epnredirect.ru",
										"alipromo.com",
										"mysaleday.com",
										"epnclick.ru",
										"shoptapi.com",
										"tpcsh.com",
										"epngo.bz"
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/link-reduction": {
			"post": {
				"tags": [
					"link-reduction"
				],
				"summary": "Reduce reference",
				"description": "Allows you to reduce the link if it is extinguished and returns a shortened option.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"urlContainer"
							],
							"properties": {
								"urlContainer": {
									"description": "If a string, then it is the only URL to reduce. If several links are reduced (massive), each element of the array may consist of submassives with the following keys:\n\n- 'URL' - mandatory parameter. URL to reduce.\n\n- 'Domaincutter' is not a mandatory tolerant key. Allows you to get a reduced link to some specific cuts. By default cutter - Got.BY. It has the highest priority.\n\n- 'ID' - optional wrench of the URL submassive. If it is specified at least for one urla, then it must be transferred to all the urlons. 'ID' can not be equal to 0.\n\n ** Note: ** If there is 'to' inside the main link in which the link is, and its domain is included in the list allowed to reduce. Immediately priority than default.\n\n ** Note: ** If several links are transmitted to reduce and the Domaincutter key is specified for the URL, as well as the similar parameter, the key has the highest priority.",
									"type": "string|array",
									"example": [
										{
											"url": "http://shopeasy.by/redirect/cpa/o/p8eomegta5gjyc56yhba1o4dhd2qm7z2/",
											"domainCutter": "ozn.by",
											"id": 1
										},
										{
											"url": "http://epnclick.ru/cashback/view/p9frjy25zaxaq8xr7zudm2a1qztclmo4/?to=https%3A%2F%2Fwww.aviasales.ru%2F%3Fgclid%3DEAIaIQobChMI7fTnhKWo2wIVBUMZCh1QOgHUEAAYASAAEgJoU_D_BwE",
											"id": 2
										},
										{
											"url": "http://epnclick.ru",
											"id": 3
										}
									]
								},
								"domainCutter": {
									"description": "A shortcutover that can be reduced by one or several links.",
									"type": "string",
									"example": "ozn.by"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "During successful running, all transmitted abbreviated references are returned if you transfer the parameters as in the example indicated above (only without a separate optional Domaincutter parameter), then there will be such a result.",
						"schema": {
							"$ref": "#/definitions/CategoryTree"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "short-url",
									"id": "",
									"attributes": [
										{
											"id": 1,
											"result": "http://ozn.by/2fcnjs"
										},
										{
											"id": 2,
											"result": "http://avia.ws/2fcnkd"
										},
										{
											"id": 3,
											"result": "http://shp.pub/2fcnkr"
										}
									]
								},
								"result": true,
								"request": {
									"urlContainer": [
										{
											"url": "http://shopeasy.by/redirect/cpa/o/p8eomegta5gjyc56yhba1o4dhd2qm7z2/",
											"domainCutter": "ozn.by",
											"id": 1
										},
										{
											"url": "http://epnclick.ru/cashback/view/p9frjy25zaxaq8xr7zudm2a1qztclmo4/?to=https%3A%2F%2Fwww.aviasales.ru%2F%3Fgclid%3DEAIaIQobChMI7fTnhKWo2wIVBUMZCh1QOgHUEAAYASAAEgJoU_D_BwE",
											"id": 2
										},
										{
											"url": "http://epnclick.ru",
											"id": 3
										}
									]
								}
							}
						}
					},
					"400": {
						"description": "With incorrect parameters or when the link is unresolved to reduce the domain.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400018,
										"error_description": "Incorrect fields: urlContainer, domainCutter"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/logout/all": {
			"post": {
				"tags": [
					"logout"
				],
				"summary": "LOGOUT for all client_id",
				"description": "We manage all access tokens for this user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"client_id"
							],
							"properties": {
								"client_id": {
									"description": "The ID of the client from which the request takes place",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								}
							},
							"type": "object"
						}
					},
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": false,
						"type": "string",
						"example": "7e69416ce3231213b32012154f85d19a"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "logout",
									"id": ""
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/logout/refresh-token": {
			"post": {
				"tags": [
					"logout"
				],
				"summary": "Logout по refresh_token",
				"description": "Удаем refresh_token",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"refresh_token",
								"client_id"
							],
							"properties": {
								"refresh_token": {
									"description": "Refresh_Token Client",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"client_id": {
									"description": "The ID of the client from which the request takes place",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "logout",
									"id": ""
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/logout": {
			"post": {
				"tags": [
					"logout"
				],
				"summary": "LOGOUT FOR ONE CLIENT_ID",
				"description": "Good ** All ** Refresh_Token for the current Client_ID",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"client_id"
							],
							"properties": {
								"client_id": {
									"description": "The ID of the client from which the request takes place",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								}
							},
							"type": "object"
						}
					},
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": false,
						"type": "string",
						"example": "7e69416ce3231213b32012154f85d19a"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "logout",
									"id": ""
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/loyalty/epoint/balance": {
			"get": {
				"tags": [
					"loyalty"
				],
				"summary": "Get the Epoint balance",
				"description": "We get an ePoint balance of the current user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "date since",
						"required": true,
						"type": "string",
						"example": "2020-05-15 11:11:11"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "date until",
						"required": true,
						"type": "string",
						"example": "2020-05-15 11:11:11"
					}
				],
				"responses": {
					"200": {
						"description": "Valid Json API",
						"examples": {
							"application/json": {
								"data": {
									"type": "loyalty_get_epoint_balance",
									"id": "",
									"attributes": {
										"balance": 10.2
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validations errors",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "Not allowed period."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/loyalty/epoint/balance/total": {
			"get": {
				"tags": [
					"loyalty"
				],
				"summary": "Get a total balance of ePoint",
				"description": "We get a common balance of users in Epoints",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "algoId",
						"in": "query",
						"description": "algorithm id",
						"required": true,
						"type": "int"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "date since",
						"required": true,
						"type": "string",
						"example": "2020-05-15 11:11:11"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "date until",
						"required": true,
						"type": "string",
						"example": "2020-05-15 11:11:11"
					}
				],
				"responses": {
					"200": {
						"description": "Valid Json API",
						"examples": {
							"application/json": {
								"data": {
									"type": "loyalty_total_epoint_balance",
									"id": "",
									"attributes": {
										"balance": 10
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validations errors",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "algoId is required."
									},
									{
										"error": 422001,
										"error_description": "algoId must be a number."
									},
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "Not allowed period."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/loyalty/subscriptions/algorithms/{algorithm_id}/check": {
			"get": {
				"tags": [
					"loyalty"
				],
				"summary": "Check subscription to the loyalty program",
				"description": "Checks the subscription to the algorithm",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "algorithm_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid Json API",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "loyalty_program",
										"id": "",
										"attributes": {
											"isSubscribed": true
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/loyalty/subscriptions/algorithms/{algorithm_id}": {
			"post": {
				"tags": [
					"loyalty"
				],
				"summary": "Subscribe to Loyalty Program",
				"description": "Signs the user on the algorithm",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "algorithm_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid Json API",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "loyalty_program",
										"id": "",
										"attributes": {
											"isSubscribed": true
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/favorite-categories": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Receipt of selected offering categories",
				"description": "Obtaining elected user categories for the user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of selected categories",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "favorite-categories",
										"id": 1,
										"attributes": {
											"category_id": 2,
											"user_id": 3567520,
											"translations": "Автокосметика",
											"level": 2
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Lang not correct"
									},
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"offers"
				],
				"summary": "Adding Favorite Offer Categories",
				"description": "Adding Favorite Offers Categories to the user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"categoryId"
							],
							"properties": {
								"categoryId": {
									"description": "Category ID",
									"type": "integer",
									"example": 50
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Adding chosen categories",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "favorite-categories",
										"id": 1
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "categoryId is required."
									},
									{
										"error": 422001,
										"error_description": "categoryId must be a number."
									},
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									},
									{
										"error": 422027,
										"error_description": "Favorite category already exist"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"offers"
				],
				"summary": "Removal of selected offering categories",
				"description": "Removal of selected offering categories with the user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "categoryId",
						"in": "query",
						"description": "Category ID",
						"required": true,
						"type": "integer",
						"example": 1
					}
				],
				"responses": {
					"204": {
						"description": "Favorite category removed"
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "categoryId is required."
									},
									{
										"error": 422001,
										"error_description": "categoryId must be a number."
									},
									{
										"error": 422001,
										"error_description": "userId is required."
									},
									{
										"error": 422001,
										"error_description": "userId must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/categories": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Tree categories",
				"description": "Tree categories (full or on a specific Id Offer)",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Local Language",
						"required": true,
						"type": "string",
						"example": "ru"
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "Id Offer for which you need categories",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "mobileOffersCount",
						"in": "query",
						"description": "If this flag is transmitted with value 1, the response will be the number of offers in categories for requests from a mobile application",
						"required": false,
						"type": "integer",
						"example": 1
					}
				],
				"responses": {
					"200": {
						"description": "Treatment of tree categories",
						"schema": {
							"$ref": "#/definitions/CategoryTree"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "categoryTree",
										"id": "",
										"attributes": {
											"name": "Все категории",
											"translations": "Все категории",
											"level": 0,
											"mobileOffersCount": 10,
											"tree": {
												"1": {
													"id": 1,
													"name": "Авто",
													"translations": "Авто",
													"level": 1,
													"mobileOffersCount": 10,
													"tree": {
														"2": {
															"id": 2,
															"name": "Автокосметика",
															"translations": "Автокосметика",
															"level": 2,
															"mobileOffersCount": 5
														},
														"3": {
															"id": 9,
															"name": "Автохимия",
															"translations": "Автохимия",
															"level": 2,
															"mobileOffersCount": 5
														}
													}
												}
											}
										}
									}
								],
								"result": true
							}
						}
					},
					"422": {
						"description": "Incorrect language or offerid",
						"schema": {
							"$ref": "#/definitions/422_Lang_is_required"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Lang not correct"
									},
									{
										"error": 422001,
										"error_description": "lang is required."
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/offers/compilations": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Getting a selection of offering",
				"description": "Obtaining a list of offshoes for a number of parameters (filters).",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Filter selection by status.",
						"required": true,
						"type": "string",
						"enum": [
							"active",
							"archived",
							"waiting"
						],
						"example": "active"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "The number of records you want to return.",
						"required": true,
						"type": "integer",
						"example": 30
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Offset (Papagination).",
						"required": true,
						"type": "integer",
						"example": 0
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "Display filter.",
						"required": true,
						"type": "string",
						"enum": [
							"area_web",
							"area_mobile",
							"role_cashback",
							"role_user"
						],
						"example": "area_web"
					}
				],
				"responses": {
					"200": {
						"description": "A selection of offers by status.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offers-compilations",
										"id": 1,
										"attributes": {
											"slug": "highest-cashback",
											"startTime": "2019-06-23 08:01:22",
											"finishTime": "2019-09-23 10:01:22",
											"styles": {
												"image": "image_url_here.jpg"
											},
											"priority": 10,
											"status": "active",
											"name": "short-name-here",
											"title": "Highest cashback!",
											"subTitle": "Only for this summer!",
											"seoText": "*Seo text*",
											"offersIds": [
												1,
												99,
												104
											]
										}
									}
								],
								"meta": {
									"totalFound": 4,
									"hasNext": 1
								},
								"result": true,
								"request": {
									"status": "active",
									"limit": 2,
									"offset": 1,
									"viewRules": "area_web"
								}
							}
						}
					}
				}
			}
		},
		"/offers/by-link": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Search Offer on the link to the goods",
				"description": "Search Offer on the link to the goods",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "link",
						"in": "query",
						"description": "Link to the product",
						"required": true,
						"type": "string",
						"example": "https://ru.aliexpress.com/item/4000010073255.html"
					}
				],
				"responses": {
					"200": {
						"description": "Search results",
						"examples": {
							"application/json": {
								"data": {
									"type": "offers",
									"id": 1,
									"attributes": {
										"title": "Aliexpress",
										"tmall": false
									}
								},
								"result": true,
								"request": {
									"link": "https://aliexpress.com/item/123456789.html"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "link is required"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/favorite": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Selected Offers",
				"description": "Favorite user offers",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of offering",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offers",
										"id": 1
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/links": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Links for offering",
				"description": "Redirect Links like CashBackDefault and CashBackPackage",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "material",
						"in": "query",
						"description": "Material type.",
						"required": false,
						"type": "string",
						"enum": [
							"cb-p-safari",
							"cb-telebot",
							"social",
							"cb-p-ffmobile",
							"rcb",
							"ppv",
							"cb-default",
							"bg",
							"banner",
							"cb-appios",
							"cb-p-bookmark",
							"cb-p-yandex",
							"goods",
							"coupon",
							"cb-p-ff",
							"cashback",
							"cb-appandroid",
							"cb-p-opera",
							"cb-p-chrome"
						]
					},
					{
						"name": "urlTo",
						"in": "query",
						"description": "Link to resource",
						"required": false,
						"type": "string",
						"example": "https://example.com"
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Id Offers via commas for which links are needed",
						"required": true,
						"type": "string",
						"example": "1,2,3"
					}
				],
				"responses": {
					"200": {
						"description": "Generated links for offering",
						"schema": {
							"$ref": "#/definitions/OffersLinks"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offersLinks",
										"id": 1,
										"attributes": {
											"cashbackDefault": "http://epnclick.ru/redirect/cpa/u/d722dfb57d30002af23b642c4ede8655/1/?material=cb-p-chrome&to=https%3A%2F%2Fexample.com",
											"cashbackPackage": {
												"link": "http://epnclick.ru/redirect/cpa/u/d722dfb57d30002af23b642c4ede8655/1/?material=cb-p-chrome&to=https%3A%2F%2Fexample.com&response_type=json_mobile",
												"schema": "aliexpress",
												"name": "com.alibaba.aliexpresshd"
											}
										}
									},
									{
										"type": "offersLinks",
										"id": 2,
										"attributes": {
											"cashbackDefault": "http://epnclick.ru/redirect/cpa/u//2/?material=cb-p-chrome&to=https%3A%2F%2Fexample.com",
											"cashbackPackage": null
										}
									}
								],
								"result": true
							}
						}
					},
					"422": {
						"description": "Incorrect ID, URL or MATERIAL",
						"schema": {
							"$ref": "#/definitions/422_Offers_links"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "id not correct"
									},
									{
										"error": 422001,
										"error_description": "url not correct"
									},
									{
										"error": 422001,
										"error_description": "Material not correct"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/offers/{offer_id}": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Offer information",
				"description": "Offer information. ** IMPORTANT: ** OFFER_ID may contain the 'OFFER URL' string. If offer with such an URL is not found in the system, then searching on ID",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Local Language",
						"required": false,
						"type": "string"
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "The display rule is transmitted by the desired user role. Valid values: Role_CashBack, Role_user",
						"required": false,
						"type": "string",
						"default": "role_cashback",
						"example": "role_cashback"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "fields from the response structure that you need to return",
						"required": false,
						"type": "string",
						"example": "id,name"
					},
					{
						"name": "clientId",
						"in": "query",
						"description": "client id",
						"required": false,
						"type": "string",
						"example": "web-client"
					},
					{
						"name": "offer_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Offer information",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"description": "Type of resource",
											"type": "string",
											"default": "offers"
										},
										"id": {
											"description": "ID Offer",
											"type": "integer"
										},
										"attributes": {
											"properties": {
												"action": {
													"description": "Information about the promotion",
													"properties": {
														"description": {
															"description": "Promotion description",
															"type": "string"
														}
													},
													"type": "object"
												},
												"banners": {
													"description": "Information about banners",
													"properties": {
														"image": {
															"description": "Picture (for PC)",
															"type": "string"
														},
														"background": {
															"description": "Background (for mobile devices)",
															"type": "string"
														},
														"text": {
															"description": "Text banner",
															"type": "string"
														},
														"textColor": {
															"description": "Text color banner",
															"type": "string"
														},
														"showInWeb": {
															"description": "Show banner on web",
															"type": "boolean"
														},
														"showInMobile": {
															"description": "Show banner in applications",
															"type": "boolean"
														}
													},
													"type": "object"
												},
												"cashbackMaxRate": {
													"description": "Maximum Cacheback Stage",
													"type": "integer"
												},
												"cashbackRateSymbol": {
													"description": "Cacheback Station Designation",
													"type": "string"
												},
												"comission": {
													"description": "Locks for webmasters",
													"properties": {
														"title": {
															"description": "Name bet",
															"type": "string"
														},
														"value": {
															"description": "Percentage rate",
															"type": "string"
														}
													},
													"type": "object"
												},
												"compensation": {
													"description": "Compensation",
													"properties": {
														"maxSum": {
															"description": "Maximum compensation amount",
															"type": "integer"
														},
														"rate": {
															"description": "Compensation percentage",
															"type": "float"
														},
														"status": {
															"description": "Compensation is available?",
															"type": "boolean"
														},
														"type": {
															"description": "Payment Type (True - Fixed, False - Not Fixed)",
															"type": "boolean"
														}
													},
													"type": "object"
												},
												"confirm": {
													"description": "Percentage of confirmed orders",
													"type": "integer"
												},
												"confirmTime": {
													"description": "Average order confirmation time",
													"type": "string"
												},
												"confirmTimeInDays": {
													"description": "Average order confirmation time in days",
													"type": "integer"
												},
												"cookieLive": {
													"description": "Cookie lifetime",
													"type": "string"
												},
												"cr": {
													"description": "The ratio of the number of leads to hosts",
													"type": "integer"
												},
												"creative_placement": {
													"description": "Does the platform be required to create creatives?",
													"type": "boolean"
												},
												"currency": {
													"description": "Supported currencies",
													"type": "array['USD', 'RUB', 'GBP', 'EUR']"
												},
												"description": {
													"description": "Description Offer",
													"type": "string"
												},
												"ecpa": {
													"description": "The average price of clicking within the framework of the affiliate program",
													"type": "string"
												},
												"export": {
													"description": "The possibility of exporting goods",
													"type": "boolean"
												},
												"hosts": {
													"description": "Domains for which allowed pouring",
													"type": "array"
												},
												"iframe_supported": {
													"description": "Did you leave an IFRAME",
													"type": "integer"
												},
												"image": {
													"description": "Offer picture in the general list on the main page of the Cabinet CBB",
													"type": "string"
												},
												"logo95x95": {
													"description": "Logo for mobile application",
													"type": "string"
												},
												"is_rate_fixed": {
													"description": "Is the interest rate fixed",
													"type": "integer"
												},
												"labelIds": {
													"description": "Labers ID (general labels + labels lifted by the user)",
													"type": "array"
												},
												"labelNames": {
													"description": "Name of offper labels (general + user)",
													"type": "array"
												},
												"link_default": {
													"description": "Default Link to the Store",
													"type": "string"
												},
												"logo": {
													"description": "Offer logo to VM pages",
													"type": "string"
												},
												"logo_small": {
													"description": "Offer logo on a detailed page",
													"type": "string"
												},
												"maxRate": {
													"description": "Maximum interest rate store",
													"type": "string"
												},
												"name": {
													"description": "Name of Offer",
													"type": "string"
												},
												"param_type": {
													"description": "Wont Marking (0 - Nothing, 1 - Promotion, 2 - New, 3 - Popular)",
													"type": "integer"
												},
												"primaryColor": {
													"description": "Picture background color (displayed in VMA)",
													"type": "string"
												},
												"priority": {
													"description": "Determines the procedure for displaying the offer in the KB. Offers are sorted ascending",
													"type": "integer"
												},
												"rates": {
													"description": "Rates for KB",
													"properties": {
														"description": {
															"description": "Description",
															"type": "string"
														},
														"newRate": {
															"description": "New bid.",
															"type": "string"
														},
														"newRateColor": {
															"description": "Color of a new bet",
															"type": "string"
														}
													},
													"type": "object"
												},
												"ratesDesc": {
													"description": "Description of Conditions",
													"type": "string"
												},
												"rating": {
													"description": "Offer rating (from 1 to 5)",
													"type": "integer"
												},
												"retargeting": {
													"description": "Allows you to show advertisements to users who visited the site?",
													"type": "boolean"
												},
												"secondaryColor": {
													"description": "Color of wide strips of the picture (displayed in the CBB office)",
													"type": "string"
												},
												"slogan": {
													"description": "Tagline",
													"type": "string"
												},
												"status": {
													"description": "Status of OFF",
													"type": "string"
												},
												"stoppedText": {
													"description": "Description for suspended offer",
													"type": "string"
												},
												"tag": {
													"description": "Short name Offer (Legacy, will be deleted)",
													"type": "string"
												},
												"ternaryColor": {
													"description": "The color of the narrow strip of the picture (is displayed in the VMAB)",
													"type": "string"
												},
												"offerColor": {
													"description": "Color for tiles from logotocks in the web version and color of the Offer page",
													"type": "string"
												},
												"title": {
													"description": "Taitl Offhpe",
													"type": "string"
												},
												"type_id": {
													"description": "Id type type from table. OFFERS_TYPES.",
													"type": "integer"
												},
												"url": {
													"description": "Part of the urlas responsible for the name of the offper",
													"type": "string"
												},
												"view_rules": {
													"description": "Array of available areas",
													"type": "array"
												},
												"wmWarningText": {
													"description": "Clarifications for commissions, footnotes with an asterisk",
													"type": "string"
												},
												"offlineCbImage": {
													"description": "Picture of the product for which the user can get cachek",
													"type": "string"
												},
												"offlineCbImageDescription": {
													"description": "Description of the product of the product for which the user can get cachek",
													"type": "string"
												},
												"wmDescription": {
													"description": "Description for VM",
													"type": "string"
												},
												"geoTarget": {
													"description": "Geotargeting (no longer used)",
													"type": "string"
												},
												"geoTargetCountry": {
													"description": "Countries in which Offer",
													"type": "array"
												},
												"geoTargetComment": {
													"description": "Specifying Comment for GeotargetCountry Field",
													"type": "string"
												},
												"demands": {
													"description": "Requirements",
													"type": "string"
												},
												"wmConfirmTime": {
													"description": "Confirm time for VM",
													"type": "string"
												},
												"canBuyInMobileApp": {
													"description": "Can I buy in a mobile store application",
													"type": "boolean"
												},
												"allowedCashbackLink": {
													"description": "Permission to create a cache-link",
													"type": "boolean"
												},
												"allowMetaAction": {
													"description": "Permission to use meta-goals",
													"type": "boolean"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"description": "Request result",
									"type": "boolean",
									"default": true
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": {
									"attributes": {
										"action": null,
										"banners": null,
										"cashbackMaxRate": 90,
										"cashbackRateSymbol": "%",
										"comission": [
											{
												"title": "Оплаченный заказ",
												"value": "до 70%"
											}
										],
										"compensation": {
											"maxSum": 25,
											"rate": "1,54",
											"status": true,
											"type": false
										},
										"confirm": 90,
										"confirmTime": "30 дней после подтверждения получения товара на AliExpress",
										"confirmTimeInDays": 30,
										"cookieLive": "3 дня",
										"cr": 8,
										"creative_placement": "false",
										"currency": [
											"USD",
											"RUB"
										],
										"description": "Why does EPN give the highest cachek in Aliexpress?",
										"ecpa": "0.12 $",
										"export": "true",
										"hosts": [
											"aliexpress.com"
										],
										"iframe_supported": 0,
										"image": "https://epn.bz/uploads/2017-09-12/ow64i2d5be00k3qitpt0sl5rhhs9vduu.png",
										"logo95x95": "https://epn.bz/uploads/2017-09-12/example.png",
										"is_rate_fixed": 0,
										"labelIds": [
											3,
											4,
											5,
											8
										],
										"labelNames": [
											"Популярное",
											"Китайские магазины",
											"Электроника и техника",
											"Все для дома"
										],
										"link_default": "http://ru.aliexpress.com",
										"logo": "https://epn.bz/uploads/2017-09-12/ow64i4wbyuuscypt20zbntxd6mdhdjuy.png",
										"logo_small": "https://epn.bz/uploads/2017-09-12/ow64i4rokqvjeli2dptb9h05der7r2w2.png",
										"maxRate": "90%",
										"name": "AliExpress",
										"param_type": 0,
										"primaryColor": "#F44336",
										"priority": 1,
										"rates": [
											{
												"description": "Products from the section Special offers",
												"newRate": "до 90%",
												"newRateColor": "#ff5252"
											}
										],
										"ratesDesc": "с 10 октября 2018 года AliExpress обновил условия сотрудничества",
										"rating": 5,
										"retargeting": "false",
										"secondaryColor": "#FB8C00",
										"slogan": "",
										"status": "active",
										"stoppedText": null,
										"tag": "ali",
										"ternaryColor": "#FFCA28",
										"offerColor": "#FFFFFF",
										"title": "AliExpress",
										"type_id": 1,
										"url": "ali",
										"view_rules": [
											"web",
											"plugin",
											"mobile",
											"yandex",
											"pluginwm"
										],
										"offlineCbImage": "https://cdn1.epn.bz/public/5472552653dd0a1af7284add6858a175.png",
										"offlineCbImageDescription": "кэшбэк доступен только для заказов из России",
										"canBuyInMobileApp": "false",
										"allowedCashbackLink": "false",
										"allowMetaAction": "false",
										"geoTargetCountry": [
											"Российская Федерация",
											"Беларусь"
										],
										"geoTargetComment": "В России только в Москве и МО"
									},
									"id": 1,
									"type": "offers"
								},
								"request": [],
								"result": true
							}
						}
					},
					"400": {
						"description": "Incorrect client_id",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400011,
										"error_description": "Wrong client_id or client_secret"
									}
								],
								"result": false
							}
						}
					},
					"422": {
						"description": "Incorrect offer_id",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Offer id not found"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/offers/getByCategories": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "List of offering in categories",
				"description": "List of offering for certain categories",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "lang",
						"in": "query",
						"description": "Local Language",
						"required": true,
						"type": "string",
						"example": "ru"
					},
					{
						"name": "categoryIds",
						"in": "query",
						"description": "List of required categories",
						"required": true,
						"type": "string",
						"example": "1,2,56"
					},
					{
						"name": "order",
						"in": "query",
						"description": "Sort Key List (new, Alpha, Priority)",
						"required": false,
						"type": "string",
						"example": "priority,new"
					},
					{
						"name": "typeIds",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					}
				],
				"responses": {
					"200": {
						"description": "Returns list of offers with filter by category",
						"schema": {
							"$ref": "#/definitions/OffersList"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "offers",
									"id": 510,
									"attributes": {
										"tag": "joomandroidcpi",
										"url": "joomandroidcpi",
										"name": "Joom Android CPI",
										"priority": 717,
										"type_id": 1,
										"link_default": "",
										"iframe_supported": 0,
										"is_rate_fixed": 1,
										"currency": [
											"USD"
										],
										"title": "Joom Android CPI",
										"rates": "[]",
										"cashbackMaxRate": "3.6%",
										"cashbackRateSymbol": "",
										"ecpa": "",
										"cr": 0,
										"confirm": 98,
										"export": "false",
										"retargeting": "false",
										"primaryColor": "#38394d",
										"secondaryColor": "#4c4e7e",
										"ternaryColor": "#e7646a",
										"offerColor": "#ffffff",
										"rating": 0,
										"cookieLive": "7 дней",
										"logo": "https://cdn1.epn.bz/public/30543a307ff36065cadb3e36ce44fd64.png",
										"logo_small": "https://cdn1.epn.bz/public/c73ea63ffc6e1dcebf9b9b09ad8ebfad.png",
										"image": "https://cdn1.epn.bz/public/68f2e941bdaa23b5768eefa02f53f7b5.png",
										"hosts": [
											"www.joom.com"
										],
										"creative_placement": "false",
										"comission": {
											"time": 0,
											"title": "",
											"value": ""
										},
										"compensation": {
											"rate": "",
											"type": false,
											"maxSum": 0,
											"status": false
										},
										"slogan": "",
										"param_type": 0,
										"labelIds": null,
										"labelNames": null
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"422": {
						"description": "Incorrect language or list of category ID",
						"schema": {
							"$ref": "#/definitions/422_Lang_is_required"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Lang not correct"
									},
									{
										"error": 422001,
										"error_description": "lang is required."
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/offers/list": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "List of offering",
				"description": "List of offering with sorting, search by title and filtering in labels and categories",
				"parameters": [
					{
						"name": "lang",
						"in": "query",
						"description": "Local Language",
						"required": true,
						"type": "string",
						"example": "ru"
					},
					{
						"name": "hasFeed",
						"in": "query",
						"description": "Flag for obtaining only offers with fids",
						"required": false,
						"type": "string",
						"example": "true"
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Filter via Idefer. ID of offering through commas.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "The display rule is transmitted by the desired user role. Valid values: Role_CashBack, Role_user",
						"required": true,
						"type": "string",
						"example": "role_cashback,role_user"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records on the page",
						"required": false,
						"type": "integer",
						"example": 50
					},
					{
						"name": "offset",
						"in": "query",
						"description": "(page number-1) * limit",
						"required": false,
						"type": "integer",
						"example": 0
					},
					{
						"name": "labelIds",
						"in": "query",
						"description": "Label IDs for which you need a list of offering",
						"required": false,
						"type": "string",
						"example": "1,35"
					},
					{
						"name": "search",
						"in": "query",
						"description": "search line",
						"required": false,
						"type": "string",
						"example": "ali"
					},
					{
						"name": "categoryIds",
						"in": "query",
						"description": "Category IDs for which you need a list of offering",
						"required": false,
						"type": "string",
						"example": "1,2,56"
					},
					{
						"name": "order",
						"in": "query",
						"description": "Sort by novelty, alphabet, max. Cashback, priority. Valid values: New, Alpha, Max-Rate, Priority",
						"required": false,
						"type": "string",
						"example": "new"
					},
					{
						"name": "sortType",
						"in": "query",
						"description": "Sort direction: ASC, DESC",
						"required": false,
						"type": "string",
						"example": "asc"
					},
					{
						"name": "typeId",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					},
					{
						"name": "increasedCashback",
						"in": "query",
						"description": "Return Offer with Elevated Keshbek",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "created",
						"in": "query",
						"description": "Filter by the appearance of an offper in the system (json object interval object)",
						"required": false,
						"type": "string",
						"example": "{'gte':'2019-05-05','lte':2019-10-10'}"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "поля, которые нужно вернуть. Доступные поля:\n * id,\n * tag,\n * url,\n * name,\n * status,\n * priority,\n * type_id,\n * link_default,\n * domainMatch,\n * iframe_supported,\n * is_rate_fixed,\n * labelIds,\n * labelNames,\n * currency,\n * title,\n * rates,\n * cashbackMaxRate,\n * cashbackRateSymbol,\n * ecpa,\n * cr,\n * confirm,\n * retargeting,\n * primaryColor,\n * secondaryColor,\n * ternaryColor,\n * offerColor,\n * rating,\n * cookieLive,\n * logo,\n * logo_small,\n * image,\n * logo95x95,\n * hosts,\n * creative_placement,\n * comission,\n * compensation,\n * slogan,\n * param_type,\n * link_match,\n * categoryIds,\n * categoryNames,\n * goodsDumps,\n * hasFeed,\n * hasBonusProgram,\n * isExclusive,\n * nameVariants,\n * canBuyInMobileApp,\n * allowedCashbackLink,\n * allowMetaAction,\n * allowedCashbackLink,\n * oldCashbackMaxRate,\n * oldCashbackMaxRateSymbol,\n * increasedCashback,\n * compilationIds,\n * isNew",
						"required": false,
						"type": "string",
						"example": "id,title"
					},
					{
						"name": "priorityByGeo",
						"in": "query",
						"description": "Taking into account the priorities of displaying offer, depending on user geolocation.",
						"required": false,
						"type": "integer",
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "cityId",
						"in": "query",
						"description": "When priorityBygeo = 1. Used for an unauthorized user, information on which is nowhere to be stored anywhere",
						"required": false,
						"type": "integer",
						"example": 551487
					},
					{
						"name": "trafficSources",
						"in": "query",
						"description": "Search Offers by traffic sources ID",
						"required": false,
						"type": "string",
						"example": "1,2,4"
					},
					{
						"name": "isExclusive",
						"in": "query",
						"description": "Exclusive offper filter.",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": true
					},
					{
						"name": "allowedCashbackLink",
						"in": "query",
						"description": "Filter on offenders with a permitted cachek reference",
						"required": false,
						"type": "bool",
						"enum": [
							"true",
							"false"
						],
						"example": true
					},
					{
						"name": "hasBonusProgram",
						"in": "query",
						"description": "Filter on offenders with bonus programs.",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": true
					},
					{
						"name": "hasCompensation",
						"in": "query",
						"description": "Compensation filter.",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": true
					},
					{
						"name": "statuses",
						"in": "query",
						"description": "Filter according to status.",
						"required": false,
						"type": "string",
						"example": "stopped,disabled"
					},
					{
						"name": "mustHaveApprovedPlacement",
						"in": "query",
						"description": "Offer filter for which a confirmed site is required",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": "true"
					},
					{
						"name": "allowedCountries",
						"in": "query",
						"description": "Two-digit codes of countries through commas in which the offer works. Return Offers, who have at least one of the countries.",
						"required": false,
						"type": "string",
						"example": "RU,UA"
					},
					{
						"name": "isNew",
						"in": "query",
						"description": "Return only new (recently activated) Offers.",
						"required": false,
						"type": "boolean",
						"enum": [
							"true",
							"false"
						],
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "List of offering",
						"schema": {
							"$ref": "#/definitions/OffersList"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offers",
										"id": 1,
										"attributes": {
											"tag": "ali",
											"url": "ali",
											"name": "AliExpress",
											"status": "active",
											"priority": 1,
											"type_id": 1,
											"link_default": "https://ru.aliexpress.com/",
											"link_match": "/^https?:\\\\/\\\\/(?:.+?\\\\.)?aliexpress\\\\.com/iu",
											"iframe_supported": 0,
											"is_rate_fixed": 1,
											"labelIds": [
												3,
												5
											],
											"labelNames": [
												"Акции",
												"Китайские магазины"
											],
											"currency": [
												"USD",
												"RUB"
											],
											"title": "AliExpress",
											"rates": "",
											"cashbackMaxRate": 3.5,
											"cashbackRateSymbol": "%",
											"increasedCashback": true,
											"oldCashbackMaxRate": 20,
											"oldCashbackMaxRateSymbol": "р.",
											"oldMaxRate": "20р.",
											"ecpa": "0.12 $",
											"cr": 8,
											"confirm": 90,
											"retargeting": "false",
											"export": "true",
											"primaryColor": "#F44336",
											"secondaryColor": "#FB8C00",
											"ternaryColor": "#FFCA28",
											"offerColor": "#FFFFFF",
											"rating": 5,
											"cookieLive": "браузерная сессия",
											"logo": "https://epn.bz/uploads/2017-09-12/ow64i4wbyuuscypt20zbntxd6mdhdjuy.png",
											"logo_small": "https://epn.bz/uploads/2017-09-12/ow64i4rokqvjeli2dptb9h05der7r2w2.png",
											"image": "https://epn.bz/uploads/2017-09-12/ow64i2d5be00k3qitpt0sl5rhhs9vduu.png",
											"logo95x95": "https://epn.bz/uploads/2017-09-12/example.png",
											"hosts": [
												"aliexpress.com"
											],
											"creative_placement": "false",
											"comission": {
												"time": 0,
												"title": "Hot sale товары",
												"value": "до 70%"
											},
											"compensation": {
												"rate": "2,45",
												"type": false,
												"maxSum": 1500,
												"status": true
											},
											"slogan": "",
											"param_type": 0,
											"goodsDumps": "",
											"maxRate": "3.5%",
											"nameVariants": "AliExpress, Алиэкспресс, Aliexpress, Алик, Alik, Али",
											"canBuyInMobileApp": "false",
											"allowedCashbackLink": "false",
											"allowMetaAction": "false",
											"categoryIds": [
												1,
												2,
												9
											],
											"categoryNames": [
												"Авто",
												"Автокосметика",
												"Автохимия"
											],
											"maxRatePretext": "upTo",
											"hasFeed": "true",
											"hasBonusProgram": "true",
											"isExclusive": "false",
											"compilationIds": [
												1,
												45,
												44
											]
										}
									}
								],
								"meta": {
									"count": 100
								},
								"result": true,
								"request": []
							}
						}
					},
					"422": {
						"description": "Examples of validation errors",
						"schema": {
							"$ref": "#/definitions/422_Lang_is_required"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Lang not correct"
									},
									{
										"error": 422001,
										"error_description": "lang is required."
									},
									{
										"error": 422001,
										"error_description": "limit must be a number."
									},
									{
										"error": 422001,
										"error_description": "viewRules is required."
									},
									{
										"error": 422001,
										"error_description": "ViewRules not correct"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/offers/similar": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "List of similar offering",
				"description": "List of similar offering",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Local Language",
						"required": false,
						"type": "string"
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "Id Offer for which Similar Internet needed",
						"required": true,
						"type": "integer",
						"example": 1
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Limit issuing similar offers, default - 12",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Displacement of issuing similar offers, default - 0",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "viewRules",
						"in": "query",
						"description": "The display rule is transmitted by the desired user role. Valid values: Role_CashBack, Role_user",
						"required": false,
						"type": "string",
						"default": "role_cashback",
						"example": "role_cashback"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "fields from the response structure that you need to return",
						"required": false,
						"type": "string",
						"example": "id,name"
					}
				],
				"responses": {
					"200": {
						"description": "List of similar offering",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"description": "Type of resource",
											"type": "string",
											"default": "offers"
										},
										"id": {
											"description": "ID Offer",
											"type": "integer"
										},
										"attributes": {
											"properties": {
												"action": {
													"description": "Information about the promotion",
													"properties": {
														"description": {
															"description": "Promotion description",
															"type": "string"
														}
													},
													"type": "object"
												},
												"banners": {
													"description": "Information about banners",
													"properties": {
														"image": {
															"description": "Picture (for PC)",
															"type": "string"
														},
														"background": {
															"description": "Background (for mobile devices)",
															"type": "string"
														}
													},
													"type": "object"
												},
												"cashbackMaxRate": {
													"description": "Maximum Cacheback Stage",
													"type": "integer"
												},
												"cashbackRateSymbol": {
													"description": "Cacheback Station Designation",
													"type": "string"
												},
												"comission": {
													"description": "Locks for webmasters",
													"properties": {
														"title": {
															"description": "Name bet",
															"type": "string"
														},
														"value": {
															"description": "Percentage rate",
															"type": "string"
														}
													},
													"type": "object"
												},
												"compensation": {
													"description": "Compensation",
													"properties": {
														"maxSum": {
															"description": "Maximum compensation amount",
															"type": "integer"
														},
														"rate": {
															"description": "Compensation percentage",
															"type": "float"
														},
														"status": {
															"description": "Compensation is available?",
															"type": "boolean"
														},
														"type": {
															"description": "Payment Type (True - Fixed, False - Not Fixed)",
															"type": "boolean"
														}
													},
													"type": "object"
												},
												"confirm": {
													"description": "Percentage of confirmed orders",
													"type": "integer"
												},
												"confirmTime": {
													"description": "Average order confirmation time",
													"type": "string"
												},
												"confirmTimeInDays": {
													"description": "Average order confirmation time in days",
													"type": "integer"
												},
												"cookieLive": {
													"description": "Cookie lifetime",
													"type": "string"
												},
												"cr": {
													"description": "The ratio of the number of leads to hosts",
													"type": "integer"
												},
												"creative_placement": {
													"description": "Does the platform be required to create creatives?",
													"type": "boolean"
												},
												"currency": {
													"description": "Supported currencies",
													"type": "array['USD', 'RUB', 'GBP', 'EUR']"
												},
												"description": {
													"description": "Description Offer",
													"type": "string"
												},
												"ecpa": {
													"description": "The average price of clicking within the framework of the affiliate program",
													"type": "string"
												},
												"export": {
													"description": "The possibility of exporting goods",
													"type": "boolean"
												},
												"hosts": {
													"description": "Domains for which allowed pouring",
													"type": "array"
												},
												"iframe_supported": {
													"description": "Did you leave an IFRAME",
													"type": "integer"
												},
												"image": {
													"description": "Offer picture in the general list on the main page of the Cabinet CBB",
													"type": "string"
												},
												"is_rate_fixed": {
													"description": "Is the interest rate fixed",
													"type": "integer"
												},
												"labelIds": {
													"description": "Labers ID (general labels + labels lifted by the user)",
													"type": "array"
												},
												"labelNames": {
													"description": "Name of offper labels (general + user)",
													"type": "array"
												},
												"link_default": {
													"description": "Default Link to the Store",
													"type": "string"
												},
												"logo": {
													"description": "Offer logo to VM pages",
													"type": "string"
												},
												"logoSmall": {
													"description": "Offer logo on a detailed page",
													"type": "string"
												},
												"maxRate": {
													"description": "Maximum interest rate store",
													"type": "string"
												},
												"name": {
													"description": "Name of Offer",
													"type": "string"
												},
												"param_type": {
													"description": "Wont Marking (0 - Nothing, 1 - Promotion, 2 - New, 3 - Popular)",
													"type": "integer"
												},
												"primaryColor": {
													"description": "Picture background color (displayed in VMA)",
													"type": "string"
												},
												"priority": {
													"description": "Determines the procedure for displaying the offer in the KB. Offers are sorted ascending",
													"type": "integer"
												},
												"rates": {
													"description": "Rates for KB",
													"properties": {
														"description": {
															"description": "Description",
															"type": "string"
														},
														"newRate": {
															"description": "New bid.",
															"type": "string"
														},
														"newRateColor": {
															"description": "Color of a new bet",
															"type": "string"
														}
													},
													"type": "object"
												},
												"ratesDesc": {
													"description": "Description of Conditions",
													"type": "string"
												},
												"rating": {
													"description": "Offer rating (from 1 to 5)",
													"type": "integer"
												},
												"retargeting": {
													"description": "Allows you to show advertisements to users who visited the site?",
													"type": "boolean"
												},
												"secondaryColor": {
													"description": "Color of wide strips of the picture (displayed in the CBB office)",
													"type": "string"
												},
												"slogan": {
													"description": "Tagline",
													"type": "string"
												},
												"status": {
													"description": "Status of OFF",
													"type": "string"
												},
												"stoppedText": {
													"description": "Description for suspended offer",
													"type": "string"
												},
												"tag": {
													"description": "Short name Offer (Legacy, will be deleted)",
													"type": "string"
												},
												"ternaryColor": {
													"description": "The color of the narrow strip of the picture (is displayed in the VMAB)",
													"type": "string"
												},
												"title": {
													"description": "Taitl Offhpe",
													"type": "string"
												},
												"type_id": {
													"description": "Id type type from table. OFFERS_TYPES.",
													"type": "integer"
												},
												"url": {
													"description": "Part of the urlas responsible for the name of the offper",
													"type": "string"
												},
												"view_rules": {
													"description": "Array of available areas",
													"type": "array"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"meta": {
									"description": "Metaverage",
									"properties": {
										"totalFound": {
											"description": "Number of offering found",
											"type": "integer"
										}
									},
									"type": "object"
								},
								"result": {
									"description": "Request result",
									"type": "boolean",
									"default": true
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offers",
										"id": 1,
										"attributes": {
											"action": null,
											"banners": null,
											"cashbackMaxRate": 90,
											"cashbackRateSymbol": "%",
											"comission": [
												{
													"title": "Оплаченный заказ",
													"value": "до 70%"
												}
											],
											"compensation": {
												"maxSum": 25,
												"rate": "1,54",
												"status": true,
												"type": false
											},
											"confirm": 90,
											"confirmTime": "30 дней после подтверждения получения товара на AliExpress",
											"confirmTimeInDays": 30,
											"cookieLive": "3 дня",
											"cr": 8,
											"creative_placement": "false",
											"currency": [
												"USD",
												"RUB"
											],
											"description": "Why does EPN give the highest cachek in Aliexpress?",
											"ecpa": "0.12 $",
											"export": "true",
											"hosts": [
												"aliexpress.com"
											],
											"iframe_supported": 0,
											"image": "https://epn.bz/uploads/2017-09-12/ow64i2d5be00k3qitpt0sl5rhhs9vduu.png",
											"is_rate_fixed": 0,
											"labelIds": [
												3,
												4,
												5,
												8
											],
											"labelNames": [
												"Популярное",
												"Китайские магазины",
												"Электроника и техника",
												"Все для дома"
											],
											"link_default": "http://ru.aliexpress.com",
											"logo": "https://epn.bz/uploads/2017-09-12/ow64i4wbyuuscypt20zbntxd6mdhdjuy.png",
											"logoSmall": "https://epn.bz/uploads/2017-09-12/ow64i4rokqvjeli2dptb9h05der7r2w2.png",
											"maxRate": "90%",
											"name": "AliExpress",
											"param_type": 0,
											"primaryColor": "#F44336",
											"priority": 1,
											"rates": [
												{
													"description": "Products from the section Special offers",
													"newRate": "до 90%",
													"newRateColor": "#ff5252"
												}
											],
											"ratesDesc": "с 10 октября 2018 года AliExpress обновил условия сотрудничества",
											"rating": 5,
											"retargeting": "false",
											"secondaryColor": "#FB8C00",
											"slogan": "",
											"status": "active",
											"stoppedText": null,
											"tag": "ali",
											"ternaryColor": "#FFCA28",
											"title": "AliExpress",
											"type_id": 1,
											"url": "ali",
											"view_rules": [
												"web",
												"plugin",
												"mobile",
												"yandex",
												"pluginwm"
											]
										}
									}
								],
								"meta": {
									"totalFound": 1
								},
								"result": true
							}
						}
					},
					"422": {
						"description": "Incorrect offerid",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Offer not found"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/offers/stats/list": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "List of offering from statistics",
				"description": "List of offering for which there are statistics from the user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Local Language",
						"required": false,
						"type": "string"
					},
					{
						"name": "order",
						"in": "query",
						"description": "Sort by novelty, alphabet, popularity. Valid values: New, Alpha, Priority",
						"required": false,
						"type": "string",
						"example": "new"
					},
					{
						"name": "typeIds",
						"in": "query",
						"description": "List of tests / offer classes (1 = default, 2 = ref, 3 = offline, 4 = offline multi)",
						"required": true,
						"type": "string",
						"example": "1,3"
					}
				],
				"responses": {
					"200": {
						"description": "List of offshoes for which there are static",
						"schema": {
							"$ref": "#/definitions/OffersList"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offers",
										"id": 1,
										"attributes": {
											"tag": "ali",
											"url": "ali",
											"name": "AliExpress",
											"priotity": 1,
											"type_id": 1,
											"link_default": "https://ru.aliexpress.com/",
											"iframe_supported": 0,
											"is_rate_fixed": 1,
											"currency": [
												"USD",
												"RUB"
											],
											"title": "AliExpress",
											"rates": "",
											"cashbackMaxRate": 1,
											"cashbackRateSymbol": "",
											"ecpa": "0.12 $",
											"cr": 8,
											"confirm": 90,
											"export": "true",
											"retargeting": "false",
											"primaryColor": "#F44336",
											"secondaryColor": "#FB8C00",
											"ternaryColor": "#FFCA28",
											"rating": 5,
											"cookieLive": "браузерная сессия",
											"logo": "https://epn.bz/uploads/2017-09-12/ow64i4wbyuuscypt20zbntxd6mdhdjuy.png",
											"logo_small": "https://epn.bz/uploads/2017-09-12/ow64i4rokqvjeli2dptb9h05der7r2w2.png",
											"image": "https://epn.bz/uploads/2017-09-12/ow64i2d5be00k3qitpt0sl5rhhs9vduu.png",
											"hosts": [
												"aliexpress.com"
											],
											"creative_placement": "false",
											"comission": {
												"time": 0,
												"title": "",
												"value": ""
											},
											"compensation": {
												"rate": "",
												"type": false,
												"maxSum": 0,
												"status": false
											},
											"slogan": "",
											"param_type": 0,
											"maxRate": 1
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/trafficBack/rules/create": {
			"post": {
				"tags": [
					"offers/trafficBack/rules"
				],
				"summary": "Creating a rule",
				"description": "Creating a rule",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"url"
							],
							"properties": {
								"offerId": {
									"description": "The id is from which traffic will be redirected, if it is turned off. If the parameter is not transmitted, the default rule will be created (for all properties)",
									"type": "integer",
									"example": 1
								},
								"url": {
									"description": "URL pages to which traffic is redirected",
									"type": "string",
									"example": "https://example.com"
								},
								"defaultParams": {
									"description": "Additional configuration parameters Possible values: URL, SUB, SUB2, SUB3, SUB4, SUB5",
									"type": "object",
									"example": "{\n * 'url':'userOwnUrlName',\n * 'sub':'userOwnSubName',\n * 'sub2':'userOwnSub2Name',\n * 'sub3':'userOwnSub3Name',\n * 'sub4':'userOwnSub4Name',\n * 'sub5':'userOwnSub5Name',\n * }"
								},
								"customParams": {
									"description": "Custom configuration parameters",
									"type": "object",
									"example": "{\n * 'my_param': 'my_value',\n * }"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Rule saved",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "traffic-back"
										},
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean"
								},
								"request": {
									"properties": {
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "traffic-back",
										"id": 1
									}
								],
								"result": true,
								"request": {
									"id": 1
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Errors when creating a rule",
						"schema": {
							"properties": {
								"errors": {
									"properties": {
										"error": {
											"type": "integer",
											"default": 422001
										},
										"error_description": {
											"type": "string",
											"default": "Couldn't create rule, it's already exist"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": "false"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Couldn't create rule, it's already exist"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/trafficBack/rules/{id}": {
			"get": {
				"tags": [
					"offers/trafficBack/rules"
				],
				"summary": "Getting Rules",
				"description": "Getting Rules",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Rule received",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "traffic-back"
										},
										"id": {
											"type": "integer"
										},
										"attributes": {
											"properties": {
												"offerId": {
													"type": "integer"
												},
												"url": {
													"type": "string"
												},
												"defaultParams": {
													"type": "string"
												},
												"customParams": {
													"type": "string"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean"
								},
								"request": {
									"properties": {
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "traffic-back",
										"id": 1,
										"attributes": {
											"offerId": 1,
											"url": "https://example.com",
											"defaultParams": "{'url':'my_url', 'sub':'my_sub'}",
											"customParams": "{''my_param':'my_param_value'}"
										}
									}
								],
								"result": true,
								"request": {
									"id": 1
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"put": {
				"tags": [
					"offers/trafficBack/rules"
				],
				"summary": "Update Rules",
				"description": "Update Rules",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"url"
							],
							"properties": {
								"offerId": {
									"description": "The id is from which traffic will be redirected, if it is turned off. If the parameter is not transmitted, the default rule will be created (for all properties)",
									"type": "integer",
									"example": 1
								},
								"url": {
									"description": "URL pages to which traffic is redirected",
									"type": "string",
									"example": "https://example.com"
								},
								"defaultParams": {
									"description": "Additional configuration parameters Possible values: URL, SUB, SUB2, SUB3, SUB4, SUB5",
									"type": "object",
									"example": "{\n * 'url':'userOwnUrlName',\n * 'sub':'userOwnSubName',\n * 'sub2':'userOwnSub2Name',\n * 'sub3':'userOwnSub3Name',\n * 'sub4':'userOwnSub4Name',\n * 'sub5':'userOwnSub5Name',\n * }"
								},
								"customParams": {
									"description": "Custom configuration parameters",
									"type": "object",
									"example": "{\n * 'my_param': 'my_value',\n * }"
								}
							},
							"type": "object"
						},
						"type": "object"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Rule updated",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "traffic-back"
										},
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean"
								},
								"request": {
									"properties": {
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "traffic-back",
										"id": 1
									}
								],
								"result": true,
								"request": {
									"id": 1
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Errors when updating the rule",
						"schema": {
							"properties": {
								"errors": {
									"properties": {
										"error": {
											"type": "integer",
											"default": 422001
										},
										"error_description": {
											"type": "string",
											"default": "Couldn't update rule, it's already exist"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": "false"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Couldn't update rule, it's already exist"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"offers/trafficBack/rules"
				],
				"summary": "Delete Rules",
				"description": "Delete Rules",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Rule deleted",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "traffic-back"
										},
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean"
								},
								"request": {
									"properties": {
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "traffic-back",
										"id": 1
									}
								],
								"result": true,
								"request": {
									"id": 1
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Error deleting rule",
						"schema": {
							"properties": {
								"errors": {
									"properties": {
										"error": {
											"type": "integer",
											"default": 422001
										},
										"error_description": {
											"type": "string",
											"default": "Couldn't delete rule"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": "false"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Couldn't delete rule"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/trafficBack/rules": {
			"get": {
				"tags": [
					"offers/trafficBack/rules"
				],
				"summary": "Obtaining a list of user rules",
				"description": "Obtaining a list of user rules",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of rules received",
						"schema": {
							"properties": {
								"data": {
									"type": "array",
									"items": {
										"properties": {
											"type": {
												"type": "string",
												"default": "traffic-back"
											},
											"id": {
												"type": "integer"
											},
											"attributes": {
												"properties": {
													"offerId": {
														"type": "integer"
													},
													"url": {
														"type": "string"
													},
													"defaultParams": {
														"type": "string"
													},
													"customParams": {
														"type": "string"
													}
												},
												"type": "object"
											}
										}
									}
								},
								"result": {
									"type": "boolean"
								},
								"request": {
									"properties": {
										"id": {
											"type": "integer"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "traffic-back",
										"id": 1,
										"attributes": {
											"offerId": 1,
											"url": "https://example.com",
											"defaultParams": "{'url':'my_url', 'sub':'my_sub'}",
											"customParams": "{'my_param':'my_param_value'}"
										}
									},
									{
										"type": "traffic-back",
										"id": 2,
										"attributes": {
											"offerId": 2,
											"url": "https://example.com",
											"defaultParams": "{'url':'my_url', 'sub':'my_sub'}",
											"customParams": "{'my_param':'my_param_value'}"
										}
									}
								],
								"result": true,
								"request": {
									"id": 1
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers/transactions/list": {
			"get": {
				"tags": [
					"offers"
				],
				"summary": "Offer list with orders",
				"description": "List of offering for which there are orders for the user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Local Language",
						"required": false,
						"type": "string"
					},
					{
						"name": "typeIds",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "fields from the response structure that you need to return",
						"required": false,
						"type": "string",
						"example": "id,name"
					}
				],
				"responses": {
					"200": {
						"description": "List of offering for which there are orders",
						"schema": {
							"$ref": "#/definitions/OffersList"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offers",
										"id": 1,
										"attributes": {
											"tag": "ali",
											"url": "ali",
											"name": "AliExpress",
											"priority": 1,
											"type_id": 1,
											"link_default": "https://ru.aliexpress.com/",
											"iframe_supported": 0,
											"is_rate_fixed": 0,
											"currency": [
												"USD",
												"RUB"
											],
											"title": "AliExpress",
											"rates": "",
											"cashbackMaxRate": 1,
											"cashbackRateSymbol": "cent",
											"ecpa": "0.12 $",
											"cr": 8,
											"confirm": 90,
											"export": "true",
											"retargeting": "false",
											"primaryColor": "#F44336",
											"secondaryColor": "#FB8C00",
											"ternaryColor": "#FFCA28",
											"rating": 5,
											"cookieLive": "браузерная сессия",
											"logo": "https://epn.bz/uploads/2017-09-12/ow64i4wbyuuscypt20zbntxd6mdhdjuy.png",
											"logo_small": "https://epn.bz/uploads/2017-09-12/ow64i4rokqvjeli2dptb9h05der7r2w2.png",
											"image": "https://epn.bz/uploads/2017-09-12/ow64i2d5be00k3qitpt0sl5rhhs9vduu.png",
											"hosts": [
												"aliexpress.com"
											],
											"creative_placement": "false",
											"comission": {
												"time": 0,
												"title": "",
												"value": ""
											},
											"compensation": {
												"rate": "",
												"type": false,
												"maxSum": 0,
												"status": false
											},
											"slogan": "",
											"param_type": 0,
											"maxRate": "90%"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/offers-meta-actions": {
			"get": {
				"tags": [
					"offers-meta-actions"
				],
				"summary": "List of meta-actions offering",
				"description": "List of meta-actions offering",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"default": "user locale",
						"example": "en"
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "token",
						"required": false,
						"type": "string"
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "offer id",
						"required": true,
						"type": "integer",
						"example": 1
					},
					{
						"name": "role",
						"in": "query",
						"description": "user role",
						"required": false,
						"type": "string",
						"example": "cashback"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page",
						"required": false,
						"type": "int",
						"example": 1
					}
				],
				"responses": {
					"200": {
						"description": "Information about meta actions for offer",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "offers_meta_actions",
										"id": 1,
										"attributes": {
											"name": "test",
											"offerId": 1,
											"params": {
												"description": "Offer meta action #1"
											}
										}
									}
								],
								"meta": {
									"totalRows": 1,
									"hasNext": false
								},
								"result": true,
								"request": {
									"offerId": 1
								}
							}
						}
					},
					"422": {
						"description": "Incorrect params",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId is required."
									},
									{
										"error": 422001,
										"error_description": "offerId must be an integer."
									}
								],
								"result": false,
								"request": {
									"offerId": "asd"
								}
							}
						}
					}
				}
			}
		},
		"/placement/create": {
			"post": {
				"tags": [
					"placements"
				],
				"summary": "Creating a site",
				"description": "Creates a new platform",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "Accept-Language",
						"in": "header",
						"description": "Local Language",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"url",
								"offerId",
								"categoryId"
							],
							"properties": {
								"url": {
									"description": "Link to the site",
									"type": "string",
									"example": "https://test-site.ru"
								},
								"offerId": {
									"description": "ID Offer",
									"type": "integer",
									"example": 1
								},
								"categoryId": {
									"description": "Category ID",
									"type": "integer",
									"example": 1
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Playground Saved",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "placements",
										"id": 1
									}
								],
								"result": true,
								"request": {
									"url": "https://test-site.ru",
									"offerId": 1,
									"categoryId": 1,
									"status": "review"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Error when creating a platform",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "url must be a string."
									},
									{
										"error": 422001,
										"error_description": "url must be a valid URL."
									},
									{
										"error": 422001,
										"error_description": "url is required."
									},
									{
										"error": 422001,
										"error_description": "offerId is required."
									},
									{
										"error": 422001,
										"error_description": "offerId must be a number."
									},
									{
										"error": 422001,
										"error_description": "offerId must be a minimum of 1."
									},
									{
										"error": 422001,
										"error_description": "Offer not found!"
									},
									{
										"error": 422001,
										"error_description": "categoryId is required."
									},
									{
										"error": 422001,
										"error_description": "categoryId must be a number."
									},
									{
										"error": 422001,
										"error_description": "categoryId must be a minimum of 1."
									},
									{
										"error": 422001,
										"error_description": "Category not found!"
									},
									{
										"error": 422001,
										"error_description": "placement is already exist"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/placements/{id}": {
			"get": {
				"tags": [
					"placements"
				],
				"summary": "Getting information about the site",
				"description": "Obtaining information about ID user site",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Fields that need to be returned. Available fields: \n  * offer_id, \n  * title, \n  * URL, \n  * Status.",
						"required": true,
						"type": "string",
						"example": "status,offer_id"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Data platforms",
						"examples": {
							"application/json": {
								"data": {
									"type": "placement",
									"id": 2,
									"attributes": {
										"offerId": 1,
										"title": "test",
										"url": "http://site.com",
										"status": "waiting"
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"404": {
						"description": "The playground is not found",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 404006,
										"error_description": "Placement not found."
									}
								],
								"result": false
							}
						}
					},
					"422": {
						"description": "Incorrect fields",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "id is required."
									},
									{
										"error": 422001,
										"error_description": "id must be a minimum of 1."
									},
									{
										"error": 422001,
										"error_description": "fields must be a string."
									},
									{
										"error": 422001,
										"error_description": "fields must be a string."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"placements"
				],
				"summary": "Removal of the site",
				"description": "Removing site ID",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"204": {
						"description": "The platform is removed"
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"404": {
						"description": "The playground is not found",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 404006,
										"error_description": "Placement not found."
									}
								],
								"result": false
							}
						}
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "id is required."
									},
									{
										"error": 422001,
										"error_description": "id must be a minimum of 1."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/placement/categories": {
			"get": {
				"tags": [
					"placements"
				],
				"summary": "Categories of Platas",
				"description": "Obtaining categories for sites / is an alias for the method of traffic sources'",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of categories",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "placement-categories",
										"id": 1,
										"attributes": {
											"tag": "test_tag",
											"title": "Название категории"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/placements": {
			"get": {
				"tags": [
					"placements"
				],
				"summary": "List of user playgrounds",
				"description": "List of user playgrounds",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "statuses",
						"in": "query",
						"description": "Required statuses",
						"required": true,
						"type": "string",
						"example": "allow,waiting"
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "Id need off offers",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Fields that need to be returned. Available fields: \n  * id \n  * user_id, \n  * partner_id, \n  * offer_id, \n  * title, \n  * URL, \n  * hash, \n  * Status, \n  * traffic_source_id",
						"required": true,
						"type": "string",
						"example": "id,url"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records on the page, Max 100",
						"required": true,
						"type": "integer",
						"example": 50
					},
					{
						"name": "offset",
						"in": "query",
						"description": "(page number-1) * limit",
						"required": false,
						"type": "integer",
						"example": 0
					}
				],
				"responses": {
					"200": {
						"description": "List of user playgrounds",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "placement",
										"id": 2,
										"attributes": {
											"userId": 1,
											"partnerId": 0,
											"offerId": 1,
											"title": "",
											"url": "http://site.ru",
											"hash": "hash2",
											"status": "allow",
											"trafficSourceId": 1
										}
									},
									{
										"type": "placement",
										"id": 1,
										"attributes": {
											"userId": 1,
											"partnerId": 0,
											"offerId": 1,
											"title": "",
											"url": "http://site.ru",
											"hash": "hash1",
											"status": "allow",
											"trafficSourceId": 1
										}
									}
								],
								"meta": {
									"totalFound": 2
								},
								"result": true,
								"request": {
									"fields": "id,url",
									"limit": 10,
									"statuses": "allow"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect fields",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "statuses is required."
									},
									{
										"error": 422001,
										"error_description": "statuses must be a string."
									},
									{
										"error": 422001,
										"error_description": "fields is required."
									},
									{
										"error": 422001,
										"error_description": "fields must be a string."
									},
									{
										"error": 422001,
										"error_description": "Unsupported fields."
									},
									{
										"error": 422001,
										"error_description": "limit must be a number."
									},
									{
										"error": 422001,
										"error_description": "limit must be a minimum of 1."
									},
									{
										"error": 422001,
										"error_description": "limit must be a maximum of 100."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/price/dynamics/get": {
			"get": {
				"tags": [
					"goods"
				],
				"summary": "Dynamics of price products",
				"description": "Dimensional data",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "link",
						"in": "query",
						"description": "Link to the product",
						"required": true,
						"type": "string",
						"example": "https://ru.aliexpress.com/item/-/32830142882345.html"
					},
					{
						"name": "period",
						"in": "query",
						"description": "The period for which we get the dynamics of prices. Valid Values: Week, Two_Weeks, Month, Two_Months",
						"required": true,
						"type": "string",
						"example": "two_weeks"
					}
				],
				"responses": {
					"200": {
						"description": "Dimensional data",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "priceDynamics",
										"id": 273,
										"attributes": {
											"date": "2018-03-27",
											"price": 1.5
										}
									},
									{
										"type": "priceDynamics",
										"id": 274,
										"attributes": {
											"date": "2017-08-28",
											"price": 1.7
										}
									}
								],
								"meta": {
									"maxPrice": 1.7,
									"minPrice": 1.5,
									"currency": "USD",
									"priceChange": -0.2
								},
								"result": true,
								"request": {
									"link": "https://ru.aliexpress.com/item/-/32830142882345.html",
									"period": "two_weeks"
								}
							}
						}
					},
					"422": {
						"description": "There is no price dynamics on this product, or it is not found or transferred wrong",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422116,
										"error_description": "Price history is empty"
									},
									{
										"error": 404003,
										"error_description": "product id not found"
									},
									{
										"error": 422001,
										"error_description": "unavailable period. Available: ['week','two_weeks','month','two_months']"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/promocodes/activate": {
			"post": {
				"tags": [
					"promocodes"
				],
				"summary": "Activate promotion",
				"description": "Activate promotion",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"code"
							],
							"properties": {
								"code": {
									"description": "Promo Code",
									"type": "string",
									"example": "promo_code_123"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Information on promotion",
						"examples": {
							"application/json": {
								"data": {
									"type": "promocode",
									"id": "",
									"attributes": {
										"activation_date": "2019-01-01 12:00:00",
										"expired_at": "2019-01-02 12:00:00",
										"code": "promo_code_123",
										"status": "active"
									}
								},
								"result": true
							}
						}
					},
					"400": {
						"description": "Invalid promotional",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400031,
										"error_description": "Promo code expired"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "code is required."
									},
									{
										"error": 422001,
										"error_description": "code must be a string."
									},
									{
										"error": 422001,
										"error_description": "incorrect code."
									}
								],
								"result": false
							}
						}
					},
					"500": {
						"description": "Could not apply promotional",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500035,
										"error_description": "Promo code activation failed"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/promocodes/check/{code}": {
			"get": {
				"tags": [
					"promocodes"
				],
				"summary": "Check promotion",
				"description": "Check promotion",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "code",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Information on promotion",
						"examples": {
							"application/json": {
								"data": {
									"type": "promocode",
									"id": "",
									"attributes": {
										"code": "promo_code_123",
										"active_seconds": 3600,
										"status": "active",
										"start_at": "2019-01-01 12:00:01",
										"expire_at": "2019-01-01 13:00:01"
									}
								},
								"result": true
							}
						}
					},
					"400": {
						"description": "Invalid promotional",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400031,
										"error_description": "Promo code expired"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "code is required."
									},
									{
										"error": 422001,
										"error_description": "code must be a string."
									},
									{
										"error": 422001,
										"error_description": "incorrect code."
									}
								],
								"result": false
							}
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/promocodes/check": {
			"get": {
				"tags": [
					"promocodes"
				],
				"summary": "Check promotion",
				"description": "Check promotion",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Information on promotion",
						"examples": {
							"application/json": {
								"data": {
									"type": "promocode",
									"id": "",
									"attributes": {
										"code": "promo_code_123",
										"active_seconds": 3600,
										"status": "active",
										"start_at": "2019-01-01 12:00:01",
										"expire_at": "2019-01-01 13:00:01"
									}
								},
								"result": true
							}
						}
					},
					"400": {
						"description": "Invalid promotional",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400031,
										"error_description": "Promo code expired"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "code is required."
									},
									{
										"error": 422001,
										"error_description": "code must be a string."
									},
									{
										"error": 422001,
										"error_description": "incorrect code."
									}
								],
								"result": false
							}
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/promocodes/activated": {
			"get": {
				"tags": [
					"promocodes"
				],
				"summary": "List of activated user promotional",
				"description": "Get a list of activated user promotions",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page",
						"required": false,
						"type": "integer",
						"default": 1,
						"example": 1
					},
					{
						"name": "per_page",
						"in": "query",
						"description": "Number of items on the page (Maximum - 200)",
						"required": false,
						"type": "integer",
						"default": 20,
						"example": 10
					},
					{
						"name": "offer_id",
						"in": "query",
						"description": "ID Offer",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "status",
						"in": "query",
						"description": "Promotional status for user. Available values: Active, Expired",
						"required": false,
						"type": "string",
						"example": "active"
					},
					{
						"name": "sort_by",
						"in": "query",
						"description": "Sort parameter",
						"required": false,
						"type": "string",
						"default": "statusAscAndId",
						"enum": [
							"statusAscAndId",
							"expireAt"
						]
					},
					{
						"name": "sort_order",
						"in": "query",
						"description": "Sorting direction",
						"required": false,
						"type": "string",
						"default": "DESC",
						"enum": [
							"ASC",
							"DESC"
						]
					}
				],
				"responses": {
					"200": {
						"description": "Search results",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "promocode",
										"id": 1112233,
										"attributes": {
											"activated_at": "2018-01-21 22:58:57",
											"expire_at": "2018-01-28 22:58:57",
											"code": "hotsale_promo",
											"status": "expired",
											"limits": {
												"maxRevenue": {
													"EUR": 10,
													"GBP": 9,
													"RUB": 1000,
													"USD": 11
												},
												"minRevenue": {
													"EUR": 3,
													"GBP": 2,
													"RUB": 100,
													"USD": 1
												},
												"maxUserCommission": {
													"EUR": 3,
													"GBP": 2,
													"RUB": 100,
													"USD": 1
												},
												"maxOrders": 5,
												"ordersLeft": 3
											}
										}
									}
								],
								"meta": {
									"totalFound": 1,
									"hasNext": false
								},
								"result": true,
								"request": {
									"offer_id": 1,
									"status": "expired"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Incorrect promo code status"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/actions": {
			"get": {
				"tags": [
					"actions"
				],
				"summary": "Data on targets",
				"description": "Get data on ID for ID",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "token",
						"required": true,
						"type": "string"
					},
					{
						"name": "ids",
						"in": "query",
						"description": "Identifiers goals",
						"required": true,
						"type": "string",
						"example": "1,3"
					}
				],
				"responses": {
					"200": {
						"description": "Successfully",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "action",
										"id": 1,
										"attributes": {
											"name": "Оплаченный заказ"
										}
									},
									{
										"type": "action",
										"id": 3,
										"attributes": {
											"name": "Регистрация"
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "ids is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/rates/general": {
			"post": {
				"tags": [
					"base-rates"
				],
				"summary": "Basic bets",
				"description": "Get basic bets",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "token",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Get base rates",
						"schema": {
							"required": [
								"metaIds",
								"offerId"
							],
							"properties": {
								"offerId": {
									"description": "offer id",
									"type": "integer",
									"example": 1
								},
								"metaIds": {
									"description": "array of meta action ids",
									"type": "array<int>",
									"example": [
										1,
										2
									]
								},
								"role": {
									"description": "user role",
									"type": "string",
									"default": "cashback"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "base_rates",
										"id": "",
										"attributes": {
											"1": {
												"rates": [
													{
														"min": 1,
														"max": 4,
														"base": true,
														"type": "absolute",
														"currency": "RUB"
													},
													{
														"min": 4,
														"max": 7,
														"base": true,
														"type": "relative",
														"currency": null
													}
												],
												"metaActionId": 1
											},
											"5": {
												"rates": [
													{
														"min": 1,
														"max": 3,
														"base": true,
														"type": "absolute",
														"currency": "RUB"
													},
													{
														"min": 2,
														"max": 4,
														"base": false,
														"type": "absolute",
														"currency": "RUB",
														"momentStart": "2019-01-01 00:00:00",
														"momentEnd": "2020-03-01 00:00:00"
													}
												],
												"metaActionId": 5
											}
										}
									}
								],
								"result": true,
								"request": {
									"offerId": 1,
									"metaIds": [
										1,
										5
									]
								}
							}
						}
					},
					"422": {
						"description": "Incorrect params",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId is requried"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/rates/personal": {
			"post": {
				"tags": [
					"personal-rates"
				],
				"summary": "Personal rates",
				"description": "Get personal bets",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "token",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Get base rates",
						"schema": {
							"required": [
								"offerId",
								"metaIds"
							],
							"properties": {
								"offerId": {
									"description": "offer id",
									"type": "integer",
									"example": 1
								},
								"metaIds": {
									"description": "array of meta action ids",
									"type": "array<int>",
									"example": [
										1,
										2
									]
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Success",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "personal_rates",
										"id": "",
										"attributes": {
											"1": {
												"rates": [
													{
														"min": 1,
														"max": 4,
														"base": false,
														"type": "absolute",
														"currency": "RUB",
														"momentStart": "2019-01-01 00:00:00",
														"momentEnd": "2019-05-01 00:00:00"
													}
												],
												"metaActionId": 1
											},
											"5": {
												"rates": [
													{
														"min": 2,
														"max": 4,
														"base": false,
														"type": "absolute",
														"currency": "RUB",
														"momentStart": "2019-01-01 00:00:00",
														"momentEnd": "2020-03-01 00:00:00"
													}
												],
												"metaActionId": 5
											}
										}
									}
								],
								"result": true,
								"request": {
									"offerId": 1,
									"metaIds": [
										1,
										5
									]
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect params",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offerId is requried"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/registration/cashback": {
			"post": {
				"tags": [
					"registration"
				],
				"summary": "Registration in Cabinet Cashback",
				"description": "User registration as a keshbecker by email and password",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "User data (Email, Password) for registration in the system and receiving access token",
						"schema": {
							"required": [
								"ssid_token",
								"email",
								"password",
								"client_id"
							],
							"properties": {
								"ssid_token": {
									"description": "SSID Tocken Received in Query * Request_Limit / SSID_TOKEN *",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"email": {
									"description": "Email user",
									"type": "string",
									"example": "test11@gmail.com"
								},
								"password": {
									"description": "Password user",
									"type": "string",
									"example": "1Ypnq]0vbA"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								},
								"promocode": {
									"description": "** Optional ** Parameter - Promocode entered by the user",
									"type": "string",
									"example": "1Hty87"
								},
								"news_subscription": {
									"description": "** Optional ** Parameter - subscription to news.",
									"type": "integer",
									"default": 1,
									"example": 1
								},
								"click_id": {
									"description": "** Optional ** Parameter - responsible for Ref. Program",
									"type": "string",
									"example": "12668169aab291ec1ba403df10f7dc74"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful registration, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenRegistration"
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/registration/check/email": {
			"post": {
				"tags": [
					"registration/check"
				],
				"summary": "Checking Email",
				"description": "Check email on validity (whether there is in the system)",
				"parameters": [
					{
						"name": "email",
						"in": "body",
						"description": "Email for checking",
						"schema": {
							"required": [
								"ssid_token",
								"email"
							],
							"properties": {
								"ssid_token": {
									"description": "SSID Tocken Received in Query * Request_Limit / SSID_TOKEN *",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"email": {
									"description": "Email user",
									"type": "string",
									"example": "test11@gmail.com"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "eMail Validney",
						"examples": {
							"application/json": {
								"data": {
									"type": "check-email",
									"id": ""
								},
								"result": true,
								"request": []
							}
						}
					},
					"400": {
						"description": "Email already exists",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400016,
										"error_description": "email already exists"
									}
								],
								"result": false
							}
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/registration/check/promocode": {
			"post": {
				"tags": [
					"registration/check"
				],
				"summary": "Check promotion",
				"description": "Check the promotion of validity",
				"parameters": [
					{
						"name": "promocode",
						"in": "body",
						"description": "Promocode for checking",
						"schema": {
							"required": [
								"ssid_token",
								"promocode"
							],
							"properties": {
								"ssid_token": {
									"description": "SSID Tocken Received in Query * Request_Limit / SSID_TOKEN *",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"promocode": {
									"description": "Promocode for checking",
									"type": "string",
									"example": "PROMO-100"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Promotor Validin",
						"examples": {
							"application/json": {
								"data": {
									"type": "check-promocode",
									"id": ""
								},
								"result": true,
								"request": []
							}
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/registration/user": {
			"post": {
				"tags": [
					"registration"
				],
				"summary": "Registration to the Cabinet Webmaster",
				"description": "User Registration as a webmaster by email and password",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "User data (Email, Password) for registration in the system and receiving access token",
						"schema": {
							"required": [
								"ssid_token",
								"email",
								"password",
								"client_id"
							],
							"properties": {
								"ssid_token": {
									"description": "SSID Tocken Received in Query * Request_Limit / SSID_TOKEN *",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"email": {
									"description": "Email user",
									"type": "string",
									"example": "test11@gmail.com"
								},
								"password": {
									"description": "Password user",
									"type": "string",
									"example": "1Ypnq]0vbA"
								},
								"client_id": {
									"description": "The ID of the client from which the request is realized (mobile application, web, plugin)",
									"type": "string",
									"example": "web-client"
								},
								"check_ip": {
									"description": "** Optional ** key indicating whether it is necessary to memorize the current IP of the user and further check the IP check",
									"type": "string",
									"example": true
								},
								"promocode": {
									"description": "** Optional ** Parameter - Promocode entered by the user",
									"type": "string",
									"example": "1Hty87"
								},
								"news_subscription": {
									"description": "** Optional ** Parameter - subscription to news.",
									"type": "integer",
									"default": 1,
									"example": 1
								},
								"click_id": {
									"description": "** Optional ** Parameter - responsible for Ref. Program",
									"type": "string",
									"example": "12668169aab291ec1ba403df10f7dc74"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Successful registration, access tokens are rated",
						"schema": {
							"$ref": "#/definitions/AccessTokenAndRefreshTokenRegistration"
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/settings/common/lang/phrases": {
			"get": {
				"tags": [
					"settings/common/lang"
				],
				"summary": "Project settings language phrases",
				"description": "Getting a list of language variables for the current project",
				"responses": {
					"200": {
						"description": "array key - value",
						"examples": {
							"application/json": {
								"data": {
									"type": "lang-phrases",
									"attributes": {
										"/__project_name__/": "hustle flava project"
									}
								},
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/settings/common/translator/mode/available": {
			"get": {
				"tags": [
					"settings/common/translator"
				],
				"summary": "Check translator mode available",
				"description": "Getting setting 'Translator mode' is available or not",
				"responses": {
					"200": {
						"description": "Permitted translator mode or not",
						"examples": {
							"application/json": {
								"data": {
									"type": "translator_mode",
									"attributes": {
										"mode_available": "yes"
									}
								},
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/ssid": {
			"get": {
				"tags": [
					"request_limit"
				],
				"summary": "Ssid token",
				"description": "Getting a temporary token to access limited methods, such as registration. \n\n Tocken has limited lifetime and limit generation of new tokens in time (captcha)",
				"parameters": [
					{
						"name": "client_id",
						"in": "query",
						"description": "The ID of the client from which the request takes place",
						"required": true,
						"type": "string",
						"example": "web-client"
					}
				],
				"responses": {
					"200": {
						"description": "Parameter containing ssid token",
						"examples": {
							"application/json": {
								"data": {
									"type": "ssid",
									"attributes": {
										"ssid_token": "b2da20a7ccb1190d0b8e019ba637848f"
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/stats/common-referrals-stats": {
			"get": {
				"tags": [
					"stats/cashback"
				],
				"summary": "Get cashback common referrals stats",
				"description": "We get indicators of the statistics of an affiliate program for KB",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Starting the period for collecting statistics (no later than the year from the current date), UTC",
						"required": false,
						"type": "string",
						"example": "2019-01-01"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "End of the period, statistics collection, UTC",
						"required": false,
						"type": "string",
						"example": "2019-03-01"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "common_referrals_stats"
												},
												"id": {
													"default": ""
												},
												"attributes": {
													"properties": {
														"amountTotal": {
															"description": "The number of referral remuneration transferred to the balance in USD",
															"type": "float",
															"example": 1.57
														},
														"amountHoldTotal": {
															"description": "The number of referral remunerations that are at the user in handling in USD",
															"type": "float",
															"example": 5.98
														},
														"referralsCount": {
															"description": "Number of current user referrals",
															"type": "integer",
															"example": 116
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "common_referrals_stats",
									"id": "",
									"attributes": {
										"amountTotal": 1.57,
										"amountHoldTotal": 5.98,
										"referralsCount": 116
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a string."
									},
									{
										"error": 422001,
										"error_description": "The difference from date now should be less than a 1 year."
									},
									{
										"error": 422001,
										"error_description": "The dateTo should be over than dateFrom."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/filter-data": {
			"get": {
				"tags": [
					"stats/cashback"
				],
				"summary": "Get filter data for stats table selectors",
				"description": "Obtaining data for statistical table selectors",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "filter_data",
										"id": "",
										"attributes": {
											"currencies": [
												"RUB",
												"USD"
											],
											"refOfferIds": [
												95,
												99
											]
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/referral-income-and-registration": {
			"get": {
				"tags": [
					"stats/cashback"
				],
				"summary": "Get referral stats income and registration",
				"description": "We receive data statistics of income and registers",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offers",
						"in": "query",
						"description": "Id Offers are introduced through commas",
						"required": true,
						"type": "string",
						"example": "95,99"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Currency",
						"required": true,
						"type": "string",
						"example": "USD"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Start period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-08-27"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "End of the period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-09-27"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "referral_income_and_registration"
												},
												"id": {
													"default": ""
												},
												"attributes": {
													"type": "array",
													"items": {
														"properties": {
															"1": {
																"properties": {
																	"sum_money_outcome": {
																		"description": "The number of referral rewards per day",
																		"type": "float"
																	},
																	"sum_money_outcome_hold": {
																		"description": "The number of referral remunerations that are at the user in the day processing",
																		"type": "float"
																	},
																	"sum_signups": {
																		"description": "Number of registration per day",
																		"type": "integer"
																	},
																	"stats_date": {
																		"description": "Date on which data are grouped",
																		"type": "integer"
																	}
																},
																"type": "object"
															}
														}
													}
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"meta": {
									"properties": {
										"sumMoneyOutcome": {
											"description": "The total number of referral remuneration for the selected period",
											"type": "float",
											"example": 1.57
										},
										"sumMoneyOutcomeHold": {
											"description": "The total number of referral remunerations that are at the user in the processing for the selected period",
											"type": "float",
											"example": 5.98
										},
										"sumSignups": {
											"description": "The final number of current user referrals for the selected period",
											"type": "integer",
											"example": 116
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "referral_income_and_registration",
										"id": 4,
										"attributes": {
											"sum_money_outcome": 1.333,
											"sum_money_outcome_hold": 1.999,
											"sum_signups": 2,
											"stats_date": "2018-09-26"
										}
									},
									{
										"type": "referral_income_and_registration",
										"id": 3,
										"attributes": {
											"sum_money_outcome": 0,
											"sum_money_outcome_hold": 10,
											"sum_signups": 2,
											"stats_date": "2018-09-25"
										}
									},
									{
										"type": "referral_income_and_registration",
										"id": 1,
										"attributes": {
											"sum_money_outcome": 11,
											"sum_money_outcome_hold": 0,
											"sum_signups": 0,
											"stats_date": "2018-09-24"
										}
									}
								],
								"meta": {
									"sumMoneyOutcome": 12.333,
									"sumMoneyOutcomeHold": 11.999,
									"sumSignups": 4
								},
								"result": true,
								"request": {
									"offers": "99,95",
									"currency": "USD",
									"dateFrom": "2018-08-30",
									"dateTo": "2018-09-27"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offers is required."
									},
									{
										"error": 422001,
										"error_description": "offers must be a string."
									},
									{
										"error": 422001,
										"error_description": "not valid offers."
									},
									{
										"error": 422001,
										"error_description": "currency is required."
									},
									{
										"error": 422001,
										"error_description": "currency must be a string."
									},
									{
										"error": 422001,
										"error_description": " not allowed currency."
									},
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateTo must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "the maximum date range is 30 days."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/referral-income": {
			"get": {
				"tags": [
					"stats/cashback"
				],
				"summary": "Get referral income stats",
				"description": "Receive income statistics data",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offers",
						"in": "query",
						"description": "Id Offers are introduced through commas",
						"required": true,
						"type": "string",
						"example": "95,99"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Currency",
						"required": true,
						"type": "string",
						"example": "USD"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Start period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-08-27"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "End of the period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-09-27"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "referral_income"
												},
												"id": {
													"default": ""
												},
												"attributes": {
													"type": "array",
													"items": {
														"properties": {
															"1": {
																"properties": {
																	"sum_money_outcome": {
																		"description": "The number of referral rewards per day",
																		"type": "float"
																	},
																	"sum_money_outcome_hold": {
																		"description": "The number of referral remunerations that are at the user in the day processing",
																		"type": "float"
																	},
																	"stats_date": {
																		"description": "Date on which data are grouped",
																		"type": "integer"
																	}
																},
																"type": "object"
															}
														}
													}
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"meta": {
									"properties": {
										"sumMoneyOutcome": {
											"description": "The total number of referral remuneration for the selected period",
											"type": "float",
											"example": 1.57
										},
										"sumMoneyOutcomeHold": {
											"description": "The total number of referral remunerations that are at the user in the processing for the selected period",
											"type": "float",
											"example": 5.98
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "referral_income",
										"id": 4,
										"attributes": {
											"sum_money_outcome": 1.333,
											"sum_money_outcome_hold": 1.999,
											"stats_date": "2019-04-14"
										}
									},
									{
										"type": "referral_income",
										"id": 3,
										"attributes": {
											"sum_money_outcome": 0,
											"sum_money_outcome_hold": 10,
											"stats_date": "2019-04-13"
										}
									},
									{
										"type": "referral_income",
										"id": 1,
										"attributes": {
											"sum_money_outcome": 11,
											"sum_money_outcome_hold": 0,
											"stats_date": "2019-04-12"
										}
									},
									{
										"type": "referral_income",
										"id": 7,
										"attributes": {
											"sum_money_outcome": 0,
											"sum_money_outcome_hold": 0.001,
											"stats_date": "2019-04-05"
										}
									},
									{
										"type": "referral_income",
										"id": 8,
										"attributes": {
											"sum_money_outcome": 0.667,
											"sum_money_outcome_hold": 0,
											"stats_date": "2019-04-04"
										}
									}
								],
								"meta": {
									"sumMoneyOutcome": 13,
									"sumMoneyOutcomeHold": 12
								},
								"result": true,
								"request": {
									"offers": "99,95,94,98",
									"currency": "USD",
									"dateFrom": "2019-04-04",
									"dateTo": "2019-04-15"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offers is required."
									},
									{
										"error": 422001,
										"error_description": "offers must be a string."
									},
									{
										"error": 422001,
										"error_description": "not valid offers."
									},
									{
										"error": 422001,
										"error_description": "currency is required."
									},
									{
										"error": 422001,
										"error_description": "currency must be a string."
									},
									{
										"error": 422001,
										"error_description": "not allowed currency."
									},
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateTo must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "the maximum date range is 30 days."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/referral-registration": {
			"get": {
				"tags": [
					"stats/cashback"
				],
				"summary": "Get referral registration stats",
				"description": "Receive registration statistics",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offers",
						"in": "query",
						"description": "Id Offers are introduced through commas",
						"required": true,
						"type": "string",
						"example": "95,99"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Start period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-08-27"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "End of the period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-09-27"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "referral_registration"
												},
												"id": {
													"default": ""
												},
												"attributes": {
													"type": "array",
													"items": {
														"properties": {
															"1": {
																"properties": {
																	"sum_signups": {
																		"description": "Number of registration per day",
																		"type": "integer"
																	},
																	"stats_date": {
																		"description": "Date on which data are grouped",
																		"type": "integer"
																	}
																},
																"type": "object"
															}
														}
													}
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"meta": {
									"properties": {
										"sumRegistrationOutcome": {
											"description": "The final number of current user referrals for the selected period",
											"type": "integer",
											"example": 116
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "referral_registration",
										"id": 4,
										"attributes": {
											"sum_signups": 3,
											"stats_date": "2019-04-14"
										}
									},
									{
										"type": "referral_registration",
										"id": 3,
										"attributes": {
											"sum_signups": 2,
											"stats_date": "2019-04-13"
										}
									},
									{
										"type": "referral_registration",
										"id": 8,
										"attributes": {
											"sum_signups": 1,
											"stats_date": "2019-04-04"
										}
									}
								],
								"meta": {
									"sumRegistrationOutcome": 6
								},
								"result": true,
								"request": {
									"offers": "99,95,94,98",
									"dateFrom": "2019-04-04",
									"dateTo": "2019-04-15"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offers is required."
									},
									{
										"error": 422001,
										"error_description": "offers must be a string."
									},
									{
										"error": 422001,
										"error_description": "not valid offers."
									},
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateTo must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "the maximum date range is 30 days."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/referral-transactions": {
			"get": {
				"tags": [
					"stats/cashback"
				],
				"summary": "Get referral transactions stats",
				"description": "We receive data statistics of referrals",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offers",
						"in": "query",
						"description": "Id Offers are introduced through commas",
						"required": true,
						"type": "string",
						"example": "95,99"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Currency",
						"required": true,
						"type": "string",
						"example": "USD"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Start period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-08-27"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "End of the period, viewing statistics",
						"required": true,
						"type": "string",
						"example": "2018-09-27"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number for pagination",
						"required": true,
						"type": "integer",
						"example": 1
					},
					{
						"name": "rowCount",
						"in": "query",
						"description": "Number of strings on one page for pagination",
						"required": true,
						"type": "integer",
						"example": 10
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "referral_transactions"
												},
												"id": {
													"default": ""
												},
												"attributes": {
													"type": "array",
													"items": {
														"properties": {
															"1": {
																"properties": {
																	"revenue": {
																		"description": "Cashback referral (for EPN PROFIT - Profit ENP with referral purchase)",
																		"type": "float"
																	},
																	"commission_user": {
																		"description": "Refs' income from the current transaction",
																		"type": "float"
																	},
																	"order_status": {
																		"description": "Purchase status",
																		"type": "string"
																	},
																	"stats_date": {
																		"description": "Data purchases",
																		"type": "integer"
																	}
																},
																"type": "object"
															}
														}
													}
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"meta": {
									"properties": {
										"summaryRevenue": {
											"description": "The final amount of cachek referral for the selected period",
											"type": "float",
											"example": 1.57
										},
										"summaryCommissionUser": {
											"description": "The final amount of refusion income for the selected period",
											"type": "float",
											"example": 5.98
										},
										"totalFoundRows": {
											"description": "Total purchases found for the selected period",
											"type": "integer",
											"example": 116
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "referral_transactions",
										"id": 4,
										"attributes": {
											"stats_date": "2018-09-30",
											"revenue": 1,
											"commission_user": 0.01,
											"order_status": "waiting"
										}
									},
									{
										"type": "referral_transactions",
										"id": 2,
										"attributes": {
											"stats_date": "2018-09-29",
											"revenue": 2.95,
											"commission_user": 1.5,
											"order_status": "waiting"
										}
									},
									{
										"type": "referral_transactions",
										"id": 1,
										"attributes": {
											"stats_date": "2018-09-28",
											"revenue": 2.05,
											"commission_user": 1,
											"order_status": "waiting"
										}
									}
								],
								"meta": {
									"summaryRevenue": 6,
									"summaryCommissionUser": 2.51,
									"totalFoundRows": 3
								},
								"result": true,
								"request": {
									"offers": "99,95",
									"currency": "USD",
									"dateFrom": "2018-09-21",
									"dateTo": "2018-10-01",
									"page": 1,
									"rowCount": 10
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offers is required."
									},
									{
										"error": 422001,
										"error_description": "offers must be a string."
									},
									{
										"error": 422001,
										"error_description": "not valid offers."
									},
									{
										"error": 422001,
										"error_description": "currency is required."
									},
									{
										"error": 422001,
										"error_description": "currency must be a string."
									},
									{
										"error": 422001,
										"error_description": " not allowed currency."
									},
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a valid date."
									},
									{
										"error": 422001,
										"error_description": "dateTo must not be older than 180 days."
									},
									{
										"error": 422001,
										"error_description": "the maximum date range is 30 days."
									},
									{
										"error": 422001,
										"error_description": "page is required."
									},
									{
										"error": 422001,
										"error_description": "page must be a number."
									},
									{
										"error": 422001,
										"error_description": "page must be a minimum of 1."
									},
									{
										"error": 422001,
										"error_description": "rowCount is required."
									},
									{
										"error": 422001,
										"error_description": "rowCount must be a number."
									},
									{
										"error": 422001,
										"error_description": "rowCount must be a minimum of 1."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/overall": {
			"get": {
				"tags": [
					"stats/overall"
				],
				"summary": "general Statistics",
				"description": "General Statistics on Service",
				"responses": {
					"200": {
						"description": "Jsonapi",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "stats",
										"id": "",
										"attributes": {
											"commission_user_sum_aliexpress_total": 1000000,
											"revenue_sum_aliexpress_total": 1000000,
											"users_count_total": 1000000,
											"leads_count_total_cashback": 1000000
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					}
				}
			}
		},
		"/stats/common": {
			"get": {
				"tags": [
					"stats/user"
				],
				"summary": "Getting General Statistics Web Master",
				"description": "Getting General Statistics Web Master",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "Type of statistics. Day - by day, Hour - by the clock, etc. Depending on the type selected, the answer will additionally be present this or that field with the value, for example 'Day' - Date, 'Offer' - OfferID, etc.",
						"required": true,
						"type": "string",
						"enum": [
							"month",
							"day",
							"hour",
							"offer",
							"creative",
							"placement",
							"sub",
							"sub2",
							"sub3",
							"sub4",
							"sub5",
							"country",
							"os",
							"material",
							"banner"
						],
						"example": "day"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Period from (no earlier than 14 months from the current date)",
						"required": true,
						"type": "string",
						"example": "2018-08-27"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "Period, to",
						"required": true,
						"type": "string",
						"example": "2018-09-27"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Type of currency",
						"required": true,
						"type": "string",
						"example": "USD"
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "Filter via Idefer. ID of offering through commas.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "creativeIds",
						"in": "query",
						"description": "Filter according to creative ID. ID of creative commas.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "placementIds",
						"in": "query",
						"description": "Filter by site ID. ID of platforms through a comma.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "countryCodes",
						"in": "query",
						"description": "Filter by country codes. Codes over commas.",
						"required": false,
						"type": "string",
						"example": "ru,en"
					},
					{
						"name": "os",
						"in": "query",
						"description": "Filter by operating systems. OS through the comma.",
						"required": false,
						"type": "string",
						"example": "windows,lunux"
					},
					{
						"name": "material",
						"in": "query",
						"description": "Filter based on materials. Material through a comma.",
						"required": false,
						"type": "string",
						"example": "banner,coupon"
					},
					{
						"name": "sub",
						"in": "query",
						"description": "Filter by sub. SUB through the comma.",
						"required": false,
						"type": "string",
						"example": "sub"
					},
					{
						"name": "sub2",
						"in": "query",
						"description": "Filter by sub2. Sub2 through a comma.",
						"required": false,
						"type": "string",
						"example": "sub2"
					},
					{
						"name": "sub3",
						"in": "query",
						"description": "Filter by sub3. Sub3 through a comma.",
						"required": false,
						"type": "string",
						"example": "sub3"
					},
					{
						"name": "sub4",
						"in": "query",
						"description": "Filter by sub4. Sub4 through the comma.",
						"required": false,
						"type": "string",
						"example": "sub4"
					},
					{
						"name": "sub5",
						"in": "query",
						"description": "Filter by sub5. Sub5 through a comma.",
						"required": false,
						"type": "string",
						"example": "sub5"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of returned records in response (maximum = 1000)",
						"required": false,
						"type": "integer",
						"maximum": 1000,
						"example": 50
					},
					{
						"name": "offset",
						"in": "query",
						"description": "(Page number - 1) * Limit",
						"required": false,
						"type": "integer",
						"example": 0
					},
					{
						"name": "order",
						"in": "query",
						"description": "Sort parameter",
						"required": false,
						"type": "string",
						"enum": [
							"month",
							"day",
							"offer",
							"creative",
							"placement",
							"sub",
							"sub2",
							"sub3",
							"sub4",
							"sub5",
							"country",
							"os",
							"material",
							"banner",
							"clicks",
							"hosts",
							"cr",
							"epc",
							"leadsHold",
							"leads",
							"revenueHold",
							"revenue",
							"turnover"
						],
						"example": "day"
					},
					{
						"name": "orderDirection",
						"in": "query",
						"description": "Sorting direction",
						"required": false,
						"type": "string",
						"default": "desc",
						"enum": [
							"asc",
							"desc"
						],
						"example": "asc"
					},
					{
						"name": "total",
						"in": "query",
						"description": "The need for final statistics on selected filters. Displayed in Meta",
						"required": false,
						"type": "string",
						"enum": [
							"true"
						],
						"example": "true"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "common-statistic",
										"id": "",
										"attributes": {
											"cr": 25,
											"epc": 11.612,
											"date": "2019-08-08",
											"impressions": 0,
											"clicks": 10,
											"hosts": 5,
											"leads": 0,
											"turnover": 6532,
											"leadsHold": 1,
											"revenueHold": 104.51,
											"revenue": 0,
											"signups": 0
										}
									},
									{
										"type": "common-statistic",
										"id": "",
										"attributes": {
											"cr": 33.94,
											"epc": 175.119,
											"date": "2019-08-07",
											"impressions": 0,
											"clicks": 346,
											"hosts": 218,
											"leads": 0,
											"turnover": 1366070.25,
											"leadsHold": 74,
											"revenueHold": 60591.1,
											"revenue": 0,
											"signups": 0
										}
									}
								],
								"meta": {
									"total": {
										"cr": 33.73,
										"epc": 170.493,
										"impressions": 0,
										"clicks": 356,
										"hosts": 223,
										"leads": 0,
										"turnover": 1372602.25,
										"leadsHold": 75,
										"revenueHold": 60695.61,
										"revenue": 0
									}
								},
								"result": true,
								"request": {
									"type": "day",
									"dateFrom": "2019-06-29",
									"dateTo": "2019-11-27",
									"currency": "RUB",
									"total": "true"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation errors",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "type is required."
									},
									{
										"error": 422001,
										"error_description": "type must be a string."
									},
									{
										"error": 422001,
										"error_description": "undefined field value 'type'"
									},
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a string."
									},
									{
										"error": 422001,
										"error_description": "currency is required."
									},
									{
										"error": 422001,
										"error_description": "currency must be a string."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/common/summary": {
			"get": {
				"tags": [
					"stats/user"
				],
				"summary": "Getting the sum of the general statistics of the web wizard on filters",
				"description": "Getting the sum of the general statistics of the web wizard on filters",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "type",
						"in": "query",
						"description": "Type of statistics. Day - by day, Hour - by the clock, etc.",
						"required": true,
						"type": "string",
						"enum": [
							"month",
							"day",
							"hour",
							"offer",
							"creative",
							"placement",
							"sub",
							"sub2",
							"sub3",
							"sub4",
							"sub5",
							"country",
							"os",
							"material",
							"banner"
						],
						"example": "day"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Period from (no earlier than 14 months from the current date)",
						"required": true,
						"type": "string",
						"example": "2018-08-27"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "Period, to",
						"required": true,
						"type": "string",
						"example": "2018-09-27"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Type of currency",
						"required": true,
						"type": "string",
						"example": "USD"
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "Filter via Idefer. ID of offering through commas.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "creativeIds",
						"in": "query",
						"description": "Filter according to creative ID. ID of creative commas.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "placementIds",
						"in": "query",
						"description": "Filter by site ID. ID of platforms through a comma.",
						"required": false,
						"type": "string",
						"example": "1,2,3"
					},
					{
						"name": "countryCodes",
						"in": "query",
						"description": "Filter by country codes. Codes over commas.",
						"required": false,
						"type": "string",
						"example": "ru,en"
					},
					{
						"name": "os",
						"in": "query",
						"description": "Filter by operating systems. OS through the comma.",
						"required": false,
						"type": "string",
						"example": "windows,lunux"
					},
					{
						"name": "material",
						"in": "query",
						"description": "Filter based on materials. Material through a comma.",
						"required": false,
						"type": "string",
						"example": "banner,coupon"
					},
					{
						"name": "sub",
						"in": "query",
						"description": "Filter by sub. SUB through the comma.",
						"required": false,
						"type": "string",
						"example": "sub"
					},
					{
						"name": "sub2",
						"in": "query",
						"description": "Filter by sub2. Sub2 through a comma.",
						"required": false,
						"type": "string",
						"example": "sub2"
					},
					{
						"name": "sub3",
						"in": "query",
						"description": "Filter by sub3. Sub3 through a comma.",
						"required": false,
						"type": "string",
						"example": "sub3"
					},
					{
						"name": "sub4",
						"in": "query",
						"description": "Filter by sub4. Sub4 through the comma.",
						"required": false,
						"type": "string",
						"example": "sub4"
					},
					{
						"name": "sub5",
						"in": "query",
						"description": "Filter by sub5. Sub5 through a comma.",
						"required": false,
						"type": "string",
						"example": "sub5"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"examples": {
							"application/json": {
								"data": {
									"type": "common-summary-statistic",
									"id": "",
									"attributes": {
										"cr": 33.73,
										"epc": 170.493,
										"impressions": 0,
										"clicks": 356,
										"hosts": 223,
										"leads": 0,
										"turnover": 1372602.25,
										"leadsHold": 75,
										"revenueHold": 60695.61,
										"revenue": 0,
										"signups": 0
									}
								},
								"result": true,
								"request": {
									"type": "day",
									"dateFrom": "2019-06-29",
									"dateTo": "2019-11-27",
									"currency": "RUB"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation errors",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "type is required."
									},
									{
										"error": 422001,
										"error_description": "type must be a string."
									},
									{
										"error": 422001,
										"error_description": "undefined field value 'type'"
									},
									{
										"error": 422001,
										"error_description": "dateFrom is required."
									},
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateTo is required."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a string."
									},
									{
										"error": 422001,
										"error_description": "currency is required."
									},
									{
										"error": 422001,
										"error_description": "currency must be a string."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/user/referrals/count": {
			"get": {
				"tags": [
					"stats/user"
				],
				"summary": "Obtaining the number of referrals with a group of roles",
				"description": "Obtaining the number of referrals with a group of roles",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"examples": {
							"application/json": {
								"data": {
									"type": "referrals-count",
									"id": "",
									"attributes": [
										{
											"role": "user",
											"count": 6
										},
										{
											"role": "cashback",
											"count": 68
										}
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/stats/user/referrals/revenue/total": {
			"get": {
				"tags": [
					"stats/user"
				],
				"summary": "Obtaining a general income on affiliate programs for VM",
				"description": "Obtaining a general income on affiliate programs for VM",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Starting from the date",
						"required": false,
						"type": "string",
						"example": "2020-01-01"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "Finishing the date",
						"required": false,
						"type": "string",
						"example": "2020-03-01"
					}
				],
				"responses": {
					"200": {
						"description": "Jsonapi",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "referrals-revenue-total"
												},
												"id": {
													"default": ""
												},
												"attributes": {
													"properties": {
														"revenue": {
															"description": "Summary of referral income transferred to the balance",
															"type": "float",
															"example": 1.57
														},
														"revenueHold": {
															"description": "Commission of referral income, in processing",
															"type": "float",
															"example": 5.98
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "referrals-revenue-total",
									"id": "",
									"attributes": {
										"USD": {
											"revenue": 1.57,
											"revenueHold": 5.98
										},
										"RUB": {
											"revenue": 2.7,
											"revenueHold": 108
										},
										"EUR": {
											"revenue": 0,
											"revenueHold": 0
										},
										"GPB": {
											"revenue": 0,
											"revenueHold": 0
										}
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "dateFrom must be a string."
									},
									{
										"error": 422001,
										"error_description": "dateTo must be a string."
									},
									{
										"error": 422001,
										"error_description": "The dateTo should be over than dateFrom."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/subs/search": {
			"get": {
				"tags": [
					"subs"
				],
				"summary": "List of custom sabov",
				"description": "Returns a list of sabs. Possible search by name.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "name",
						"in": "query",
						"description": "Search shopping. May consist of: 'numbers', 'letter of Latin alphabet' letters; Signs: '_', '. ',' + ',' - '(before sending execution URL coding)",
						"required": false,
						"type": "string"
					},
					{
						"name": "subFields",
						"in": "query",
						"description": "Fields, through the comma to be returned. Default returns ID. Valid values: SUB, sub2, sub3, sub4, sub5",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of sabs.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "sub",
										"id": 1,
										"attributes": {
											"sub": "subNameHere",
											"sub5": ""
										}
									},
									{
										"type": "sub",
										"id": 2,
										"attributes": {
											"sub": "subNameHereForSubId2",
											"sub5": "subNameHereForSubId2AndFieldSub5"
										}
									}
								],
								"result": true,
								"request": {
									"name": "example"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Possible mistakes",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Not allowed sub name :123:"
									},
									{
										"error": 422001,
										"error_description": "Not allowed field 'sub,sub1' for subFields. Allowed values: sub,sub2,sub3,sub4,sub5"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/support/dialogs": {
			"get": {
				"tags": [
					"support"
				],
				"summary": "Obtaining user dialogs",
				"description": "List of current user dialogs with support",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page (OFFSET)",
						"required": false,
						"type": "integer",
						"default": 1,
						"example": 1
					},
					{
						"name": "page_count",
						"in": "query",
						"description": "The number of dialogs returned in the answer (Limit)",
						"required": false,
						"type": "integer",
						"default": 15,
						"example": 20
					},
					{
						"name": "ticket_status",
						"in": "query",
						"description": "The status of the quiquettes that are needed in the sample",
						"required": false,
						"type": "string",
						"default": "all",
						"enum": [
							"all",
							"open",
							"closed",
							"notify"
						],
						"example": "open"
					},
					{
						"name": "search",
						"in": "query",
						"description": "Row to search in the name of the Ticket and Messages",
						"required": false,
						"type": "string",
						"default": "",
						"example": "money back"
					}
				],
				"responses": {
					"200": {
						"description": "List of supporter dialogs with support",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "dialogs"
										},
										"id": {
											"description": "id request",
											"type": "string",
											"default": ""
										},
										"attributes": {
											"description": "array of tickets, with the last message in it",
											"type": "array",
											"items": {
												"properties": {
													"id": {
														"description": "Ticket ID",
														"type": "integer"
													},
													"created_at": {
														"description": "Ticket creation date",
														"type": "string"
													},
													"updated_at": {
														"description": "Date of the latest Ticket change",
														"type": "string"
													},
													"subject": {
														"description": "Ticket (topic) wrapper",
														"type": "string"
													},
													"is_readed": {
														"description": "The last message was read",
														"type": "boolean",
														"default": 0
													},
													"last_from_support": {
														"description": "Last post by support (yes / no)",
														"type": "integer",
														"default": 0
													},
													"last_user_role": {
														"description": "The role of the user who wrote the last message in the Ticket",
														"type": "string"
													},
													"message": {
														"description": "The text of the last message in the title",
														"type": "string"
													},
													"last_fullname": {
														"description": "Name of the author of the last message in the tike",
														"type": "string"
													},
													"username": {
														"description": "Username author of the last message in the tike",
														"type": "string"
													},
													"avatar": {
														"description": "URL by which you can download the author's avatar of the last message in the tiKeta",
														"type": "string"
													},
													"new_messages_count": {
														"description": "How many current user messages in the tiKeta",
														"type": "integer"
													},
													"support_read_message": {
														"description": "The last message read the support (yes / no)",
														"type": "integer",
														"default": 0
													},
													"user_read_message": {
														"description": "Last post I read the current user (yes / no)",
														"type": "integer",
														"default": 0
													},
													"status": {
														"description": "Ticket status. Notify - System Message (Notification)",
														"type": "string",
														"enum": [
															"open",
															"closed",
															"notify"
														]
													}
												},
												"type": "object"
											}
										}
									},
									"type": "object"
								},
								"meta": {
									"properties": {
										"count": {
											"description": "Number of dialogue found",
											"type": "integer"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "dialogs",
									"id": "",
									"attributes": [
										{
											"id": 481680,
											"created_at": "2018-02-19 15:53:01",
											"subject": "Test message",
											"updated_at": "2018-05-09 15:29:07",
											"is_readed": 1,
											"last_from_support": 0,
											"last_user_role": "user",
											"message": "test message",
											"last_fullname": "Sarah Conor2",
											"username": "asdasd",
											"avatar": "https://cdn1.epn.bz/public/626.png",
											"new_messages_count": 0,
											"support_read_message": 0,
											"user_read_message": 1,
											"status": "closed"
										}
									]
								},
								"result": true,
								"meta": {
									"count": 1
								},
								"request": []
							}
						}
					},
					"400": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400010,
										"error_description": "check format for parameters: page, partner_id, page_count, ticket_status"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/support/dialogs/messages": {
			"post": {
				"tags": [
					"support"
				],
				"summary": "Creating a message to the Sappport",
				"description": "Creating a message to the Sappport",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"subject",
								"message"
							],
							"properties": {
								"subject": {
									"description": "Bandwagon tickets",
									"type": "string",
									"example": "Давным давно, в далекой-далекой галактике..."
								},
								"message": {
									"description": "Text Messages in Support Service",
									"type": "string",
									"example": "Главный вопрос жизни, вселенной и всего такого?"
								},
								"reply_to_id": {
									"description": "Ticket ID on which the answer is happening. If the message is new, then the value is 0. Or not to send the parameter at all.",
									"type": "integer",
									"example": 3096
								},
								"files": {
									"description": "Files applied to the message or an empty array",
									"type": "array",
									"items": {
										"properties": {
											"name": {
												"type": "string",
												"example": "screen_001.JPG"
											},
											"size": {
												"type": "float",
												"example": 76.53
											},
											"link": {
												"description": "ID (HASH) loaded on the CDN file. The file must be downloaded as ** Private **",
												"type": "string",
												"example": "d58e3582afa99040e27b92b13c8f2280"
											}
										},
										"type": "object"
									}
								},
								"ticket_params": {
									"description": "The parameters of the new Ticket (all parameters are optional, this field may contain an empty object)",
									"properties": {
										"offerId": {
											"type": "integer",
											"example": 1090
										},
										"offerTitle": {
											"type": "string",
											"example": "Aliexpress"
										},
										"refLink": {
											"description": "Referral reference",
											"type": "string",
											"example": "https://aliexpress.com?ref=10487"
										},
										"refLogin": {
											"description": "Login referral",
											"type": "string",
											"example": "#ThinkTwice"
										},
										"orderDate": {
											"description": "order date",
											"type": "string",
											"example": "2019-05-12"
										},
										"orderNumber": {
											"description": "Order number",
											"type": "string",
											"example": 123589465896
										},
										"orderLink": {
											"description": "Link to order",
											"type": "string",
											"example": "https://aliexpress/orders/234567"
										},
										"appPlatform": {
											"description": "Application platform",
											"enum": [
												"web",
												"ios",
												"android",
												"plugin"
											],
											"example": "web"
										},
										"appVersion": {
											"description": "The version of the application from which the order was carried out",
											"type": "string",
											"example": "12.8.4"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Retains the Ticket ID",
						"examples": {
							"application/json": {
								"data": {
									"type": "create-message",
									"id": "",
									"attributes": {
										"ticket_id": 513921
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/support/dialogs/{dialog_id}/messages": {
			"get": {
				"tags": [
					"support"
				],
				"summary": "Getting a list of messages in dialog",
				"description": "List of messages in the current user user dialogue with support",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "dialog_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of messages in the user dialog with support",
						"examples": {
							"application/json": {
								"data": {
									"type": "support-messages",
									"id": "",
									"attributes": {
										"messages": [
											{
												"id": 1672622,
												"user_from_id": 573237,
												"message": "Ваш вопрос был закрыт, так как мы...",
												"is_readed": 0,
												"user_role": "support",
												"date_created": 1518089708,
												"fullname": "ePN System",
												"avatar": null,
												"files": [
													{
														"id": 1,
														"file": "https://cdn1.epn.bz/public/ef.txt",
														"name": "test.txt",
														"file_visibility": "public"
													}
												]
											}
										],
										"ticket": {
											"id": 468825,
											"user_id": 208,
											"subject": "test",
											"status": "closed",
											"created_at": "2018-01-16 13:44:40",
											"is_favorites": 0,
											"fullname": "Sarah Conor2",
											"username": "asdasd",
											"lang": "en",
											"role": "user",
											"auto_closed": 1,
											"params": {
												"offerId": 1,
												"orderDate": "2019-05-12"
											}
										}
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/support/dialogs/messages/unread/count": {
			"get": {
				"tags": [
					"support"
				],
				"summary": "Unread messages",
				"description": "Obtaining the number of user unread messages",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns the number of unread reports",
						"examples": {
							"application/json": {
								"data": {
									"type": "unread-messages",
									"id": "",
									"attributes": {
										"unread_count": 0
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/support/dialogs/messages/{message_id}/read": {
			"post": {
				"tags": [
					"support"
				],
				"summary": "Marks a message as read",
				"description": "Sets messages Status 'Read'. \n  * The ticket must belong to the younger user, the message must be from a support / admin",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "message_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns the JSON API valid answer, in case of success"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/support/dialogs/messages/search": {
			"get": {
				"tags": [
					"support"
				],
				"summary": "Search string in FAQ",
				"description": "Search for a string in the FAQ when creating a new message to Support",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "search",
						"in": "query",
						"description": "The string we are looking for in the FAQ (message topic)",
						"required": true,
						"type": "string",
						"example": "выплат"
					}
				],
				"responses": {
					"200": {
						"description": "Returns similar topics from FAQ. Or nothing (empty attributes) if nothing is found",
						"examples": {
							"application/json": {
								"data": {
									"type": "faq-answers",
									"id": "",
									"attributes": [
										{
											"id": 13,
											"question": "Когда и как проводятся выплаты?",
											"answer": "Выплаты производятся мгновенно после заказа выплаты на все кошельки, кроме WireTransfer"
										}
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/support/topics": {
			"get": {
				"tags": [
					"support"
				],
				"summary": "Getting a list of topics",
				"description": "List of topics to send messages Sappport current benefit",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Language for the topic",
						"required": true,
						"type": "string",
						"example": "ru"
					}
				],
				"responses": {
					"200": {
						"description": "List of topics to send messages Sappport by current user",
						"examples": {
							"application/json": {
								"data": {
									"type": "support-topics",
									"id": "",
									"attributes": [
										{
											"id": 1,
											"name": "Не засчитался заказ",
											"answer": "Переходите на страницу потерянного заказа"
										},
										{
											"id": 2,
											"name": "Заказ долго в обработке",
											"answer": "Здравствуйте! \\n\\nУкажите, пожалуйста:\\n\\nмагазин, в котором вы сделали заказ"
										},
										{
											"id": 3,
											"name": "Заказ получен, кэшбэк отклонен",
											"answer": "Здравствуйте! \\n\\nУкажите, пожалуйста:\\n\\nмагазин, в котором вы сделали заказ"
										}
									]
								}
							}
						}
					}
				}
			}
		},
		"/test/ping": {
			"get": {
				"tags": [
					"test"
				],
				"summary": "Ping request",
				"description": "Used for dough (ping) API. Will return the token info if you pass it as a parameter",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					},
					{
						"name": "X-API-VERSION",
						"in": "header",
						"description": "api version",
						"required": false,
						"type": "number",
						"enum": [
							2
						]
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "v",
						"in": "query",
						"description": "api version query param example",
						"required": false,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "Reply pong.",
						"examples": {
							"application/json": {
								"data": {
									"type": "ping_pong",
									"id": "",
									"attributes": {
										"0": "pong",
										"locale": "en",
										"access_token": null,
										"params": []
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"401": {
						"description": "Error if you are provided by Nevalidi",
						"schema": {
							"$ref": "#/definitions/401_INVALID_TOKEN"
						}
					}
				}
			}
		},
		"/test/user-info": {
			"post": {
				"tags": [
					"test"
				],
				"summary": "Get test user info",
				"description": "Get user info by provided access_token",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "user info as JSON"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/trackings": {
			"get": {
				"tags": [
					"tracking"
				],
				"summary": "List of tracking parcels.",
				"description": "List of tracking parcels",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page",
						"required": false,
						"type": "integer",
						"default": 1,
						"example": 1
					},
					{
						"name": "per_page",
						"in": "query",
						"description": "Number of records for one request (maximum = 100)",
						"required": false,
						"type": "integer",
						"default": 10,
						"maximum": 1000,
						"example": 20
					}
				],
				"responses": {
					"200": {
						"description": "List of tracking parcels",
						"schema": {
							"definition": "TrackingGetListHandlerSuccessResponce",
							"properties": {
								"data": {
									"type": "array",
									"items": {
										"properties": {
											"type": {
												"type": "string",
												"default": "tracking-list"
											},
											"id": {
												"type": "int"
											},
											"attributes": {
												"description": "Track number fields",
												"properties": {
													"tracking_number": {
														"description": "track number",
														"type": "string"
													},
													"location_name": {
														"description": "Address of the last check-point",
														"type": "string"
													},
													"zip": {
														"description": "Zip Code / Postal Code of the Last Check Point",
														"type": "string"
													},
													"status_human": {
														"description": "Summary status from the last check-point",
														"type": "string"
													},
													"status": {
														"description": "Status from the last check-point",
														"type": "string",
														"enum": [
															"other",
															"in_transit_left",
															"info-recieved",
															"in_transit_arrived",
															"accepted",
															"delivered",
															"arrived",
															"import_transit",
															"in_transit_left_export",
															"export",
															"accepted_left",
															"in_delivery",
															"delivery-fail",
															"soon_delivery",
															"sort",
															"import",
															"customs_arrived",
															"in_transit_transfer",
															"customs_left",
															"in_transit",
															"in_transit_int",
															"not_received_from_sender",
															"in_transit_export_soon",
															"customs_clearance",
															"in_transit_arrived_export",
															"return-delivered"
														]
													},
													"parcel_status": {
														"description": "Parcel status",
														"type": "string",
														"enum": [
															"on-the-way",
															"delivered",
															"ready-for-pickup",
															"new"
														]
													},
													"country": {
														"description": "Country of finding the last check-point",
														"type": "string"
													},
													"last_date": {
														"description": "Date of the latest update of information in Check-Point",
														"type": "string"
													},
													"added_at": {
														"description": "Date of receipt of the parcel in Check Point",
														"type": "string"
													},
													"no_info": {
														"description": "Could not find information on the track number in the database",
														"type": "boolean",
														"default": false
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"meta": {
									"properties": {
										"total_found": {
											"description": "Total number of results in the sample",
											"type": "integer"
										},
										"has_next": {
											"description": "1 - the next page exists, 0 - no",
											"type": "integer"
										}
									},
									"type": "object"
								},
								"result": {
									"description": "Flag of successful query",
									"type": "boolean"
								},
								"request": {
									"description": "Request Parameters",
									"type": "object"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "tracking-list",
										"id": 1,
										"attributes": {
											"tracking_number": 0,
											"location_name": "Test",
											"zip": "SHENZHEN",
											"status_human": "Test",
											"status": 0,
											"parcel_status": "on-the-way",
											"country": "ZZZ",
											"last_date": "2017-03-18 22:33:24",
											"added_at": "2017-03-18 22:33:24",
											"no_info": false
										}
									},
									{
										"type": "tracking-list",
										"id": "",
										"attributes": {
											"tracking_number": 11000000000,
											"location_name": null,
											"zip": null,
											"status_human": null,
											"status": null,
											"parcel_status": null,
											"country": null,
											"last_date": null,
											"added_at": "2017-03-18 22:33:24",
											"no_info": true
										}
									}
								],
								"meta": {
									"total_found": 2,
									"has_next": 0
								},
								"result": true,
								"request": {
									"per_page": 10
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"schema": {
							"definition": "TrackingGetListHandlerFailedResponce",
							"properties": {
								"errors": {
									"description": "Massive error",
									"type": "array",
									"items": {
										"properties": {
											"error": {
												"description": "Numeric error code",
												"type": "integer"
											},
											"error_description": {
												"description": "Error description",
												"type": "string"
											}
										},
										"type": "object"
									}
								},
								"result": {
									"description": "Flag of successful query",
									"type": "boolean",
									"default": false
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "page not correct"
									},
									{
										"error": 422001,
										"error_description": "perPage not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"tracking"
				],
				"summary": "Add track code",
				"description": "Add Track Code to track the parcel. You can get it using [Method] (# Tag / Tracking% 2FPaths% 2F ~ 1trackings ~ 1% 7BTracking_Number% 7D ~ 1all% 2fget) or [Method2] (# Tag / Tracking% 2FPaths% 2F ~ 1Trackings ~ 1% 7BTracking_Number% 7D ~ 1Last% 2fget).",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Add track code",
						"schema": {
							"required": [
								"tracking_number"
							],
							"properties": {
								"tracking_number": {
									"description": "Trek code",
									"type": "string",
									"example": "AA000000000AA"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/200_Tracking_Create_Or_Update"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "tracking-list",
									"id": 1,
									"attributes": {
										"status": "waiting"
									}
								},
								"result": true,
								"request": {
									"tracking_number": "AA000000000AA"
								}
							}
						}
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "tracking_number not correct"
									}
								],
								"result": false
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"tracking"
				],
				"summary": "Delete all bindings track tracks to the user.",
				"description": "Delete all bindings track tracks to the user.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": []
							}
						}
					},
					"400": {
						"description": "The user does not have monitored track numbers.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400070,
										"error_description": "Not found tracking numbers by user."
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/trackings/{tracking_number}": {
			"get": {
				"tags": [
					"tracking"
				],
				"summary": "Get all the information on the track number.",
				"description": "Get all the information on the track number.",
				"parameters": [
					{
						"name": "tracking_number",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "tracking-get-all",
										"id": 1,
										"attributes": {
											"tracking_number": 0,
											"status": 20,
											"location_name": "Test",
											"zip": "SHENZHEN",
											"status_human": "Test",
											"country": "ZZZ",
											"last_date": "2017-03-18 22:33:24",
											"added_at": "2017-03-18 22:33:24"
										}
									},
									{
										"type": "tracking-get-all",
										"id": 5,
										"attributes": {
											"tracking_number": 0,
											"status": 4,
											"location_name": "Отделение не указано",
											"zip": "SHENZHEN",
											"status_human": "Test",
											"country": "CHN",
											"last_date": "2017-03-18 22:30:24",
											"added_at": "2017-03-18 22:33:24"
										}
									}
								],
								"result": true,
								"request": {
									"id": 123456
								}
							}
						}
					},
					"400": {
						"description": "No information on this track number.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400070,
										"error_description": "Not found info by tracking number."
									}
								],
								"result": false
							}
						}
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "tracking_number not correct"
									}
								],
								"result": false
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"tracking"
				],
				"summary": "Delete tracking track numbers to the user.",
				"description": "Delete tracking track numbers to the user.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "tracking_number",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": {
									"tracking_number": 0
								}
							}
						}
					},
					"400": {
						"description": "The user does not have a tracked track number.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400070,
										"error_description": "Not found tracking number by user."
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "tracking_number not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/trackings/{tracking_number}/last": {
			"get": {
				"tags": [
					"tracking"
				],
				"summary": "Get the latest information on the track number.",
				"description": "Get the latest information on the track number.",
				"parameters": [
					{
						"name": "tracking_number",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"examples": {
							"application/json": {
								"data": {
									"type": "tracking-get-last",
									"id": 1,
									"attributes": {
										"tracking_number": 0,
										"status": 20,
										"location_name": "Test",
										"zip": "SHENZHEN",
										"status_human": "Test",
										"country": "ZZZ",
										"last_date": "2017-03-18 22:33:24",
										"added_at": "2017-03-18 22:33:24"
									}
								},
								"result": true,
								"request": {
									"tracking_number": 0
								}
							}
						}
					},
					"400": {
						"description": "No information on this track number.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400070,
										"error_description": "Not found info by last tracking number."
									}
								],
								"result": false
							}
						}
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "tracking_number not correct"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/trackings/refresh/all": {
			"post": {
				"tags": [
					"tracking"
				],
				"summary": "Update all tracking parcels.",
				"description": "Update all tracked user parcels. You can get information using [Method1] (# Tag / Tracking% 2FPaths% 2F ~ 1trackings% 2fget).",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/200_Tracking_Create_Or_Update"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "tracking-update-all",
									"id": "",
									"attributes": {
										"status": "waiting"
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"400": {
						"description": "The user does not have monitored track numbers.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400070,
										"error_description": "Not found tracking numbers by user."
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/trackings/refresh": {
			"post": {
				"tags": [
					"tracking"
				],
				"summary": "Update the tracking parcel.",
				"description": "Update the tracking parcel. You can get information using [Method] (# Tag / Tracking% 2FPaths% 2F ~ 1trackings ~ 1% 7BTracking_Number% 7D ~ 1all% 2fget) or [Method2] (# Tag / Tracking% 2FPaths% 2F ~ 1Trackings ~ 1% 7BTracking_Number% 7D ~ 1Last% 2fget).",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"description": "Update track code",
						"schema": {
							"required": [
								"tracking_number"
							],
							"properties": {
								"tracking_number": {
									"description": "Trek code",
									"type": "string",
									"example": "AA000000000AA"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/200_Tracking_Create_Or_Update"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "tracking-list",
									"id": 1,
									"attributes": {
										"status": "waiting"
									}
								},
								"result": true,
								"request": {
									"tracking_number": "AA000000000AA"
								}
							}
						}
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "tracking_number not correct"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/trackings/subscribe": {
			"post": {
				"tags": [
					"tracking"
				],
				"summary": "Follow the parcel.",
				"description": "Follow the parcel. Binding parcel to the user.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Trek code",
						"schema": {
							"required": [
								"tracking_number"
							],
							"properties": {
								"tracking_number": {
									"description": "Trek code",
									"type": "string",
									"example": "AA000000000AA"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": {
									"tracking_number": "AA000000000AA"
								}
							}
						}
					},
					"400": {
						"description": "The user does not have a tracked track number.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400071,
										"error_description": "Not found tracking number by user."
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "tracking_number not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/traffic-sources": {
			"get": {
				"tags": [
					"placements"
				],
				"summary": "List of traffic sources.",
				"description": "List of traffic sources.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of traffic sources.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "traffic-source",
										"id": 1,
										"attributes": {
											"name": "Контекстная реклама",
											"priority": 1
										}
									},
									{
										"type": "traffic-source",
										"id": 2,
										"attributes": {
											"name": "Баннерная реклама",
											"priority": 2
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"422": {
						"description": "Incorrect language",
						"schema": {
							"$ref": "#/definitions/422_Lang_is_required"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "lang is required."
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/transactions": {
			"get": {
				"tags": [
					"transactions"
				],
				"summary": "Get user-cacheker's transactions",
				"description": "User Transactions on Exfigs with Multiple Filters",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page",
						"required": false,
						"type": "integer",
						"default": 1,
						"example": 1
					},
					{
						"name": "perPage",
						"in": "query",
						"description": "Number of records for one request (maximum = 1000)",
						"required": false,
						"type": "integer",
						"default": 10,
						"maximum": 1000,
						"example": 20
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "ID Ofherov.",
						"required": false,
						"type": "array",
						"example": "1,35"
					},
					{
						"name": "tsFrom",
						"in": "query",
						"description": "The beginning of the period when an order was made (no later than six months of the current date)",
						"required": true,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "tsTo",
						"in": "query",
						"description": "End of the period when an order was made",
						"required": true,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "confirmTsFrom",
						"in": "query",
						"description": "The beginning of the period when the order was confirmed (no later than six months of the current date)",
						"required": false,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "confirmTsTo",
						"in": "query",
						"description": "End of the period when the order was confirmed",
						"required": false,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "orderNumber",
						"in": "query",
						"description": "Order number. Possible Search by part of the room (from two characters)",
						"required": false,
						"type": "string",
						"example": 90975990756016
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Fields that we need. If the parameter is not transmitted, then the default fields will come: ('Order_number', 'Order_time', 'Order_Status',' Transaction_Time ',' Revenue ',' Commission_user ',' Creative_Title ',' sub_title ',' user_click_id ',' offer_type ',' OFFER_ID ',' CURRENCY ',' TRANSACTIONID ',' PRODUCT ',' PRODUCT_LINK ').",
						"required": false,
						"type": "string",
						"enum": [
							"order_number",
							"order_time",
							"order_status",
							"transaction_time",
							"revenue",
							"commission_user",
							"creative_title",
							"sub_title",
							"user_click_id",
							"offer_type",
							"offer_id",
							"currency",
							"transactionId",
							"click_id",
							"sub1",
							"sub2",
							"sub3",
							"sub4",
							"sub5",
							"country_code",
							"type_id",
							"productsImages",
							"productsIds"
						],
						"example": "click_id,sub1,sub2"
					},
					{
						"name": "typeIds",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting. Valid values: STATS_TS. \n  * The default sorting order is ascending. Sign '-' in front of the field - the reverse order of sorting (descending)",
						"required": false,
						"type": "string",
						"example": "-stats_ts"
					}
				],
				"responses": {
					"200": {
						"description": "Search results",
						"schema": {
							"$ref": "#/definitions/getTransactions"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "transactions",
										"id": 273,
										"attributes": {
											"stats_ts": "2018-03-27 18:00:00",
											"order_number": "RU170324-476811",
											"order_time": "2018-03-27 18:08:24",
											"order_status": "rejected",
											"transaction_time": "2018-03-27 18:00:00",
											"revenue": 99,
											"commission_user": 4.95,
											"creative_title": "test",
											"sub_title": null,
											"user_click_id": "",
											"offer_type": "lamoda",
											"offer_id": 1,
											"type_id": 1,
											"currency": "USD",
											"transactionId": 25016360,
											"product_link": "",
											"product": "",
											"date": "27.02.2018",
											"link": "",
											"productsImages": [
												{
													"productId": 33040093937,
													"image": "http://iherb.cdn.com/kf/33040093937.jpg"
												},
												{
													"productId": 33040093938,
													"image": "http://iherb.cdn.com/kf/33040093938.jpg"
												}
											],
											"productsIds": [
												33040093937,
												33040093938
											]
										}
									},
									{
										"type": "transactions",
										"id": 274,
										"attributes": {
											"stats_ts": "2017-08-27 18:00:00",
											"order_number": "RU170324-213919",
											"order_time": "2018-03-27 18:08:24",
											"order_status": "rejected",
											"transaction_time": "2018-03-27 18:00:00",
											"revenue": 251,
											"commission_user": 12.55,
											"creative_title": "test",
											"sub_title": null,
											"user_click_id": "",
											"offer_type": "lamoda",
											"offer_id": 1,
											"type_id": 1,
											"currency": "USD",
											"transactionId": 25016361,
											"product_link": "",
											"product": "",
											"date": "27.02.2018",
											"link": ""
										}
									}
								],
								"meta": {
									"totalFound": 15,
									"hasNext": 1
								},
								"result": true,
								"request": {
									"offerIds": "22,1",
									"perPage": 100,
									"tsFrom": "2018-03-01",
									"tsTo": "2018-04-01"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"schema": {
							"$ref": "#/definitions/422_Errors_Transactions"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "perPage must be a maximum of 1000."
									},
									{
										"error": 422001,
										"error_description": "tsTo is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/transactions/cashback": {
			"get": {
				"tags": [
					"transactions"
				],
				"summary": "Get user-cacheker's transactions",
				"description": "User Transactions on Exfigs with Multiple Filters",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page",
						"required": false,
						"type": "integer",
						"default": 1,
						"example": 1
					},
					{
						"name": "perPage",
						"in": "query",
						"description": "Number of records for one request (maximum = 1000)",
						"required": false,
						"type": "integer",
						"default": 10,
						"maximum": 1000,
						"example": 20
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "ID Ofherov.",
						"required": false,
						"type": "array",
						"example": "1,35"
					},
					{
						"name": "tsFrom",
						"in": "query",
						"description": "The beginning of the period when an order was made (no later than six months of the current date)",
						"required": true,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "tsTo",
						"in": "query",
						"description": "End of the period when an order was made",
						"required": true,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "confirmTsFrom",
						"in": "query",
						"description": "The beginning of the period when the order was confirmed (no later than six months of the current date)",
						"required": false,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "confirmTsTo",
						"in": "query",
						"description": "End of the period when the order was confirmed",
						"required": false,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "orderNumber",
						"in": "query",
						"description": "Order number. Possible Search by part of the room (from two characters)",
						"required": false,
						"type": "string",
						"example": 90975990756016
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Fields that we need. If the parameter is not transmitted, then the default fields will come: ('Order_number', 'Order_time', 'Order_Status',' Transaction_Time ',' Revenue ',' Commission_user ',' Creative_Title ',' sub_title ',' user_click_id ',' offer_type ',' OFFER_ID ',' CURRENCY ',' TRANSACTIONID ',' PRODUCT ',' PRODUCT_LINK ').",
						"required": false,
						"type": "string",
						"enum": [
							"order_number",
							"order_time",
							"order_status",
							"transaction_time",
							"revenue",
							"commission_user",
							"creative_title",
							"sub_title",
							"user_click_id",
							"offer_type",
							"offer_id",
							"currency",
							"transactionId",
							"click_id",
							"sub1",
							"sub2",
							"sub3",
							"sub4",
							"sub5",
							"country_code",
							"type_id",
							"productsImages",
							"productsIds"
						],
						"example": "click_id,sub1,sub2"
					},
					{
						"name": "typeIds",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting. Valid values: STATS_TS. \n  * The default sorting order is ascending. Sign '-' in front of the field - the reverse order of sorting (descending)",
						"required": false,
						"type": "string",
						"example": "-stats_ts"
					}
				],
				"responses": {
					"200": {
						"description": "Search results",
						"schema": {
							"$ref": "#/definitions/getTransactions"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "transactions",
										"id": 273,
										"attributes": {
											"stats_ts": "2018-03-27 18:00:00",
											"order_number": "RU170324-476811",
											"order_time": "2018-03-27 18:08:24",
											"order_status": "rejected",
											"transaction_time": "2018-03-27 18:00:00",
											"revenue": 99,
											"commission_user": 4.95,
											"creative_title": "test",
											"sub_title": null,
											"user_click_id": "",
											"offer_type": "lamoda",
											"offer_id": 1,
											"type_id": 1,
											"currency": "USD",
											"transactionId": 25016360,
											"product_link": "",
											"product": "",
											"date": "27.02.2018",
											"link": "",
											"productsImages": [
												{
													"productId": 33040093937,
													"image": "http://iherb.cdn.com/kf/33040093937.jpg"
												},
												{
													"productId": 33040093938,
													"image": "http://iherb.cdn.com/kf/33040093938.jpg"
												}
											],
											"productsIds": [
												33040093937,
												33040093938
											]
										}
									},
									{
										"type": "transactions",
										"id": 274,
										"attributes": {
											"stats_ts": "2017-08-27 18:00:00",
											"order_number": "RU170324-213919",
											"order_time": "2018-03-27 18:08:24",
											"order_status": "rejected",
											"transaction_time": "2018-03-27 18:00:00",
											"revenue": 251,
											"commission_user": 12.55,
											"creative_title": "test",
											"sub_title": null,
											"user_click_id": "",
											"offer_type": "lamoda",
											"offer_id": 1,
											"type_id": 1,
											"currency": "USD",
											"transactionId": 25016361,
											"product_link": "",
											"product": "",
											"date": "27.02.2018",
											"link": ""
										}
									}
								],
								"meta": {
									"totalFound": 15,
									"hasNext": 1
								},
								"result": true,
								"request": {
									"offerIds": "22,1",
									"perPage": 100,
									"tsFrom": "2018-03-01",
									"tsTo": "2018-04-01"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"schema": {
							"$ref": "#/definitions/422_Errors_Transactions"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "perPage must be a maximum of 1000."
									},
									{
										"error": 422001,
										"error_description": "tsTo is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/orders/search/history": {
			"get": {
				"tags": [
					"orders"
				],
				"summary": "Get a history of searching for user orders",
				"description": "User orders search history",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records (maximum = 200)",
						"required": false,
						"type": "integer",
						"default": 20,
						"maximum": 200,
						"example": 20
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Bias",
						"required": false,
						"type": "integer",
						"default": 0,
						"example": 20
					}
				],
				"responses": {
					"200": {
						"description": "Search results",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "order-search"
												},
												"id": {
													"type": "integer",
													"default": 1234
												},
												"attributes": {
													"properties": {
														"date": {
															"description": "Search time for search",
															"type": "date",
															"example": "2018-03-27 18:00:00"
														},
														"order_number": {
															"description": "Order number",
															"type": "string",
															"example": 123456789
														},
														"offer_id": {
															"description": "ID Offer",
															"type": "integer",
															"example": 1
														},
														"price": {
															"description": "Order price",
															"type": "float",
															"example": 1.23
														},
														"is_mobile": {
															"description": "Order performed through a mobile application",
															"type": "integer",
															"enum": [
																0,
																1
															],
															"example": 1
														},
														"link": {
															"description": "Link to the product",
															"type": "string",
															"example": "https://ru.aliexpress.com/item/International-Version-YOTA-YotaPhone-2-YD201-Qualcomm-Snapdragon-800-5-0-FHD-Always-on-E-ink/32740167237.html"
														},
														"compensation_status": {
															"description": "Compensation status",
															"type": "string",
															"enum": [
																"cashback_acquired",
																"compensation_unavailable",
																"ready_for_order",
																"compensation_awaiting",
																"compensation_payed",
																"compensation_rejected"
															],
															"example": "ready_for_order"
														},
														"status": {
															"description": "Search status order",
															"type": "string",
															"enum": [
																"in_search",
																"found",
																"not_found"
															],
															"example": "found"
														},
														"comment": {
															"description": "Comment to order",
															"type": "string",
															"example": "Данный заказ не найден"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"meta": {
									"type": "array",
									"items": {
										"properties": {
											"total_found": {
												"description": "Total amount.",
												"type": "integer",
												"example": 20
											},
											"has_next": {
												"description": "The existence of the next page for pagination.",
												"type": "boolean",
												"example": "false"
											}
										},
										"type": "object"
									}
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "order-search",
										"id": 123,
										"attributes": {
											"date": "2019-04-10 11:10:38",
											"order_number": 123465675,
											"offer_id": 1,
											"price": 12,
											"compensation_status": "ready_for_order",
											"status": "not_found",
											"comment": "Требуется уточнение"
										}
									},
									{
										"type": "order-search",
										"id": 122,
										"attributes": {
											"date": "2019-03-29 11:59:19",
											"order_number": 123456,
											"offer_id": 1,
											"price": 100,
											"compensation_status": "rejected",
											"status": "not_found",
											"comment": "Прошёл срок"
										}
									}
								],
								"meta": {
									"total_found": 2,
									"has_next": false
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "limit must be a maximum of 200."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/orders/search": {
			"post": {
				"tags": [
					"orders"
				],
				"summary": "Search order",
				"description": "Send request for order search",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"order",
								"offer_id",
								"link"
							],
							"properties": {
								"order": {
									"description": "Order number",
									"type": "string",
									"example": 123393730002428
								},
								"offer_id": {
									"description": "ID Offer",
									"type": "integer",
									"example": 1
								},
								"link": {
									"description": "Link to the product",
									"type": "string",
									"example": "https://ru.aliexpress.com/item/12-3/123456789.html"
								},
								"is_mobile": {
									"description": "Order made through a mobile application?",
									"type": "boolean",
									"example": "false"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The search was successful",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"1": {
											"properties": {
												"type": {
													"type": "string",
													"default": "order-search"
												},
												"id": {
													"type": "integer",
													"default": ""
												},
												"attributes": {
													"properties": {
														"status": {
															"description": "Search status",
															"type": "string",
															"enum": [
																"success",
																"in_process"
															],
															"example": "success"
														},
														"order_number": {
															"description": "Order number",
															"type": "string",
															"example": 123456789
														},
														"is_found": {
															"description": "Whether the order is found",
															"type": "boolean",
															"example": "true"
														},
														"is_compensation_available": {
															"description": "Is Offer Compensation available available",
															"type": "boolean",
															"example": "false"
														},
														"search_id": {
															"description": "Query ID search",
															"type": "integer",
															"example": 123
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "order-search",
									"id": "",
									"attributes": {
										"status": "success",
										"is_found": true,
										"is_compensation_available": false,
										"search_id": 12345
									}
								},
								"result": true
							}
						}
					},
					"400": {
						"description": "Invalid query",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400064,
										"error_description": "Wrong link for this offer"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation error",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "offer_id is required."
									},
									{
										"error": 422001,
										"error_description": "offer_id must be a number."
									}
								],
								"result": false
							}
						}
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					},
					"500": {
						"description": "Problem with offer",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500000,
										"error_description": "Broken offer"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/transactions/user/summary": {
			"get": {
				"tags": [
					"transactions"
				],
				"summary": "Get a Summary Transaction Report of the WebMaster Transaction",
				"description": "Summer report on user transactions-webmaster",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "offerId",
						"in": "query",
						"description": "ID Offhphe.",
						"required": true,
						"type": "integer",
						"example": 1
					},
					{
						"name": "tsFrom",
						"in": "query",
						"description": "The beginning of the period (no later than six months of the current date)",
						"required": true,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "tsTo",
						"in": "query",
						"description": "End of period",
						"required": true,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "clickId",
						"in": "query",
						"description": "Identifier click",
						"required": false,
						"type": "string",
						"example": "39c8e9953fe8ea40ff1c59876e0e2f28"
					},
					{
						"name": "sub",
						"in": "query",
						"description": "Identify Saba.",
						"required": false,
						"type": "integer",
						"example": 12
					},
					{
						"name": "creative",
						"in": "query",
						"description": "Creative identifier",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Currency",
						"required": false,
						"type": "string",
						"enum": [
							"USD",
							"RUB",
							"EUR",
							"GBP"
						],
						"example": "USD"
					}
				],
				"responses": {
					"200": {
						"description": "Total report",
						"examples": {
							"application/json": {
								"data": {
									"type": "transactions",
									"attributes": {
										"completed": {
											"count": 0,
											"commission": 0
										},
										"waiting": {
											"count": 0,
											"commission": 0
										},
										"pending": {
											"count": 0,
											"commission": 0
										},
										"rejected": {
											"count": 0,
											"commission": 0
										},
										"currency": "USD"
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "tsTo is required."
									},
									{
										"error": 422001,
										"error_description": "tsFrom is required."
									},
									{
										"error": 422001,
										"error_description": "offerId is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/transactions/user": {
			"get": {
				"tags": [
					"transactions"
				],
				"summary": "Get user-webmaster transactions",
				"description": "User transactions on offends with multiple filters. \n  * It is recommended to specify either confirmtsfrom, confirmststo, or StatusUpdatedStart, StatusUpdatedend",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "page",
						"in": "query",
						"description": "page",
						"required": false,
						"type": "integer",
						"default": 1,
						"example": 1
					},
					{
						"name": "perPage",
						"in": "query",
						"description": "Number of records for one request (maximum = 1000)",
						"required": false,
						"type": "integer",
						"default": 10,
						"maximum": 1000,
						"example": 20
					},
					{
						"name": "offerIds",
						"in": "query",
						"description": "ID Ofherov.",
						"required": false,
						"type": "string",
						"example": "1,35"
					},
					{
						"name": "tsFrom",
						"in": "query",
						"description": "The beginning of the period when an order was made (not earlier than the year from the current date)",
						"required": true,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "tsTo",
						"in": "query",
						"description": "The end of the period when an order was made (not earlier than the year from the current date)",
						"required": true,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "confirmTsFrom",
						"in": "query",
						"description": "The beginning of the period when the order was confirmed or rejected (not earlier than the year from the current date)",
						"required": false,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "confirmTsTo",
						"in": "query",
						"description": "The end of the period when the order was confirmed or rejected (not earlier than the year from the current date)",
						"required": false,
						"type": "string",
						"example": "2018-03-01"
					},
					{
						"name": "orderNumber",
						"in": "query",
						"description": "Order number",
						"required": false,
						"type": "string",
						"example": 90975990756016
					},
					{
						"name": "fields",
						"in": "query",
						"description": "Fields that we need. If the parameter is not transmitted, then the default fields will come: ('Order_number', 'Order_time', 'Order_Status',' Transaction_Time ',' Revenue ',' Commission_user ',' Creative_Title ',' sub_title ',' user_click_id ',' offer_type ',' OFFER_ID ',' CURRENCY ',' TRANSACTIONID ',' PRODUCT ',' PRODUCT_LINK ',' TYPE_ID ').",
						"required": false,
						"type": "string",
						"enum": [
							"order_number",
							"order_time",
							"order_status",
							"transaction_time",
							"revenue",
							"commission_user",
							"creative_title",
							"sub_title",
							"user_click_id",
							"offer_type",
							"offer_id",
							"currency",
							"transactionId",
							"click_id",
							"sub1",
							"sub2",
							"sub3",
							"sub4",
							"sub5",
							"country_code",
							"type_id",
							"productsImages",
							"productsIds",
							"action_id",
							"country_destination"
						],
						"example": "click_id,sub1,sub2"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "Currency",
						"required": false,
						"type": "string",
						"enum": [
							"USD",
							"RUB",
							"EUR",
							"GBP"
						],
						"example": "USD"
					},
					{
						"name": "clickId",
						"in": "query",
						"description": "Identifier click",
						"required": false,
						"type": "string",
						"example": "39c8e9953fe8ea40ff1c59876e0e2f28"
					},
					{
						"name": "sub",
						"in": "query",
						"description": "Identify Saba.",
						"required": false,
						"type": "integer",
						"example": 12
					},
					{
						"name": "creative",
						"in": "query",
						"description": "Creative identifier",
						"required": false,
						"type": "integer",
						"example": 1
					},
					{
						"name": "typeIds",
						"in": "query",
						"description": "List of types / offer classes (1 = Default, 2 = Ref, 3 = offline)",
						"required": false,
						"type": "string",
						"example": "1,3"
					},
					{
						"name": "sort",
						"in": "query",
						"description": "Sorting. Valid values: STATS_TS. \n  * The default sorting order is ascending. Sign '-' in front of the field - the reverse order of sorting (descending)",
						"required": false,
						"type": "string",
						"example": "-stats_ts"
					},
					{
						"name": "statusUpdatedStart",
						"in": "query",
						"description": "The beginning of the period when the order has changed the status",
						"required": false,
						"type": "string",
						"example": "2018-01-01"
					},
					{
						"name": "statusUpdatedEnd",
						"in": "query",
						"description": "End of the period when the order has changed the status",
						"required": false,
						"type": "string",
						"example": "2018-01-01"
					}
				],
				"responses": {
					"200": {
						"description": "Search results",
						"schema": {
							"$ref": "#/definitions/getTransactions"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "transactions",
										"id": 273,
										"attributes": {
											"stats_ts": "2018-03-27 18:00:00",
											"product": "",
											"product_link": "",
											"link": "",
											"order_number": "RU170324-476811",
											"order_time": "2018-03-27 18:08:24",
											"order_status": "rejected",
											"transaction_time": "2018-03-27 18:00:00",
											"revenue": 99,
											"commission_user": 4.95,
											"creative_title": "test",
											"sub_title": null,
											"user_click_id": "",
											"offer_type": "lamoda",
											"offer_id": 1,
											"type_id": 1,
											"currency": "USD",
											"country_destination": "",
											"date": "27.02.2018",
											"productsImages": [
												{
													"productId": 33040093937,
													"image": "http://iherb.cdn.com/kf/33040093937.jpg"
												},
												{
													"productId": 33040093938,
													"image": "http://iherb.cdn.com/kf/33040093938.jpg"
												}
											],
											"productsIds": [
												33040093937,
												33040093938
											]
										}
									},
									{
										"type": "transactions",
										"id": 274,
										"attributes": {
											"stats_ts": "2017-08-27 18:00:00",
											"product": "",
											"product_link": "",
											"link": "",
											"order_number": "RU170324-213919",
											"order_time": "2018-03-27 18:08:24",
											"order_status": "rejected",
											"transaction_time": "2018-03-27 18:00:00",
											"revenue": 251,
											"commission_user": 12.55,
											"creative_title": "test",
											"sub_title": null,
											"user_click_id": "",
											"offer_type": "lamoda",
											"offer_id": 1,
											"type_id": 1,
											"currency": "USD",
											"country_destination": "",
											"date": "27.02.2018"
										}
									}
								],
								"meta": {
									"totalFound": 15,
									"hasNext": 1
								},
								"result": true,
								"request": {
									"offerIds": "22,1",
									"perPage": 100,
									"tsFrom": "2018-03-01",
									"tsTo": "2018-04-01"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect one of the parameters",
						"schema": {
							"$ref": "#/definitions/422_Errors_Transactions"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "perPage must be a maximum of 1000."
									},
									{
										"error": 422001,
										"error_description": "tsTo is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/purses/balance": {
			"get": {
				"tags": [
					"balance"
				],
				"summary": "Get balance",
				"description": "We get the balance of the current user by currency",
				"parameters": [
					{
						"name": "Content-Type",
						"in": "header",
						"description": "content type string: application/json or application/x-www-form-urlencoded",
						"required": false,
						"type": "string"
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "currency",
						"in": "query",
						"description": "currency types. The delimiter must be just a comma, without spaces or other characters!",
						"required": false,
						"type": "string",
						"example": "RUB,USD"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"schema": {
							"properties": {
								"data": {
									"items": {
										"properties": {
											"type": {
												"type": "string",
												"default": "balance"
											},
											"id": {
												"description": "currency",
												"type": "string",
												"example": "USD"
											},
											"attributes": {
												"properties": {
													"availableAmount": {
														"description": "User Balance",
														"type": "float"
													},
													"holdAmount": {
														"description": "Unconfirmed Balance of the User",
														"type": "float"
													},
													"allMoney": {
														"description": "The amount of money that went to the user's balance",
														"type": "float"
													},
													"summaryPayments": {
														"description": "Passed total user",
														"type": "float"
													},
													"existBalance": {
														"description": "Checks the existence of a balance. All fields can be 0, but the balance exists, simply is currently in the processing.",
														"type": "integer"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"meta": {
									"properties": {
										"userBlocked": {
											"description": "User status 'blocked'",
											"type": "boolean"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "balance",
										"id": "USD",
										"attributes": {
											"availableAmount": -0.88,
											"holdAmount": 0.18,
											"allMoney": 4.18,
											"summaryPayments": 100,
											"existBalance": 1
										}
									},
									{
										"type": "balance",
										"id": "RUB",
										"attributes": {
											"availableAmount": 52.43,
											"holdAmount": 51.69,
											"allMoney": 1746,
											"summaryPayments": 2000,
											"existBalance": 1
										}
									}
								],
								"meta": {
									"userBlocked": false
								},
								"result": true,
								"request": {
									"currency": [
										"USD",
										"RUB"
									]
								}
							}
						}
					},
					"400": {
						"description": "Removed increasing currency type",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400021,
										"error_description": "check currency format"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/balance/history": {
			"get": {
				"tags": [
					"balance"
				],
				"summary": "History of the balance of the user",
				"description": "Get the history of the balance of the current user during the specified period",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "date_from",
						"in": "query",
						"description": "Home The period",
						"required": true,
						"type": "string",
						"example": "2019-12-30"
					},
					{
						"name": "date_to",
						"in": "query",
						"description": "End of period",
						"required": true,
						"type": "string",
						"example": "2019-12-30"
					},
					{
						"name": "type",
						"in": "query",
						"description": "Type of transaction",
						"required": true,
						"type": "string",
						"enum": [
							"all",
							"cashback",
							"payments",
							"refund",
							"compensation",
							"referral",
							"charity",
							"penalty"
						],
						"example": "payments"
					}
				],
				"responses": {
					"200": {
						"description": "Valid Json API",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "balance",
										"id": "",
										"attributes": {
											"date": "2019-05-13",
											"amount": 1460.46,
											"currency": "RUB",
											"status": "success",
											"purse_type": "qiwi",
											"type": "payments",
											"purse": "*********185"
										}
									},
									{
										"type": "balance",
										"id": "",
										"attributes": {
											"date": "2019-05-12",
											"amount": 55.01,
											"currency": "USD",
											"status": "success",
											"purse_type": "",
											"type": "referral",
											"purse": ""
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Error validating parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "type is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/balance/history/summary": {
			"get": {
				"tags": [
					"balance"
				],
				"summary": "A summable history of the user's balance",
				"description": "Get a summary history of the current user's balance in the specified period with a correction for the user's time. The interval should not exceed 24 hours",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "dateFrom",
						"in": "query",
						"description": "Beginning of period. Date indicating Timesons (ISO 8601). The string must be in URL_ENCODE.",
						"required": true,
						"type": "string",
						"example": "2019-08-09T18:31:42+03:30"
					},
					{
						"name": "dateTo",
						"in": "query",
						"description": "End of the period. Date indicating Timesons (ISO 8601). The string must be in URL_ENCODE.",
						"required": true,
						"type": "string",
						"example": "2019-08-11T18:31:42+03:30"
					}
				],
				"responses": {
					"200": {
						"description": "Valid Json API",
						"examples": {
							"application/json": {
								"data": {
									"type": "balance-history-summary",
									"id": "",
									"attributes": {
										"USD": {
											"balanceToday": 0,
											"balanceHoldToday": 0.11
										},
										"EUR": {
											"balanceToday": 0,
											"balanceHoldToday": 200
										},
										"RUB": {
											"balanceToday": 0,
											"balanceHoldToday": 0.11
										},
										"GBP": {
											"balanceToday": 0,
											"balanceHoldToday": 0
										}
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Error validating parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "type is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/geo-data": {
			"get": {
				"tags": [
					"user/geo-data"
				],
				"summary": "User location information",
				"description": "Get information about the location of the current user, from the profile or by IP",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Geo-data",
						"schema": {
							"properties": {
								"data": {
									"description": "Class GetGeoDataHandler",
									"properties": {
										"type": {
											"description": "Class GetGeoDataHandler",
											"type": "string",
											"default": "user-geo-data"
										},
										"id": {
											"description": "Class GetGeoDataHandler",
											"type": "integer",
											"default": ""
										},
										"attributes": {
											"description": "Class GetGeoDataHandler",
											"properties": {
												"userId": {
													"description": "User ID (0 for unauthorized)",
													"type": "integer",
													"default": 0,
													"example": 1
												},
												"cityId": {
													"description": "Cities ID, 0 If failed to find the city in the database",
													"type": "integer",
													"default": 0,
													"example": 66
												},
												"regionCode": {
													"description": "Region ID, 0 If failed to find the region in the database",
													"type": "integer",
													"default": 0,
													"example": 66
												},
												"countryCode": {
													"description": "Code of the country",
													"type": "string",
													"default": "",
													"example": "RU"
												}
											},
											"type": "object"
										},
										"result": {
											"description": "Flag Indicating that when executing the query no errors",
											"type": "boolean",
											"default": "true"
										},
										"request": {
											"description": "Class GetGeoDataHandler",
											"type": "array"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						}
					}
				}
			}
		},
		"/user/level": {
			"get": {
				"tags": [
					"user/level"
				],
				"summary": "User level information",
				"description": "Get user-level information",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "User level",
						"schema": {
							"properties": {
								"data": {
									"properties": {
										"type": {
											"type": "string",
											"default": "user-level"
										},
										"id": {
											"type": "integer",
											"default": ""
										},
										"attributes": {
											"properties": {
												"level": {
													"description": "User level",
													"type": "string",
													"enum": [
														"novice",
														"confident",
														"advanced"
													],
													"example": "novice"
												},
												"compensations_limit": {
													"description": "Limit on the number of compensation requests per month",
													"type": "integer",
													"example": 1
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								},
								"result": {
									"type": "boolean",
									"default": true
								},
								"request": {
									"type": "array"
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "user-level",
									"id": "",
									"attributes": {
										"level": "novice",
										"compensations_limit": 1,
										"compensations_used": 0
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/notifications": {
			"get": {
				"tags": [
					"user/notifications"
				],
				"summary": "Get user notifications",
				"description": "Get user notifications",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Language notifications",
						"required": false,
						"type": "string",
						"example": "ru"
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of records on the page",
						"required": false,
						"type": "integer",
						"default": 20,
						"maximum": 100,
						"example": 20
					},
					{
						"name": "offset",
						"in": "query",
						"description": "Bias",
						"required": false,
						"type": "integer",
						"default": 0,
						"example": 0
					}
				],
				"responses": {
					"200": {
						"description": "List of notifications",
						"examples": {
							"application/json": {
								"data": {
									"type": "notifications",
									"id": "",
									"attributes": [
										{
											"id": 209,
											"link": "",
											"message": "some message text here",
											"read": 1
										}
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/notifications/read": {
			"post": {
				"tags": [
					"user/notifications"
				],
				"summary": "Mark notification as read",
				"description": "Change notification as read",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"notification_id"
							],
							"properties": {
								"notification_id": {
									"description": "ID of the notification that needs to be marked as read",
									"type": "integer",
									"example": 209
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "If you managed to change as read, it is returned by an empty valid JSON API Response"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/oauth/client": {
			"get": {
				"tags": [
					"oauth/clients"
				],
				"summary": "Get Oauth Client User",
				"description": "Get a list of user's oauth client",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "user-clients",
									"id": "",
									"attributes": [
										{
											"client_id": "zofthIYQCErgJWkAmjvpwG5O17TNc46M",
											"client_secret": "U8jFChmf0MW6YOKxrPV9a2NAy3DQGzw4"
										},
										{
											"client_id": "12fthIYQCErgJWkAmjvpwG5O17TNc46M",
											"client_secret": "12jFChmf0MW6YOKxrPV9a2NAy3DQGzw4"
										}
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"oauth/clients"
				],
				"summary": "Create Oauth Client.",
				"description": "Creates Client for further access to the API through Client_Credential",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "create-client",
									"id": "",
									"attributes": {
										"client_id": "zofthIYQCErgJWkAmjvpwG5O17TNc46M",
										"client_secret": "U8jFChmf0MW6YOKxrPV9a2NAy3DQGzw4"
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/oauth/client/{client_id}": {
			"delete": {
				"tags": [
					"oauth/clients"
				],
				"summary": "Delete Oauth Client User",
				"description": "Oath Client Current User will be deleted",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "client_id",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "delete-client",
									"id": "",
									"attributes": {
										"deleted": 1
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/payment/init": {
			"get": {
				"tags": [
					"user/payments"
				],
				"summary": "User payment init",
				"description": "Getting information on payments, wallets, commissions",
				"parameters": [
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "Name names of wallets",
						"required": false,
						"type": "string"
					},
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Information on payments, wallets, commissions",
						"schema": {
							"$ref": "#/definitions/getPaymentInit"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "payment-init",
										"id": "QIWI",
										"attributes": {
											"name": "QIWI",
											"isAllowedForMobile": true,
											"info": [
												{
													"commissionPercent": 6,
													"commissionFix": 0,
													"currency": "RUB",
													"min": 500
												},
												{
													"commissionPercent": 6,
													"commissionFix": 0,
													"currency": "USD",
													"min": 10
												}
											]
										}
									},
									{
										"type": "payment-init",
										"id": "yandex_money",
										"attributes": {
											"name": "Yandex.Money",
											"isAllowedForMobile": true,
											"info": [
												{
													"commissionPercent": 6,
													"commissionFix": 0,
													"currency": "RUB",
													"min": 500
												},
												{
													"commissionPercent": 6,
													"commissionFix": 0,
													"currency": "USD",
													"min": 10
												}
											]
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/payments": {
			"get": {
				"tags": [
					"user/payments"
				],
				"summary": "Get user payments",
				"description": "Getting a list of ordered user payments",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "List of filters",
						"schema": {
							"required": [],
							"properties": {
								"page": {
									"description": "page",
									"type": "integer",
									"default": 1,
									"example": 1
								},
								"perPage": {
									"description": "Number of records for one request",
									"type": "integer",
									"default": 10,
									"example": 10
								},
								"paymentIds": {
									"description": "Payout identifiers, for example - 4,8,15,16,23,42",
									"type": "string",
									"example": "4,8,15,16,23,42"
								},
								"statuses": {
									"description": "Status (s) payments, through commas",
									"required": false,
									"type": "string",
									"default": "success,pending,banned,waiting,error",
									"enum": [
										"success",
										"pending",
										"banned",
										"waiting",
										"error",
										"deleted"
									],
									"example": "success"
								},
								"sort": {
									"description": "Sort, valid values Created_at. The default sorting order is ascending. The sign '-' in front of the field sets the opposite order of sorting descending.",
									"type": "string",
									"example": "-created_at"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "List of payout",
						"schema": {
							"$ref": "#/definitions/getPayment"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "payments-history",
										"id": 273,
										"attributes": {
											"code": "*********785",
											"status": "success",
											"purse_type": "wmz",
											"purse": "*********830",
											"amount": 800,
											"currency": "USD",
											"created_at": "2017-12-17 13:40:37",
											"paid_at": "2020-09-08 08:24:51",
											"invoice": "https://cdn1.epn.bz/public/file.pdf",
											"statement": "https://cdn1.epn.bz/public/file.pdf",
											"statement_detail": "https://cdn1.epn.bz/public/file.pdf",
											"isCharity": false
										}
									},
									{
										"type": "payments-history",
										"id": 274,
										"attributes": {
											"code": "*********786",
											"status": "success",
											"purse_type": "mc_rub",
											"purse": "5321 **** **** 1234",
											"amount": 500,
											"currency": "RUB",
											"created_at": "2017-12-17 13:40:38",
											"paid_at": "2020-09-08 08:24:52",
											"invoice": "https://cdn1.epn.bz/public/file.pdf",
											"statement": "https://cdn1.epn.bz/public/file.pdf",
											"statement_detail": "https://cdn1.epn.bz/public/file.pdf",
											"isCharity": false
										}
									}
								],
								"meta": {
									"totalFound": 23,
									"hasNext": 1
								},
								"result": true,
								"request": {
									"page": 1,
									"perPage": 10
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect Page or PERPAGE",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "page must be a number."
									},
									{
										"error": 422001,
										"error_description": "perPage must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/payment/order": {
			"post": {
				"tags": [
					"user/payments"
				],
				"summary": "User payment order",
				"description": "Order payment",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"description": "Order payment",
						"schema": {
							"required": [
								"currency",
								"purseId",
								"amount"
							],
							"properties": {
								"currency": {
									"description": "Currency",
									"type": "string",
									"example": "USD"
								},
								"purseId": {
									"description": "Eid Wallet",
									"type": "integer",
									"example": 10
								},
								"amount": {
									"description": "Output amount",
									"type": "float",
									"example": 1200
								},
								"code": {
									"description": "Confirmation code output",
									"type": "string",
									"example": 23442
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Order payment",
						"schema": {
							"$ref": "#/definitions/orderPayment"
						},
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "order-payment",
										"id": 273,
										"attributes": {
											"status": "waiting",
											"purse_type": "wmz",
											"purse": "*********830",
											"amount": 1000,
											"currency": "USD",
											"created_at": "2017-12-17 13:40:37"
										}
									},
									{
										"type": "order-payment",
										"id": 274,
										"attributes": {
											"status": "waiting",
											"purse_type": "wmz",
											"purse": "*********830",
											"amount": 200,
											"currency": "USD",
											"created_at": "2017-12-17 13:40:37"
										}
									}
								],
								"result": true,
								"request": {
									"purse_id": 10,
									"currency": "USD",
									"amount": 1200
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect input parameters",
						"schema": {
							"$ref": "#/definitions/422_invalid_param_by_order_payment"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "purse_id is required."
									},
									{
										"error": 422001,
										"error_description": "purse_id must be a number."
									},
									{
										"error": 422001,
										"error_description": "currency is required."
									},
									{
										"error": 422001,
										"error_description": "currency must be a string."
									},
									{
										"error": 422001,
										"error_description": "Not allowed currency"
									},
									{
										"error": 422001,
										"error_description": "amount is required."
									},
									{
										"error": 422001,
										"error_description": "amount must be a number."
									},
									{
										"error": 422100,
										"error_description": "Invalid param"
									},
									{
										"error": 422102,
										"error_description": "Amount not correct"
									},
									{
										"error": 422103,
										"error_description": "Limit request exceeded"
									},
									{
										"error": 422104,
										"error_description": "Not correct purse for currency"
									},
									{
										"error": 422105,
										"error_description": "Payout is available with a larger amount"
									},
									{
										"error": 422106,
										"error_description": "Purse not found"
									},
									{
										"error": 422107,
										"error_description": "Payments is blocked"
									},
									{
										"error": 422108,
										"error_description": "Amount balance exceeded"
									},
									{
										"error": 422110,
										"error_description": "Add address by WireTransfer card."
									},
									{
										"error": 422111,
										"error_description": "WireTransfer contract signed"
									},
									{
										"error": 400043,
										"error_description": "Need confirm payout"
									},
									{
										"error": 422112,
										"error_description": "Payment is hold"
									},
									{
										"error": 400009,
										"error_description": "Wrong confirmation code."
									},
									{
										"error": 400046,
										"error_description": "Check code is limited"
									},
									{
										"error": 422001,
										"error_description": "Not allowed length of code"
									},
									{
										"error": 422001,
										"error_description": "code must be a number."
									},
									{
										"error": 422123,
										"error_description": "Contract currency is not specified"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/avatar": {
			"put": {
				"tags": [
					"user/profile"
				],
				"summary": "Save user avatar",
				"description": "Saving the URL on which is the user avatar obtained when [Download] (# Tag / CDN% 2FPaths% 2fcdn.epn.bz ~ 1upload% 2FPOST)",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"in": "body",
						"schema": {
							"required": [
								"url"
							],
							"properties": {
								"url": {
									"description": "Url Avatar, obtained using [Method] (# Tag / CDN% 2FPaths% 2fcdn.epn.bz ~ 1upLoad% 2Fpost)",
									"type": "string",
									"example": "https://cdn1.epn.bz/public/2bddc0caf96f3a01b33c8e2f85652525.jpeg"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns a positive result after saving.",
						"examples": {
							"application/json": {
								"data": {
									"type": "avatar",
									"id": "",
									"attributes": {
										"link": "https://cdn/image/url.jpg"
									}
								},
								"result": true,
								"request": {
									"url": "https://cdn/image/url.jpg"
								}
							}
						}
					},
					"422": {
						"description": "Incorrect URL",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "url is required."
									},
									{
										"error": 422001,
										"error_description": "Not allowed url"
									}
								],
								"result": false
							}
						}
					}
				}
			},
			"delete": {
				"tags": [
					"user/profile"
				],
				"summary": "Delete user avatar",
				"description": "Deleting the URL binding avatar and user.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns a positive result after saving.",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": []
							}
						}
					},
					"500": {
						"description": "Error deleting.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500112,
										"error_description": "dont have avatar"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/user/profile/email/bind": {
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Binding mail.",
				"description": "Binding mail, if the user is registered through the social network.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "Accept-Language",
						"in": "header",
						"description": "language (for email language)",
						"required": false,
						"type": "string",
						"example": "en"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"email"
							],
							"properties": {
								"email": {
									"description": "Email for binding.",
									"type": "string",
									"example": "test@test.com"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Confirm mail binding.",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": []
							}
						}
					},
					"400": {
						"description": "Custom error.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400016,
										"error_description": "Email already exist"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters ..",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "email is required."
									}
								],
								"result": false
							}
						}
					},
					"500": {
						"description": "Server error.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500000,
										"error_description": "server error while bind email."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/change-password": {
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "a change of the pin code",
				"description": "Changing user password",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"current_password",
								"new_password",
								"confirm_new_password"
							],
							"properties": {
								"current_password": {
									"description": "Current password",
									"type": "string",
									"example": "Qwerty123"
								},
								"new_password": {
									"description": "New password",
									"type": "string",
									"example": "Qwerty321"
								},
								"confirm_new_password": {
									"description": "New password (repeat)",
									"type": "string",
									"example": "Qwerty321"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "user",
									"id": ""
								},
								"result": true,
								"request": {
									"current_password": "Qwerty123",
									"new_password": "Qwerty321",
									"confirm_new_password": "Qwerty321"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation error",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500101,
										"error_description": "Current password not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/checkConfirmedData": {
			"get": {
				"tags": [
					"user/checkConfirmedData"
				],
				"summary": "Get confirmed user`s data",
				"description": "Receiving data on the availability of user confirmed email or phone",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns the availability of user confirmed email or phone",
						"schema": {
							"property": "data",
							"type": "array",
							"items": {
								"properties": {
									"type": {
										"description": "Type of resource",
										"type": "string",
										"default": "checkConfirmedData"
									},
									"id": {
										"type": "string",
										"default": ""
									},
									"attributes": {
										"properties": {
											"hasConfirmedData": {
												"description": "Availability of user confirmed phone or mail",
												"type": "boolean"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/check-is-new": {
			"get": {
				"tags": [
					"user/profile"
				],
				"summary": "New customer",
				"description": "Returns information about the new user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "New customer",
						"examples": {
							"application/json": {
								"data": {
									"type": "check-user-is-new",
									"id": "",
									"attributes": {
										"isNew": true
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile": {
			"get": {
				"tags": [
					"user/profile"
				],
				"summary": "User Profile",
				"description": "Obtaining user data",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "accept language string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns user profile data in JSON format",
						"examples": {
							"application/json": {
								"data": {
									"type": "getProperty",
									"id": 1,
									"attributes": [
										{
											"id": 2977634,
											"profileImage": "https://cdn.wepn.bz/public/2c8e21f22d8d81797c80b10fc45af9e64.jpeg",
											"fullName": "tyet yesy",
											"userName": "cashback@mailforspam.com",
											"email": "ds@mailforspam.com",
											"phone": "************210",
											"phoneConfirmed": "confirmed_by_sms",
											"birthday": "1983-11-23",
											"gender": "man",
											"language": "en",
											"isConfirmed": 1,
											"isPasswordSet": true,
											"hasSignupPromocodeError": 0,
											"socialNetworks": [
												"fb",
												"vk"
											],
											"subscriptions": {
												"news": true,
												"system": true,
												"orders": true
											},
											"geo": {
												"country_name": "Соединенные Штаты Америки",
												"country_code": "US",
												"region_name": "",
												"region_code": "",
												"city_name": "",
												"city_id": 0
											},
											"lastLoginAt": "2019-03-12 07:20:02",
											"firstLogin": false,
											"onBoardWatched": true,
											"inviteHash": "jv4o8hv123",
											"wmOnboarding": {
												"has_placement": true,
												"has_allowed_placement": true,
												"has_affiliate_link": false,
												"hide_comfort_steps": false
											}
										}
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Editing profile",
				"description": "Change user profile",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [],
							"properties": {
								"fullname": {
									"description": "Username",
									"type": "string",
									"example": "John John"
								},
								"birthday": {
									"description": "Birthday. Y-M-D format",
									"type": "string",
									"example": "1995-11-11"
								},
								"gender": {
									"description": "Floor",
									"type": "string",
									"enum": [
										"man",
										"woman"
									]
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns information on the user after data change",
						"examples": {
							"application/json": {
								"data": {
									"type": "profile-edit",
									"id": 1,
									"attributes": {
										"id": 208,
										"avatar": "",
										"fullname": "test test",
										"username": "test",
										"email": "test.ru",
										"phone": "",
										"phone_confirmed": "waiting",
										"birthday": "2018-11-11",
										"gender": 1,
										"is_confirmed": 1,
										"social_network": [],
										"subscriptions": {
											"system": false,
											"news": false,
											"orders": false
										},
										"geo": {
											"country_name": "",
											"country_code": "",
											"region_name": "",
											"region_code": 0,
											"city_name": "",
											"city_id": 0
										}
									}
								},
								"result": true,
								"request": {
									"fullname": "test test",
									"birthDay": "2018-11-11",
									"gender": "man"
								}
							}
						}
					},
					"400": {
						"description": "Client error",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400106,
										"error_description": "user profile not edited."
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "BirthDay not correct"
									},
									{
										"error": 422001,
										"error_description": "Sex not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"user/profile"
				],
				"summary": "Removing user account",
				"description": "Request for deleting a user of his account",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"confirm_value"
							],
							"properties": {
								"confirm_value": {
									"description": "confirmation code",
									"type": "integer",
									"example": 98765
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "user",
									"id": ""
								},
								"result": true,
								"request": {
									"confirm_value": 123456
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation error",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Code not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/domains": {
			"get": {
				"tags": [
					"user/profile"
				],
				"summary": "Parked domains",
				"description": "Getting a list of parked user domains",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "status",
						"in": "query",
						"description": "Domain status",
						"required": false,
						"type": "string",
						"example": "active,disabled"
					},
					{
						"name": "type",
						"in": "query",
						"description": "Domain type",
						"required": false,
						"type": "string",
						"example": "redirect,ref"
					}
				],
				"responses": {
					"200": {
						"description": "Returns a list of parked domains in JSON format",
						"examples": {
							"application/json": {
								"data": {
									"type": "userDomains",
									"id": 1,
									"attributes": [
										{
											"user_id": 1,
											"domain": "example-domain.com",
											"type": "redirect",
											"hash": "5b00b8bdf696c7c646c2cdb4f7e7eb31",
											"status": "active",
											"added_at": "2019-09-09 10:00:00",
											"username": "username",
											"fullname": "Иванов Иван",
											"user_lang": "ru"
										}
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Adding a parking domain",
				"description": "Adding a parking domain",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"domain",
								"type"
							],
							"properties": {
								"domain": {
									"description": "Domain",
									"type": "string",
									"example": "domain.ru"
								},
								"type": {
									"description": "Domain type.",
									"type": "string",
									"enum": [
										"redirect",
										"ref"
									],
									"example": "redirect"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Answer in case of successful addition.",
						"examples": {
							"application/json": {
								"data": {
									"type": "addUserDomain",
									"id": 1
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Domain already exists."
									},
									{
										"error": 422001,
										"error_description": "domain must be a string."
									},
									{
										"error": 422001,
										"error_description": "domain is required."
									},
									{
										"error": 422001,
										"error_description": "type must be a string."
									},
									{
										"error": 422001,
										"error_description": "type is required."
									},
									{
										"error": 422001,
										"error_description": "Field `type` not valid, got `incorrect type`."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/confirmEmail": {
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Mail confirmation request",
				"description": "User mail confirmation request",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "Accept-Language",
						"in": "header",
						"description": "language (for email language)",
						"required": true,
						"type": "string",
						"example": "es"
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "emailConfirm",
									"id": 123,
									"attributes": {
										"email": "user@email.com",
										"resend_timeout": 120
									}
								},
								"result": true
							}
						}
					},
					"400": {
						"description": "Time-out is exceeded to re-send a letter to confirm",
						"schema": {
							"properties": {
								"errors": {
									"type": "array",
									"items": {
										"properties": {
											"error": {
												"type": "integer",
												"default": 400050
											},
											"error_description": {
												"description": "Confirmation send timeout",
												"type": "string"
											}
										}
									}
								},
								"meta": {
									"type": "array",
									"items": {
										"properties": {
											"retryAfter": {
												"description": "Indicates how many seconds you can repeat the request",
												"type": "integer",
												"enum": [
													115
												]
											}
										}
									}
								},
								"result": {
									"type": "boolean",
									"default": false
								}
							},
							"type": "object"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400050,
										"error_description": "Confirmation send timeout"
									}
								],
								"meta": {
									"retryAfter": 115
								},
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation error",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400010,
										"error_description": "Email already confirmed"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/geo": {
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Update geolocation profile information",
				"description": "Update geolocation profile information",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"country_code"
							],
							"properties": {
								"country_code": {
									"description": "country code ISO 3166-1 (RU, EN, ES, CN, etc...)",
									"type": "string",
									"example": "RU"
								},
								"region_code": {
									"description": "Code region",
									"type": "string",
									"example": 73
								},
								"city_id": {
									"description": "Cities ID",
									"type": "string",
									"example": 1124
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": ""
					}
				}
			}
		},
		"/user/profile/subscriptions": {
			"put": {
				"tags": [
					"user/profile"
				],
				"summary": "Management Signs",
				"description": "Managing user subscriptions",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "Access Token String (optional parameter, if there is no need to transfer HASH)",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"type",
								"status"
							],
							"properties": {
								"type": {
									"description": "Type of subscription",
									"type": "string",
									"enum": [
										"news",
										"system",
										"orders"
									],
									"example": "news"
								},
								"status": {
									"description": "Subscription / recording",
									"type": "integer",
									"enum": [
										0,
										1
									],
									"example": 0
								},
								"hash": {
									"description": "An optional hash parameter for unauthorized users (this parameter will only have a value in the absence of X-Access-Token)",
									"type": "string",
									"example": "lqr1v3xm0wy84nu12bcd5ojffacv9i2c"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "user",
									"id": ""
								},
								"result": true,
								"request": {
									"type": "news",
									"status": 0,
									"hash": "lqr1v3xm0wy84nu12bcd5ojffacv9i2c"
								}
							}
						}
					},
					"422": {
						"description": "Validation error",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "type is required."
									},
									{
										"error": 422001,
										"error_description": "Not allowed type '' for field type."
									},
									{
										"error": 422001,
										"error_description": "status must be a number."
									},
									{
										"error": 422001,
										"error_description": "status must be set."
									},
									{
										"error": 422001,
										"error_description": "status must be between 0 and 1."
									},
									{
										"error": 422001,
										"error_description": "status must be 0 for unauthorized users."
									},
									{
										"error": 422001,
										"error_description": "hash must be set for unauthorized users."
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/user/profile/password/recovery/email": {
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Password recovery by email",
				"description": "The user specifies email, we send a link to recover password \n\n Reference: `https: //spa.epn.bz/user/profile/password? Hash = B2DA20A7CCB1190D0B8E019BA637848F & lockpaymentshours = 24`",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"ssid_token",
								"email"
							],
							"properties": {
								"ssid_token": {
									"description": "SSID Tocken Received in Query * Request_Limit / SSID_TOKEN *",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"email": {
									"description": "Email user",
									"type": "string",
									"example": "test11@gmail.com"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "all OK"
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/user/profile/password": {
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Installing user password",
				"description": "Installing a new password",
				"parameters": [
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"ssid_token",
								"password",
								"hash"
							],
							"properties": {
								"ssid_token": {
									"description": "SSID Tocken Received in Query * Request_Limit / SSID_TOKEN *",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								},
								"password": {
									"description": "New password",
									"type": "string",
									"example": "Rb78gHn$3J123"
								},
								"hash": {
									"description": "Hash from the letter (there will be GET parameters in the link to restore the password)",
									"type": "string",
									"example": "9e69416ce3231213b32012154f85d19a"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": ""
					},
					"429": {
						"description": "The query limit is exceeded, [CAPTCHA] is required (# Tag / Captcha)",
						"schema": {
							"$ref": "#/definitions/429NeedCaptcha"
						}
					}
				}
			}
		},
		"/user/profile/phone/bind/confirm": {
			"post": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Confirm new phone number.",
				"description": "Confirmation of the new phone number using the code sent to the phone.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"code",
								"phone"
							],
							"properties": {
								"code": {
									"description": "Code received for phone.",
									"type": "string",
									"example": "John John"
								},
								"phone": {
									"description": "Phone number",
									"type": "string",
									"example": 79531231212
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Confirm the phone number.",
						"examples": {
							"application/json": {
								"data": {
									"type": "confirm-phone",
									"id": "",
									"attributes": {
										"phone": "*******234",
										"status": "confirmed_by_sms"
									}
								},
								"result": true,
								"request": {
									"phone": 79531231234,
									"code": 1234
								}
							}
						}
					},
					"400": {
						"description": "Invalid query",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400045,
										"error_description": "Code not exist"
									},
									{
										"error": 400105,
										"error_description": "Need verify email first"
									},
									{
										"error": 400046,
										"error_description": "Check code is limited"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "phone is required"
									},
									{
										"error": 422001,
										"error_description": "code is required"
									},
									{
										"error": 422001,
										"error_description": "Phone number not correct"
									},
									{
										"error": 422001,
										"error_description": "hasAccessToOldPhone must be between 0 and 1."
									},
									{
										"error": 422001,
										"error_description": "hasAccessToOldPhone must be a number."
									},
									{
										"error": 422001,
										"error_description": "Code type not correct"
									},
									{
										"error": 422001,
										"error_description": "Phone number not correct"
									}
								],
								"result": false
							}
						}
					},
					"500": {
						"description": "Server errors",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500000,
										"error_description": "server error while confirm phone"
									},
									{
										"error": 500105,
										"error_description": "Confirmation impossible"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/phone/bind/code": {
			"get": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Get code for a new phone",
				"description": "Getting a code to bind your phone to the account.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "phone",
						"in": "query",
						"description": "Phone number",
						"required": true,
						"type": "string",
						"example": 79531231212
					},
					{
						"name": "transport",
						"in": "query",
						"description": "How to send",
						"required": false,
						"type": "string",
						"default": "sms",
						"enum": [
							"sms",
							"call"
						],
						"example": "call"
					}
				],
				"responses": {
					"200": {
						"description": "Get code to phone number.",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": {
									"phone": 79531231234
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters are transmitted",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "phone is required"
									},
									{
										"error": 422001,
										"error_description": "Phone number not correct"
									},
									{
										"error": 422001,
										"error_description": "transport not correct"
									},
									{
										"error": 422001,
										"error_description": "transport must be a string."
									}
								],
								"result": false
							}
						}
					},
					"500": {
						"description": "Server errors",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500000,
										"error_description": "Error code generation"
									},
									{
										"error": 500108,
										"error_description": "Error. Phone already confirmed"
									}
								],
								"result": false
							}
						}
					}
				},
				"deprecated": true,
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/phone/change/confirm": {
			"post": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Confirm the old phone number.",
				"description": "Confirmation of the old phone number using the code sent to the phone.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"code",
								"phone"
							],
							"properties": {
								"code": {
									"description": "Code received for phone.",
									"type": "string",
									"example": "John John"
								},
								"phone": {
									"description": "Phone number",
									"type": "string",
									"example": 79531231212
								},
								"has_access_to_old_phone": {
									"description": "Availability of access to the old phone number",
									"type": "boolean",
									"default": 0,
									"enum": [
										0,
										1
									],
									"example": 1
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Confirm the phone number.",
						"examples": {
							"application/json": {
								"data": {
									"type": "confirm-phone",
									"id": "",
									"attributes": {
										"phone": "*******234",
										"status": "waiting"
									}
								},
								"result": true,
								"request": {
									"phone": 79531231234,
									"code": 1234,
									"has_access_to_old_phone": 1
								}
							}
						}
					},
					"400": {
						"description": "Incorrect code.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400045,
										"error_description": "Code not exist"
									},
									{
										"error": 400046,
										"error_description": "Check code is limited"
									},
									{
										"error": 400062,
										"error_description": "Phone was not confirmed"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "phone is required"
									},
									{
										"error": 422001,
										"error_description": "has_access_to_old_phone must be between 0 and 1."
									},
									{
										"error": 422001,
										"error_description": "has_access_to_old_phone must be a number."
									},
									{
										"error": 422001,
										"error_description": "Code type not correct"
									},
									{
										"error": 422001,
										"error_description": "Phone number not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/phone/change/code": {
			"get": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Get code for an old phone",
				"description": "Getting a code to change the phone.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "phone",
						"in": "query",
						"description": "New phone number",
						"required": true,
						"type": "string",
						"example": 79531231212
					},
					{
						"name": "current_phone",
						"in": "query",
						"description": "Old phone number",
						"required": true,
						"type": "string",
						"example": 79531231212
					},
					{
						"name": "has_access_to_old_phone",
						"in": "query",
						"description": "Availability of access to the old phone number",
						"required": false,
						"type": "boolean",
						"default": 0,
						"enum": [
							0,
							1
						],
						"example": 1
					},
					{
						"name": "transport",
						"in": "query",
						"description": "How to send",
						"required": false,
						"type": "string",
						"default": "sms",
						"enum": [
							"sms",
							"call"
						],
						"example": "call"
					}
				],
				"responses": {
					"200": {
						"description": "Get code to phone number.",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": {
									"current_phone": 79531231234,
									"phone": 79531231235,
									"has_access_to_old_phone": 1
								}
							}
						}
					},
					"400": {
						"description": "Invalid query",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 400061,
										"error_description": "current phone not correct"
									},
									{
										"error": 400041,
										"error_description": "timeout 1 minute"
									},
									{
										"error": 400042,
										"error_description": "timeout 1 day"
									},
									{
										"error": 400062,
										"error_description": "phone was not confirmed"
									},
									{
										"error": 400060,
										"error_description": "new phone and currentPhone equal"
									}
								],
								"result": false
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect data.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "phone is required"
									},
									{
										"error": 422001,
										"error_description": "Phone number not correct"
									},
									{
										"error": 422001,
										"error_description": "transport not correct"
									},
									{
										"error": 422001,
										"error_description": "has_access_to_old_phone must be between 0 and 1."
									},
									{
										"error": 422001,
										"error_description": "has_access_to_old_phone must be a number."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/phone/change/send-email": {
			"post": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Send email letter.",
				"description": "Send email email to confirm your phone.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Confirmation of sending a letter by mail.",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"500": {
						"description": "Custom error.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500107,
										"error_description": "Retry send email is limited"
									},
									{
										"error": 500108,
										"error_description": "Phone is confirmed"
									},
									{
										"error": 500109,
										"error_description": "Phone is not confirmed by sms"
									},
									{
										"error": 500000,
										"error_description": "server error while send email by confirm phone"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/phone/notify/status": {
			"post": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Change the phone confirmation status",
				"description": "Changes the PHONE_CONFIRMED field value, on refused or waiting, depending on the status sent",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "Access Token String | Available only for the role of CashBack",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"confirmedStatus"
							],
							"properties": {
								"confirmedStatus": {
									"description": "Field status",
									"type": "string",
									"enum": [
										"waiting",
										"refused"
									],
									"example": "refused"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Status successfully changed",
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Custom error.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Phone confirmed status not correct"
									},
									{
										"error": 422001,
										"error_description": "confirmedStatus is required."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/phone/end-code-time": {
			"get": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Get the end of the life of the code.",
				"description": "Getting the lifetime of the code sent to the phone.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "phone",
						"in": "query",
						"description": "Phone number",
						"required": true,
						"type": "string",
						"example": 79531231212
					},
					{
						"name": "transport",
						"in": "query",
						"description": "How the code went",
						"required": false,
						"type": "string",
						"default": "sms",
						"enum": [
							"sms",
							"call"
						],
						"example": "call"
					}
				],
				"responses": {
					"200": {
						"description": "Getting Code Lifetime.",
						"examples": {
							"application/json": {
								"data": {
									"type": "time-end-of-code",
									"id": "",
									"attributes": {
										"moment_end": "2019-02-22 08:45:33"
									}
								},
								"result": true,
								"request": {
									"phone": 79531231234
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "phone is required"
									},
									{
										"error": 422001,
										"error_description": "Phone number not correct"
									},
									{
										"error": 422001,
										"error_description": "transport not correct"
									}
								],
								"result": false
							}
						}
					},
					"500": {
						"description": "Active code does not exist.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500110,
										"error_description": "Active code not exist"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/phone/reply-sms-time": {
			"get": {
				"tags": [
					"user/profile/phone"
				],
				"summary": "Get a date before re-sending the code.",
				"description": "Getting time to re-send code.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "phone",
						"in": "query",
						"description": "Phone number",
						"required": true,
						"type": "string",
						"example": 79531231212
					}
				],
				"responses": {
					"200": {
						"description": "Getting time to re-send code.",
						"examples": {
							"application/json": {
								"data": {
									"type": "time-to-reply-sms",
									"id": "",
									"attributes": {
										"moment_end": "2019-02-22 08:45:33"
									}
								},
								"result": true,
								"request": {
									"phone": 79531231234
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "phone is required"
									},
									{
										"error": 422001,
										"error_description": "Phone number not correct"
									}
								],
								"result": false
							}
						}
					},
					"500": {
						"description": "Active code does not exist.",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 500110,
										"error_description": "Active code not exist"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/short": {
			"get": {
				"tags": [
					"user/profile"
				],
				"summary": "Get short data about user",
				"description": "Obtaining user data (abbreviated list of fields) \n  ** Important **: Email is returned only if the user confirmed it on EPN, otherwise the field will be empty",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Returns email, username, fullname of the user in JSON format.",
						"examples": {
							"application/json": {
								"data": {
									"type": "getProperty",
									"id": 1,
									"attributes": [
										{
											"email": "test@gmail.com",
											"userName": "test@gmail.com",
											"fullName": "Полное Имя Пользователя",
											"role": "user"
										}
									]
								},
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/apple/link": {
			"get": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Apple account attachment",
				"description": "Attachment to Apple account profile. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck will give data from social data. user profile and make a redirect on the spa application",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"default": "ru",
						"example": "ru"
					}
				],
				"responses": {
					"302": {
						"description": ""
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/apple": {
			"delete": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Apple account score",
				"description": "Reliance from the social user account. Apple networks.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "In case of successful dislocation of social. Network"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/fb": {
			"post": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Binding a Facebook account (using tokens)",
				"description": "Attaching to the profile of Facebook account using the token of this network. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck will give data from social data. user profile and make a redirect on the spa application",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"social_network_access_token"
							],
							"properties": {
								"social_network_access_token": {
									"description": "token from social network",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "In case of successful binding"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Account Facebook Account",
				"description": "Reliance from the social user account. Facebook network.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "In case of successful dislocation of social. Network"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/google": {
			"post": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Binding Google Account (using tokens)",
				"description": "Attachment to the Google account profile. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck will give data from social data. user profile and make a redirect on the spa application",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"social_network_access_token"
							],
							"properties": {
								"social_network_access_token": {
									"description": "token from social network",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "In case of successful binding"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Google Account Badge",
				"description": "Reliance from the social user account. Google network.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "In case of successful dislocation of social. Network"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/vk": {
			"post": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Binding an account VK (using tokens)",
				"description": "Attaching to the vk account profile. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck will give data from social data. user profile and make a redirect on the spa application",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"properties": {
								"social_network_access_token": {
									"description": "token from social network",
									"type": "string",
									"example": "7e69416ce3231213b32012154f85d19a"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "In case of successful binding"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			},
			"delete": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Account vK.",
				"description": "Reliance from the social user account. Network vk.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "In case of successful dislocation of social. Network"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/fb/link": {
			"get": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Binding account Facebook.",
				"description": "Attaching Facebook accounting profile. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck will give data from social data. user profile and make a redirect on the spa application",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"default": "ru",
						"example": "ru"
					}
				],
				"responses": {
					"302": {
						"description": "* Successful answer. Redirect on Spa `https: //spa.epn.bz/user/profile? Social_Network = VK & Linked_SuccessFully = YES` \n  * Mistake. Redirect on Spa `https: //spa.epn.bz/user/profile? Error = Social + Network + Authorization + Error & Description = User + With + Social + Network + Profile + email + Already + EXIST & Code = 400016`"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/google/link": {
			"get": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Binding account Google",
				"description": "Attachment to the Google account profile. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck will give data from social data. user profile and make a redirect on the spa application",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"default": "ru",
						"example": "ru"
					}
				],
				"responses": {
					"302": {
						"description": "* Successful answer. Redirect on Spa `https: //spa.epn.bz/user/profile? Social_Network = VK & Linked_SuccessFully = YES` \n  * Mistake. Redirect on Spa `https: //spa.epn.bz/user/profile? Error = Social + Network + Authorization + Error & Description = User + With + Social + Network + Profile + email + Already + EXIST & Code = 400016`"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/social/vk/link": {
			"get": {
				"tags": [
					"user/profile/social"
				],
				"summary": "Binding account vk.",
				"description": "Attaching to the vk account profile. \n  * Beck will make a redirect on social. Network, user enters account data \n  * Social network will return these beck \n  * Beck will give data from social data. user profile and make a redirect on the spa application",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": false,
						"type": "string"
					},
					{
						"name": "ACCEPT-LANGUAGE",
						"in": "header",
						"description": "language",
						"required": false,
						"type": "string",
						"default": "ru",
						"example": "ru"
					}
				],
				"responses": {
					"302": {
						"description": "* Successful answer. Redirect on Spa `https: //spa.epn.bz/user/profile? Social_Network = VK & Linked_SuccessFully = YES` \n  * Mistake. Redirect on Spa `https: //spa.epn.bz/user/profile? Error = Social + Network + Authorization + Error & Description = User + With + Social + Network + Profile + email + Already + EXIST & Code = 400016`"
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/support-notifications": {
			"post": {
				"tags": [
					"user/profile"
				],
				"summary": "Change the status of receiving push-notifications from messages in the chat",
				"description": "Change the status of receiving push-notifications from messages in the chat",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"status"
							],
							"properties": {
								"status": {
									"type": "boolean",
									"enum": [
										true,
										false
									],
									"example": true
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns query result",
						"schema": {
							"$ref": "#/definitions/Success"
						},
						"examples": {
							"application/json": {
								"data": null,
								"result": true,
								"request": {
									"status": true
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Validation error",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "status is required"
									},
									{
										"error": 422001,
										"error_description": "status must be a boolean."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/profile/edit": {
			"patch": {
				"tags": [
					"user/profile"
				],
				"summary": "Editing, Removal of fields in profile",
				"description": "Changing field values in the user profile",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"properties": {
								"fullname": {
									"description": "Username",
									"type": "string",
									"example": "John John"
								},
								"birthday": {
									"description": "Birthday. Y-M-D format",
									"type": "string",
									"example": "1995-11-11"
								},
								"gender": {
									"description": "Floor",
									"type": "string",
									"enum": [
										"man",
										"woman"
									]
								},
								"language": {
									"description": "Language for profile",
									"type": "string",
									"enum": [
										"en",
										"ru",
										"es"
									]
								},
								"profile_image": {
									"description": "User Avatar",
									"type": "string",
									"example": "https://cdn.epn.bz/public/2c8e21f22d8d81797c80b10fc45a.jpeg"
								},
								"onBoardWatched": {
									"description": "Flag Onboarding Viewed",
									"type": "boolean",
									"example": "true"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Returns a positive result after saving.",
						"examples": {
							"application/json": {
								"data": {
									"type": "profileEdit",
									"id": "",
									"attributes": {
										"updated": true
									}
								},
								"result": true,
								"request": {
									"fullname": "test test",
									"birthday": "2018-11-11",
									"gender": "man"
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Birthday is not correct"
									},
									{
										"error": 422001,
										"error_description": "Gender is not correct"
									},
									{
										"error": 422001,
										"error_description": "Full name is not correct"
									},
									{
										"error": 422001,
										"error_description": "Language is not correct"
									},
									{
										"error": 422001,
										"error_description": "Profile image is not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/purses/add-charity": {
			"post": {
				"tags": [
					"purses"
				],
				"summary": "Add charity purse",
				"description": "Adding a charitable wallet to the user.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"charityId"
							],
							"properties": {
								"charityId": {
									"description": "Id of charity purse",
									"type": "string",
									"example": 1
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "add-new-charity-purse",
									"id": 1,
									"attributes": [
										{
											"status": 1,
											"purse": {
												"type": "paypal_usd",
												"purse": "https://paypal.me/bfkh",
												"added_datetime": "2018-05-07 15:36:16",
												"is_confirmed": true,
												"is_default": false
											}
										}
									]
								},
								"result": true,
								"request": {
									"charityId": 1
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"500": {
						"description": "Not correct PURSETYPE or PURSEVALUE values are transmitted",
						"examples": {
							"application/json": [
								{
									"errors": [
										{
											"error": 500028,
											"error_description": "Something was wrong:("
										}
									],
									"result": false
								}
							]
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/purses": {
			"post": {
				"tags": [
					"purses"
				],
				"summary": "Add purse",
				"description": "Adding a wallet user. When adding a wallet immediately, the call or sending an SMS with the user confirmation code, if the phone number is not tied, then the letter is sent to the mail.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"purseType",
								"purseValue"
							],
							"properties": {
								"purseType": {
									"description": "types of new purse",
									"type": "string",
									"example": "tele2"
								},
								"purseValue": {
									"description": "value of new purse",
									"type": "string",
									"example": 78005553236
								},
								"transport": {
									"description": "How to send code to confirm the wallet",
									"required": false,
									"type": "string",
									"default": "sms",
									"enum": [
										"sms",
										"call"
									],
									"example": "call"
								},
								"purseName": {
									"description": "Name for a wallet. From 1 to 50 characters",
									"required": false,
									"type": "string",
									"example": "My purse"
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "add-new-purse",
									"id": 772320,
									"attributes": [
										{
											"status": 1,
											"purse": {
												"type": "tele2",
												"purse": "*********236",
												"added_datetime": "2018-05-07 15:36:16",
												"is_confirmed": false,
												"is_default": false
											},
											"method": "send email",
											"value": "test_mail@gmail.com"
										}
									]
								},
								"result": true,
								"request": {
									"purseType": "tele2",
									"purseValue": 78005553236
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters are transmitted",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "Incorrect fields: transport"
									}
								],
								"result": false
							}
						}
					},
					"500": {
						"description": "Not correct PURSETYPE or PURSEVALUE values are transmitted",
						"examples": {
							"application/json": [
								{
									"errors": [
										{
											"error": 500028,
											"error_description": "Something was wrong:("
										}
									],
									"result": false
								}
							]
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/purses/confirm": {
			"post": {
				"tags": [
					"purses"
				],
				"summary": "Confirm purse",
				"description": "Confirm the added wallet by the user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "body",
						"in": "body",
						"schema": {
							"required": [
								"purseId",
								"code"
							],
							"properties": {
								"purseId": {
									"description": "purse`s id",
									"type": "integer",
									"example": 772320
								},
								"code": {
									"description": "Code for confirm form sms.",
									"type": "string",
									"example": 61379
								}
							},
							"type": "object"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "confirm-purse",
									"id": 772327,
									"attributes": {
										"dbResponse": true
									}
								},
								"result": true,
								"request": {
									"purseId": 772327,
									"code": 61379
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"500": {
						"description": "Not correctly PURSEID = 'ASD'",
						"examples": {
							"application/json": [
								{
									"errors": [
										{
											"error": 400023,
											"error_description": "Something was wrong:("
										}
									],
									"result": false
								}
							]
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/cards/get-by-country": {
			"get": {
				"tags": [
					"purses"
				],
				"summary": "Get a list of cards by country",
				"description": "Get a list of cards by country",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "countryCode",
						"in": "query",
						"description": "code of the country",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "List of cards by country",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "cards-by-country",
										"id": "capitalist_card_usd",
										"attributes": {
											"paymentSystems": [
												"mastercard"
											],
											"currencies": [
												"RUB",
												"USD",
												"GBP",
												"EUR"
											],
											"minPaymentLimit": {
												"RUB": 7500,
												"USD": 100,
												"GBP": 70,
												"EUR": 80
											},
											"maxPaymentLimit": {
												"RUB": 100000,
												"USD": 1300,
												"GBP": 950,
												"EUR": 1100
											}
										}
									},
									{
										"type": "cards-by-country",
										"id": "cardpay",
										"attributes": {
											"paymentSystems": [
												"visa",
												"mastercard",
												"mir"
											],
											"currencies": [
												"RUB",
												"USD",
												"GBP",
												"EUR"
											],
											"minPaymentLimit": {
												"RUB": 500,
												"USD": 9,
												"GBP": 7,
												"EUR": 9
											},
											"maxPaymentLimit": {
												"RUB": 2000000,
												"USD": 100000,
												"GBP": 100000,
												"EUR": 100000
											}
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "countryCode is required."
									},
									{
										"error": 422001,
										"error_description": "countryCode must be a string."
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/crypto-currency-price": {
			"get": {
				"tags": [
					"purses"
				],
				"summary": "Get the cost of cryptocurrents",
				"description": "Getting the cost of cryptocurrency in dollars.",
				"parameters": [
					{
						"name": "cryptoCurrency",
						"in": "query",
						"description": "Cryptovalyuta.",
						"required": false,
						"type": "string",
						"default": "TONCOIN"
					}
				],
				"responses": {
					"200": {
						"description": "",
						"examples": {
							"application/json": {
								"data": {
									"type": "TONCOIN_USD",
									"id": "",
									"attributes": {
										"sellPrice": 2.24
									}
								},
								"result": true,
								"request": []
							}
						}
					},
					"422": {
						"description": "Incorrect parameters",
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "cryptoCurrency not correct"
									}
								],
								"result": false
							}
						}
					}
				}
			}
		},
		"/user/purses/list": {
			"get": {
				"tags": [
					"purses"
				],
				"summary": "Get list of users purses",
				"description": "Getting active user wallets",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": [
									{
										"type": "get-list-purses",
										"id": 613451,
										"attributes": {
											"type": "epayments",
											"purse": "000-987728",
											"added_datetime": "2018-05-08 00:00:00",
											"is_confirmed": true,
											"is_default": false,
											"purseName": "My Purse"
										}
									},
									{
										"type": "get-list-purses",
										"id": 643685,
										"attributes": {
											"type": "yandex_money",
											"purse": "***********453",
											"added_datetime": "2018-05-08 00:02:35",
											"is_confirmed": false,
											"is_default": true,
											"isCharity": false,
											"purseName": ""
										}
									}
								],
								"result": true,
								"request": []
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/user/purses/{purseId}": {
			"delete": {
				"tags": [
					"purses"
				],
				"summary": "Remove purse",
				"description": "Deleting a wallet of the user",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "purseId",
						"in": "query",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Valid JSON API, if everything is ok.",
						"examples": {
							"application/json": {
								"data": {
									"type": "remove-purse",
									"id": 772327,
									"attributes": []
								},
								"result": true,
								"request": {
									"purseId": 772327
								}
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"500": {
						"description": "Not correctly PURSEID = 'ASD'",
						"examples": {
							"application/json": [
								{
									"errors": [
										{
											"error": 400024,
											"error_description": "Something was wrong:("
										}
									],
									"result": false
								}
							]
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		},
		"/purses/sendCode": {
			"get": {
				"tags": [
					"purses"
				],
				"summary": "Send activation code re-",
				"description": "Send a confirmation code to the phone using a call or SMS if the phone number is confirmed. If the number is not confirmed, send a confirmation by mail.",
				"parameters": [
					{
						"name": "X-ACCESS-TOKEN",
						"in": "header",
						"description": "access token string",
						"required": true,
						"type": "string"
					},
					{
						"name": "purseId",
						"in": "query",
						"description": "Eid Wallet",
						"required": true,
						"type": "integer",
						"example": 1456
					},
					{
						"name": "transport",
						"in": "query",
						"description": "How to send code",
						"required": false,
						"type": "string",
						"default": "sms",
						"enum": [
							"sms",
							"call"
						],
						"example": "call"
					}
				],
				"responses": {
					"200": {
						"description": "Where the activation (mail or SMS) was sent",
						"schema": {
							"$ref": "#/definitions/SendActivateCode"
						},
						"examples": {
							"application/json": {
								"data": {
									"type": "purses",
									"attributes": {
										"method": "send email",
										"value": "name@name.ru"
									}
								},
								"result": true
							}
						}
					},
					"403": {
						"description": "ACL: request not allowed"
					},
					"422": {
						"description": "Incorrect parameters",
						"schema": {
							"$ref": "#/definitions/422_Send_activate_code"
						},
						"examples": {
							"application/json": {
								"errors": [
									{
										"error": 422001,
										"error_description": "PurseId not correct"
									},
									{
										"error": 422001,
										"error_description": "purseId is required."
									},
									{
										"error": 422001,
										"error_description": "transport not correct"
									}
								],
								"result": false
							}
						}
					}
				},
				"security": [
					{
						"api_key": []
					}
				]
			}
		}
	},
	"definitions": {
		"AccessTokenAndRefreshTokenAuth": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"type": "string",
							"default": "token"
						},
						"id": {
							"type": "string",
							"default": ""
						},
						"attributes": {
							"properties": {
								"access_token": {
									"type": "string",
									"default": "2tlbl90eXBlIjoiYWNjZXNzX"
								},
								"token_type": {
									"type": "string",
									"default": "jwt"
								},
								"refresh_token": {
									"type": "string",
									"default": "CJhbGciOiJIUzUxMiJ9.eyJ0b2tlbl"
								},
								"isAuth": {
									"type": "boolean",
									"default": true
								}
							},
							"type": "object"
						},
						"result": {
							"type": "boolean",
							"default": true
						},
						"request": {}
					},
					"type": "object"
				}
			},
			"type": "object"
		},
		"AccessTokenAndRefreshTokenRegistration": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"type": "string",
							"default": "registration"
						},
						"id": {
							"type": "string",
							"default": ""
						},
						"attributes": {
							"properties": {
								"access_token": {
									"type": "string",
									"default": "2tlbl90eXBlIjoiYWNjZXNzX"
								},
								"token_type": {
									"type": "string",
									"default": "jwt"
								},
								"refresh_token": {
									"type": "string",
									"default": "CJhbGciOiJIUzUxMiJ9.eyJ0b2tlbl"
								}
							},
							"type": "object"
						},
						"result": {
							"type": "boolean",
							"default": true
						},
						"request": {}
					},
					"type": "object"
				}
			},
			"type": "object"
		},
		"401_INVALID_TOKEN": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"error": {
								"type": "integer",
								"default": 401002
							},
							"error_description": {
								"type": "string",
								"default": "Unauthorized: invalid access token or incorrect token payload"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"429NeedCaptcha": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"error": {
								"type": "integer",
								"default": 429001
							},
							"error_description": {
								"type": "string",
								"default": "need captcha"
							},
							"captcha": {
								"properties": {
									"type": {
										"type": "string",
										"default": "reCaptcha|image"
									},
									"captcha": {
										"properties": {
											"site_key": {
												"type": "string",
												"default": "6LdLYTEUAAAAAGuJ4UOnX_nQ6H1MBeBH6A8otJvyu"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"OffersList": {
			"properties": {
				"meta": {
					"properties": {
						"count": {
							"description": "total number (excluding pagination)",
							"type": "string"
						}
					},
					"type": "object"
				},
				"data": {
					"properties": {
						"result": {
							"type": "boolean",
							"default": true
						},
						"request": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					},
					"type": "array",
					"items": {
						"properties": {
							"type": {
								"type": "string",
								"default": "offers"
							},
							"id": {
								"description": "ID Offer",
								"type": "int"
							},
							"attributes": {
								"properties": {
									"tag": {
										"description": "Short name Offer (Legacy, will be deleted)",
										"type": "string"
									},
									"url": {
										"type": "string"
									},
									"name": {
										"description": "Name of Offer",
										"type": "string"
									},
									"priority": {
										"description": "Priority offshop",
										"type": "string"
									},
									"type_id": {
										"description": "Id type type from table. OFFERS_TYPES.",
										"type": "int"
									},
									"link_default": {
										"description": "Default Link to the Store",
										"type": "string"
									},
									"iframe_supported": {
										"description": "Did you leave an IFRAME",
										"type": "int"
									},
									"is_rate_fixed": {
										"description": "Is the interest rate fixed.",
										"type": "int"
									},
									"currency": {
										"description": "Supported currencies. Example: ['USD', 'RUB', 'GBP', 'EUR']",
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"title": {
										"description": "Taitl Offhpe",
										"type": "string"
									},
									"rates": {
										"description": "Range% cachek in percent. JSon.",
										"type": "string"
									},
									"cashbackMaxRate": {
										"description": "Maximum cachex in percent",
										"type": "float"
									},
									"cashbackRateSymbol": {
										"type": "string"
									},
									"ecpa": {
										"description": "The average price of clicking within the framework of the affiliate program",
										"type": "string"
									},
									"cr": {
										"description": "The ratio of the number of leads to hosts",
										"type": "float"
									},
									"confirm": {
										"description": "Percentage of confirmed orders",
										"type": "int"
									},
									"export": {
										"description": "The possibility of exporting goods. True / False string",
										"type": "string"
									},
									"retargeting": {
										"description": "Repeating Internet advertising display previously visited by them webpage. True / False string",
										"type": "string"
									},
									"primaryColor": {
										"description": "Picture background color (displayed in VMA)",
										"type": "string"
									},
									"secondaryColor": {
										"description": "Color of wide strips of the picture (displayed in the CBB office)",
										"type": "string"
									},
									"ternaryColor": {
										"description": "The color of the narrow strip of the picture (is displayed in the VMAB)",
										"type": "string"
									},
									"offerColor": {
										"description": "Color for tiles from logotocks in the web version and color of the Offer page",
										"type": "string"
									},
									"rating": {
										"description": "Offer rating (from 1 to 5)",
										"type": "int"
									},
									"cookieLive": {
										"description": "The time for which orders are counted after the transition to the affiliate link",
										"type": "string"
									},
									"logo": {
										"description": "Offer logo to VM pages",
										"type": "string"
									},
									"logo_small": {
										"description": "Offer logo on a detailed page",
										"type": "string"
									},
									"image": {
										"description": "Offer picture in the general list on the main page of the Cabinet CBB",
										"type": "string"
									},
									"logo95x95": {
										"description": "Logo Offera 95H95",
										"type": "string"
									},
									"hosts": {
										"description": "Domains for which allowed pouring",
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"creative_placement": {
										"type": "string"
									},
									"comission": {
										"type": "array",
										"items": {
											"type": "object"
										}
									},
									"compensation": {
										"type": "array",
										"items": {
											"type": "object"
										}
									},
									"slogan": {
										"description": "Tagline",
										"type": "string"
									},
									"param_type": {
										"type": "int"
									},
									"link_match": {
										"type": "string"
									},
									"goodsDumps": {
										"description": "Damps of goods. JSon.",
										"type": "string"
									},
									"hasFeed": {
										"description": "True / False string",
										"type": "string"
									},
									"hasBonusProgram": {
										"description": "True / False string",
										"type": "string"
									},
									"isExclusive": {
										"description": "True / False string",
										"type": "string"
									},
									"labelIds": {
										"description": "Labers ID (general labels + labels lifted by the user)",
										"type": "array",
										"items": {
											"type": "int"
										}
									},
									"labelNames": {
										"description": "Name of offper labels (general + user)",
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"maxRate": {
										"description": "Maximum interest rate store",
										"type": "string"
									},
									"nameVariants": {
										"description": "The list of available names to search for offper by name",
										"type": "string"
									},
									"canBuyInMobileApp": {
										"description": "Is it possible to buy in a mobile application store. True / False string",
										"type": "string"
									},
									"allowedCashbackLink": {
										"description": "Permission to create a cache-link",
										"type": "string"
									},
									"allowMetaAction": {
										"description": "Permission to use meta-goals. True / False string",
										"type": "string"
									},
									"categoryIds": {
										"type": "array",
										"items": {
											"type": "int"
										}
									},
									"categoryNames": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"maxRatePretext": {
										"type": "string"
									},
									"increasedCashback": {
										"type": "boolean"
									},
									"isNew": {
										"description": "True / False string",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"type": "object"
		},
		"DoodlesList": {
			"properties": {
				"data": {
					"properties": {
						"result": {
							"type": "boolean",
							"default": true
						},
						"request": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					},
					"type": "array",
					"items": {
						"properties": {
							"type": {
								"type": "string",
								"default": "doodles"
							},
							"id": {
								"description": "ID Dudla",
								"type": "string"
							},
							"attributes": {
								"properties": {
									"name": {
										"description": "Name Dudla",
										"type": "string"
									},
									"dateTo": {
										"description": "Start Dudla",
										"type": "string"
									},
									"dateFrom": {
										"description": "Finish Dudla",
										"type": "string"
									},
									"offerLogo": {
										"description": "Logo Offer",
										"type": "string"
									},
									"background": {
										"description": "Background of all Dudla",
										"type": "string"
									},
									"image": {
										"description": "Additional image (left or right banner)",
										"type": "string"
									},
									"priority": {
										"description": "Display position",
										"type": "string"
									},
									"status": {
										"description": "Calculated on the basis of DATETO and DATEFROM",
										"type": "string"
									},
									"translate": {
										"properties": {
											"ru": {
												"properties": {
													"title": {
														"description": "Banner header",
														"type": "string"
													},
													"subTitle": {
														"description": "Subaggenerator",
														"type": "string"
													},
													"textButton": {
														"description": "The text of the only button",
														"type": "string"
													},
													"link": {
														"description": "Link to the store",
														"type": "string"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				}
			},
			"type": "object"
		},
		"CategoryTree": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"type": "string",
							"default": "categoryTree"
						},
						"id": {
							"type": "string",
							"default": ""
						},
						"attributes": {
							"properties": {
								"name": {
									"description": "name of category",
									"type": "string"
								},
								"translations": {
									"description": "Translation of the name of the category depending on the Local language",
									"type": "string"
								},
								"level": {
									"description": "Tree nesting level",
									"type": "string"
								},
								"tree": {
									"properties": {
										"id": {
											"properties": {
												"id": {
													"description": "Category ID",
													"type": "string"
												},
												"name": {
													"description": "name of category",
													"type": "string"
												},
												"translations": {
													"description": "Translation of the name of the category depending on the Local language",
													"type": "string"
												},
												"level": {
													"description": "Establishing level",
													"type": "string"
												},
												"tree": {
													"properties": {
														"id": {
															"properties": {
																"id": {
																	"description": "ID subcategories",
																	"type": "string"
																},
																"name": {
																	"description": "Name subcategory",
																	"type": "string"
																},
																"translations": {
																	"description": "Translation of the name of the subcategory depending on the language of Locali",
																	"type": "string"
																},
																"level": {
																	"description": "Establishing level",
																	"type": "string"
																}
															},
															"type": "object"
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						},
						"result": {
							"type": "boolean",
							"default": true
						},
						"request": {
							"type": "array",
							"items": {
								"type": "object"
							}
						}
					},
					"type": "object"
				}
			},
			"type": "object"
		},
		"LabelsList": {
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"properties": {
							"type": {
								"description": "labels",
								"type": "string"
							},
							"id": {
								"description": "Labula ID.",
								"type": "string"
							},
							"attributes": {
								"properties": {
									"date_start": {
										"description": "The moment of time from which the label is available",
										"type": "string"
									},
									"date_end": {
										"description": "The moment of time to which the label is available",
										"type": "string"
									},
									"permission": {
										"description": "List of roles for which label is available",
										"type": "array",
										"items": {
											"type": "object"
										}
									},
									"priority": {
										"description": "Label priority",
										"type": "string"
									},
									"name": {
										"description": "Label name depending on the Local language",
										"type": "string"
									},
									"description": {
										"description": "Description of the label depending on the Local language",
										"type": "string"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"OffersLinks": {
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"properties": {
							"type": {
								"description": "Type of resource",
								"type": "string",
								"default": "offersLinks"
							},
							"id": {
								"description": "ID Offer",
								"type": "string"
							},
							"attributes": {
								"properties": {
									"cashbackDefault": {
										"description": "Defalted reference",
										"type": "string"
									},
									"cashbackPackage": {
										"properties": {
											"link": {
												"description": "Link with JSON_Mobile type",
												"type": "string"
											},
											"schema": {
												"description": "Scheme depending on the offper",
												"type": "string"
											},
											"name": {
												"description": "Name depending on the offper",
												"type": "string"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"422_Lang_is_required": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"error": {
								"type": "integer",
								"default": 422001
							},
							"error_description": {
								"description": "lang is required.",
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"422_Label_validation": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"error": {
								"type": "integer",
								"default": 422001
							},
							"error_description": {
								"description": "offerId is required.",
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"422_Offers_links": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"error": {
								"type": "integer",
								"default": 422001
							},
							"error_description": {
								"description": "Description of the validation error",
								"type": "string",
								"enum": [
									"ids is required.",
									"id not correct",
									"url not correct",
									"Material not correct",
									"Offer id not found"
								]
							}
						}
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"Success": {
			"properties": {
				"data": {
					"type": "null"
				},
				"result": {
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"422_invalid_param_by_order_payment": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"1": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "purse_id is required.",
										"type": "string",
										"default": "purse_id is required."
									}
								},
								"type": "object"
							},
							"2": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "purse_id must be a number.",
										"type": "string",
										"default": "purse_id must be a number."
									}
								},
								"type": "object"
							},
							"3": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "currency is required.",
										"type": "string",
										"default": "currency is required."
									}
								},
								"type": "object"
							},
							"4": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "currency must be a string.",
										"type": "string",
										"default": "currency must be a string."
									}
								},
								"type": "object"
							},
							"5": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "Not allowed currency",
										"type": "string",
										"default": "Not allowed currency"
									}
								},
								"type": "object"
							},
							"6": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "amount is required.",
										"type": "string",
										"default": "amount is required."
									}
								},
								"type": "object"
							},
							"7": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "amount must be a number.",
										"type": "string",
										"default": "amount must be a number."
									}
								},
								"type": "object"
							},
							"8": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422100
									},
									"error_description": {
										"description": "Invalid param",
										"type": "string",
										"default": "Invalid param"
									}
								},
								"type": "object"
							},
							"9": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422102
									},
									"error_description": {
										"description": "Incorrect amount",
										"type": "string",
										"default": "Amount not correct"
									}
								},
								"type": "object"
							},
							"10": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422103
									},
									"error_description": {
										"description": "Query limit exceeded.",
										"type": "string",
										"default": "Limit request exceeded"
									}
								},
								"type": "object"
							},
							"11": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422104
									},
									"error_description": {
										"description": "This wallet is not supported in this currency.",
										"type": "string",
										"default": "Not correct purse for currency"
									}
								},
								"type": "object"
							},
							"12": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422105
									},
									"error_description": {
										"description": "The minimum output amount is higher ordered.",
										"type": "string",
										"default": "Payout is available with a larger amount"
									}
								},
								"type": "object"
							},
							"13": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422106
									},
									"error_description": {
										"description": "Wallet not found.",
										"type": "string",
										"default": "Purse not found"
									}
								},
								"type": "object"
							},
							"14": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422107
									},
									"error_description": {
										"description": "Payments are blocked.",
										"type": "string",
										"default": "Payments is blocked"
									}
								},
								"type": "object"
							},
							"15": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422108
									},
									"error_description": {
										"description": "Not enough cash",
										"type": "string",
										"default": "Amount balance exceeded"
									}
								},
								"type": "object"
							},
							"16": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422110
									},
									"error_description": {
										"description": "You must add a map address.",
										"type": "string",
										"default": "Add address by WireTransfer card."
									}
								},
								"type": "object"
							},
							"17": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422111
									},
									"error_description": {
										"description": "It is necessary to sign a contract for the card.",
										"type": "string",
										"default": "WireTransfer contract signed"
									}
								},
								"type": "object"
							},
							"18": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422112
									},
									"error_description": {
										"description": "Payments are frozen.",
										"type": "string",
										"default": "Payment is hold"
									}
								},
								"type": "object"
							}
						}
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"orderPayment": {
			"properties": {
				"data": {
					"properties": {
						"1": {
							"properties": {
								"type": {
									"type": "string",
									"default": "order-payment"
								},
								"id": {
									"type": "string",
									"default": 1234
								},
								"attributes": {
									"properties": {
										"status": {
											"description": "Payment status",
											"type": "string",
											"default": "waiting"
										},
										"purse_type": {
											"description": "Type of wallet",
											"type": "string",
											"default": "wmz"
										},
										"purse": {
											"description": "Wallet number",
											"type": "string",
											"default": "************475"
										},
										"amount": {
											"description": "Output amount",
											"type": "string",
											"default": 1
										},
										"currency": {
											"description": "Currency",
											"type": "string",
											"default": "USD"
										},
										"created_at": {
											"description": "Order date",
											"type": "string",
											"default": "2018-05-18 13:43:56"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": true
				},
				"request": {
					"type": "array",
					"items": {
						"type": "object"
					}
				}
			},
			"type": "object"
		},
		"getPayment": {
			"properties": {
				"data": {
					"properties": {
						"1": {
							"properties": {
								"type": {
									"type": "string",
									"default": "payments-history"
								},
								"id": {
									"type": "string",
									"default": 1234
								},
								"attributes": {
									"properties": {
										"code": {
											"description": "Operation code",
											"type": "string"
										},
										"status": {
											"description": "Payment status",
											"type": "string",
											"default": "waiting"
										},
										"purse_type": {
											"description": "Type of wallet",
											"type": "string",
											"default": "wmz"
										},
										"purse": {
											"description": "Wallet number",
											"type": "string",
											"default": "************475"
										},
										"amount": {
											"description": "Output amount",
											"type": "string",
											"default": 1
										},
										"currency": {
											"description": "Currency",
											"type": "string",
											"default": "USD"
										},
										"created_at": {
											"description": "Order date",
											"type": "string",
											"default": "2018-05-18 13:43:56"
										},
										"paidAt": {
											"description": "Date of payment",
											"type": "string"
										},
										"invoice": {
											"description": "Link to download Invoice (if available)",
											"type": "string",
											"default": ""
										},
										"statement": {
											"description": "Link to download a brief summary (if available)",
											"type": "string",
											"default": ""
										},
										"statementDetail": {
											"description": "Link to download detailed unloading (if available)",
											"type": "string",
											"default": ""
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": true
				},
				"request": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"meta": {
					"type": "array",
					"items": {
						"properties": {
							"totalFound": {
								"description": "The total number of payments.",
								"type": "integer",
								"default": 20
							},
							"hasNext": {
								"description": "The existence of the next page for pagination.",
								"type": "string",
								"default": 1
							}
						},
						"type": "object"
					}
				}
			},
			"type": "object"
		},
		"getPaymentInit": {
			"properties": {
				"data": {
					"properties": {
						"1": {
							"properties": {
								"type": {
									"type": "string",
									"default": "payment-init"
								},
								"id": {
									"description": "Type of wallet",
									"type": "string",
									"default": "QIWI"
								},
								"attributes": {
									"properties": {
										"name": {
											"description": "Wallet type translate depending on Accept-Language",
											"type": "string",
											"default": "QIWI"
										},
										"isAllowedForMobile": {
											"description": "Is it available to output in a mobile application",
											"type": "boolean"
										},
										"info": {
											"properties": {
												"1": {
													"properties": {
														"commissionPercent": {
															"description": "Commission as a percentage. Only for webmasters.",
															"type": "float",
															"default": 6
														},
														"commissionFix": {
															"description": "Fixed Commission. Only for webmasters.",
															"type": "float",
															"default": 6
														},
														"currency": {
															"description": "Currency",
															"type": "string",
															"default": "RUB"
														},
														"min": {
															"description": "Minimum output amount",
															"type": "float",
															"default": 6
														}
													},
													"type": "object"
												},
												"2": {
													"properties": {
														"commissionPercent": {
															"description": "Commission as a percentage. Only for webmasters.",
															"type": "float",
															"default": 6
														},
														"commissionFix": {
															"description": "Fixed Commission. Only for webmasters.",
															"type": "float",
															"default": 6
														},
														"currency": {
															"description": "Currency",
															"type": "string",
															"default": "USD"
														},
														"min": {
															"description": "Minimum output amount",
															"type": "float",
															"default": 6
														}
													},
													"type": "object"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"SendActivateCode": {
			"properties": {
				"data": {
					"type": "array",
					"items": {
						"properties": {
							"type": {
								"description": "Type of resource",
								"type": "string",
								"default": "purses"
							},
							"id": {
								"type": "string",
								"default": ""
							},
							"attributes": {
								"properties": {
									"method": {
										"description": "The method that sent information to activate",
										"type": "string",
										"enum": [
											"send email",
											"send sms"
										]
									},
									"value": {
										"description": "The value of the number is either the mail where the information was sent.",
										"type": "string",
										"enum": [
											"name@name.com",
											"**********342"
										]
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"422_Send_activate_code": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"error": {
								"type": "integer",
								"default": 422001
							},
							"error_description": {
								"description": "Description Validation Errors Number Wallet",
								"type": "string",
								"enum": [
									"purseId is required.",
									"purseId must be a string.",
									"purse not exist"
								]
							}
						}
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"getTransactions": {
			"properties": {
				"data": {
					"properties": {
						"1": {
							"properties": {
								"type": {
									"type": "string",
									"default": "transactions"
								},
								"id": {
									"type": "string",
									"default": 1234
								},
								"attributes": {
									"properties": {
										"stats_ts": {
											"description": "Time to appear in statistics",
											"type": "date",
											"example": "2018-03-27 18:00:00"
										},
										"product": {
											"description": "Name of product",
											"type": "string",
											"example": "test"
										},
										"product_link": {
											"description": "Link to the product",
											"type": "string",
											"example": "https://example.com"
										},
										"link": {
											"description": "Link to order information. On the side of the offper.",
											"type": "string",
											"example": "https://example.com"
										},
										"order_number": {
											"description": "Order number",
											"type": "string",
											"example": 1234
										},
										"order_time": {
											"description": "The date of origin",
											"type": "date",
											"example": "2018-03-27 18:00:00"
										},
										"order_status": {
											"description": "Order status",
											"type": "string",
											"enum": [
												"completed",
												"waiting",
												"rejected",
												"pending"
											],
											"example": "success"
										},
										"transaction_time": {
											"description": "Order transition time to Completed or Rejected",
											"type": "date",
											"example": "2018-03-27 18:00:00"
										},
										"revenue": {
											"description": "The price of the product",
											"type": "string",
											"example": 40.95
										},
										"commission_user": {
											"description": "Cachebc",
											"type": "string",
											"example": 4.95
										},
										"creative_title": {
											"description": "Creative",
											"type": "string",
											"example": "test"
										},
										"sub_title": {
											"description": "Sub",
											"type": "string",
											"example": "test"
										},
										"user_click_id": {
											"description": "CLICK ID ID",
											"type": "string",
											"example": 123
										},
										"offer_type": {
											"description": "Offer type",
											"type": "string",
											"example": "ali"
										},
										"offer_id": {
											"description": "ID Offer",
											"type": "integer",
											"example": 1
										},
										"product_id": {
											"description": "Castitoducer",
											"type": "integer",
											"example": 1234
										},
										"currency": {
											"description": "Order",
											"type": "string",
											"example": "USD"
										},
										"date": {
											"description": "The date of the origin of the order in the format 'dd.mm.yyyy'",
											"type": "date",
											"example": "27.02.2018"
										},
										"productsImages": {
											"description": "Array of objects with pictures of transaction goods",
											"type": "array",
											"items": {
												"properties": {
													"productId": {
														"description": "Castitoducer",
														"type": "integer"
													},
													"image": {
														"description": "Link to picture",
														"type": "string"
													}
												},
												"type": "object"
											}
										},
										"productIds": {
											"description": "List of products in transaction",
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": true
				},
				"request": {
					"type": "array",
					"items": {
						"type": "object"
					}
				},
				"meta": {
					"type": "array",
					"items": {
						"properties": {
							"totalFound": {
								"description": "The total number of transactions.",
								"type": "integer",
								"default": 20
							},
							"hasNext": {
								"description": "The existence of the next page for pagination.",
								"type": "string",
								"default": 1
							}
						},
						"type": "object"
					}
				}
			},
			"type": "object"
		},
		"422_Errors_Transactions": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"1": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "Unregistered parameters",
										"type": "string",
										"enum": [
											"tsFrom is required.",
											"tsFrom must be a valid date.",
											"Not allowed tsFrom",
											"tsTo is required.",
											"tsTo must be a valid date.",
											"Not allowed offerIds"
										]
									}
								},
								"type": "object"
							}
						}
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"422_Errors_Cdn_GetUploadUrl": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"1": {
								"properties": {
									"error": {
										"type": "integer",
										"default": 422001
									},
									"error_description": {
										"description": "Unregistered parameters",
										"type": "string",
										"enum": [
											"visibility is required.",
											"type is required.",
											"visibility must be a string.",
											"type must be a string.",
											"Field `visibility` not valid, got ``.",
											"Field `type` not valid, got ``."
										]
									}
								},
								"type": "object"
							}
						}
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"Faq_answers_with_categories": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"type": "string",
							"default": "faq-answers"
						},
						"id": {
							"type": "string"
						},
						"attributes": {
							"type": "array",
							"items": {
								"properties": {
									"1": {
										"properties": {
											"id": {
												"description": "ID Category Question Categories",
												"type": "integer"
											},
											"title": {
												"description": "name of category",
												"type": "string"
											},
											"icon": {
												"description": "URL by which you can download the category icon",
												"type": "string"
											},
											"slug": {
												"description": "Part of the URL that identifies the page in readable keywords",
												"type": "string"
											},
											"data": {
												"description": "An array of answers to this category",
												"type": "array",
												"items": {
													"properties": {
														"1": {
															"properties": {
																"answer": {
																	"description": "Answer text",
																	"type": "string"
																},
																"question": {
																	"description": "Text question",
																	"type": "string"
																},
																"lang": {
																	"description": "Question-answer language",
																	"type": "string"
																},
																"question_answer_id": {
																	"description": "Question-answer ID",
																	"type": "integer"
																}
															},
															"type": "object"
														}
													}
												}
											}
										},
										"type": "object"
									}
								}
							}
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"Faq_answers_get_all": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"type": "string",
							"default": "faq-answers"
						},
						"id": {
							"type": "string"
						},
						"attributes": {
							"type": "array",
							"items": {
								"properties": {
									"1": {
										"properties": {
											"category_id": {
												"description": "ID Category Question Categories",
												"type": "integer"
											},
											"category_title": {
												"description": "name of category",
												"type": "string"
											},
											"category_icon": {
												"description": "URL by which you can download the category icon",
												"type": "string"
											},
											"category_slug": {
												"description": "Part of the URL that identifies the page in readable keywords",
												"type": "string"
											},
											"category_priority": {
												"description": "Category priority in extradition. The smaller the number, the higher the category in the list.",
												"type": "integer"
											},
											"data": {
												"description": "An array of answers to this category",
												"type": "array",
												"items": {
													"properties": {
														"1": {
															"properties": {
																"answer": {
																	"description": "Answer text",
																	"type": "string"
																},
																"question": {
																	"description": "Text question",
																	"type": "string"
																},
																"lang": {
																	"description": "Question-answer language",
																	"type": "string"
																},
																"question_answer_id": {
																	"description": "Question-answer ID",
																	"type": "integer"
																}
															},
															"type": "object"
														}
													}
												}
											}
										},
										"type": "object"
									}
								}
							}
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"Faq_answers_search": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"type": "string",
							"default": "faq-answers"
						},
						"id": {
							"type": "string"
						},
						"attributes": {
							"type": "array",
							"items": {
								"properties": {
									"1": {
										"properties": {
											"hasNext": {
												"description": "Indicates whether the following page with search results",
												"type": "boolean"
											},
											"data": {
												"description": "An array of answers to this category",
												"type": "array",
												"items": {
													"properties": {
														"1": {
															"properties": {
																"category_id": {
																	"description": "ID Category Question Categories",
																	"type": "integer"
																},
																"category_title": {
																	"description": "name of category",
																	"type": "string"
																},
																"category_icon": {
																	"description": "URL by which you can download the category icon",
																	"type": "string"
																},
																"category_slug": {
																	"description": "Part of the URL that identifies the page in readable keywords",
																	"type": "string"
																},
																"answer": {
																	"description": "Answer text",
																	"type": "string"
																},
																"question": {
																	"description": "Text question",
																	"type": "string"
																},
																"lang": {
																	"description": "Question-answer language",
																	"type": "string"
																},
																"question_answer_id": {
																	"description": "Question-answer ID",
																	"type": "integer"
																}
															},
															"type": "object"
														}
													}
												}
											}
										},
										"type": "object"
									}
								}
							}
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"200_Tracking_Create_Or_Update": {
			"properties": {
				"data": {
					"properties": {
						"1": {
							"properties": {
								"type": {
									"type": "string",
									"default": "tracking-create"
								},
								"id": {
									"type": "string",
									"default": ""
								},
								"attributes": {
									"properties": {
										"1": {
											"properties": {
												"status": {
													"description": "Status. 'Waiting' - the track code added to the system. After a minute, the information will be available. 'Ready' - information is already available.",
													"type": "string",
													"enum": [
														"ready",
														"waiting"
													],
													"example": "waiting"
												}
											},
											"type": "object"
										}
									},
									"type": "object"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"422_Firebase_validation": {
			"properties": {
				"errors": {
					"type": "array",
					"items": {
						"properties": {
							"error": {
								"type": "integer",
								"default": 422001
							},
							"error_description": {
								"description": "offerId is required.",
								"type": "string"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"type": "boolean",
					"default": false
				}
			},
			"type": "object"
		},
		"Affiliate_checkLink": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"type": "string",
							"default": "affiliate"
						},
						"id": {
							"type": "string"
						},
						"attributes": {
							"properties": {
								"redirectUrl": {
									"description": "Affiliate reference to goods",
									"type": "string"
								},
								"offerName": {
									"description": "Name of shop",
									"type": "string"
								},
								"cashbackPercent": {
									"description": "The percentage of cachek for the goods (there is not for all goods)",
									"type": "string"
								},
								"isHotsale": {
									"description": "Goods from hotzieilov? (There is not for all stores)",
									"type": "boolean"
								},
								"productName": {
									"description": "The name of the goods (there is not for all goods)",
									"type": "string"
								},
								"logoSmall": {
									"description": "Logo store",
									"type": "string"
								},
								"affiliateType": {
									"description": "Is the goods to affiliate (0 - not defined, 1 - affiliate, 2 - non-flavored)",
									"type": "integer"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"GoodsInformation": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"description": "Type of resource",
							"type": "string",
							"default": "goods"
						},
						"id": {
							"description": "Castitoducer",
							"type": "integer"
						},
						"attributes": {
							"properties": {
								"cashback": {
									"description": "Fixed cachembek size",
									"type": "float"
								},
								"cashbackPercent": {
									"description": "Percentage cachek",
									"type": "float"
								},
								"categories": {
									"description": "Product categories",
									"type": "array"
								},
								"currency": {
									"description": "Currency goods",
									"type": "string",
									"default": "USD"
								},
								"currencySymbol": {
									"description": "Currency designation",
									"type": "string",
									"default": "$"
								},
								"deletedAt": {
									"description": "Date of removal of goods in Y-M-D H: I: s format (no longer available from the seller)",
									"type": "integer"
								},
								"directUrl": {
									"description": "Link to the product",
									"type": "string"
								},
								"image": {
									"description": "Link to product image",
									"type": "string"
								},
								"title": {
									"description": "Name of goods in the transmitted language",
									"type": "string"
								},
								"offerId": {
									"description": "ID Offer",
									"type": "integer"
								},
								"ordersCount": {
									"description": "Number of orders for the seller",
									"type": "integer"
								},
								"priceChange": {
									"description": "Changing the price of goods",
									"type": "float"
								},
								"price": {
									"description": "Origanal product price",
									"type": "float"
								},
								"salePrice": {
									"description": "Selling selling goods",
									"type": "float"
								},
								"productId": {
									"description": "Product design",
									"type": "string"
								},
								"rate": {
									"description": "Rating goods",
									"type": "float"
								},
								"rates": {
									"description": "% Cachek range in percent",
									"type": "array"
								},
								"addedAt": {
									"description": "Date Add product in TimeStamp",
									"type": "integer"
								},
								"updatedAt": {
									"description": "Date of update of goods in TimeStamp",
									"type": "integer"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"meta": {
					"description": "Metaverage",
					"properties": {
						"totalFound": {
							"description": "Number of products found",
							"type": "integer"
						}
					},
					"type": "object"
				},
				"result": {
					"description": "Request result",
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"SingleGoodsInformation": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"description": "Type of resource",
							"type": "string",
							"default": "goods"
						},
						"id": {
							"description": "Castitoducer",
							"type": "integer"
						},
						"attributes": {
							"properties": {
								"cashback": {
									"description": "Fixed cachembek size",
									"type": "float"
								},
								"cashbackPercent": {
									"description": "Percentage cachek",
									"type": "float"
								},
								"categories": {
									"description": "Product categories",
									"type": "array"
								},
								"currency": {
									"description": "Currency goods",
									"type": "string",
									"default": "USD"
								},
								"currencySymbol": {
									"description": "Currency designation",
									"type": "string",
									"default": "$"
								},
								"deletedAt": {
									"description": "Date of removal of goods in Y-M-D H: I: s format (no longer available from the seller)",
									"type": "integer"
								},
								"directUrl": {
									"description": "Link to the product",
									"type": "string"
								},
								"image": {
									"description": "Link to product image",
									"type": "string"
								},
								"title": {
									"description": "Name of goods in the transmitted language",
									"type": "string"
								},
								"offerId": {
									"description": "ID Offer",
									"type": "integer"
								},
								"ordersCount": {
									"description": "Number of orders for the seller",
									"type": "integer"
								},
								"priceChange": {
									"description": "Changing the price of goods",
									"type": "float"
								},
								"price": {
									"description": "Origanal product price",
									"type": "float"
								},
								"salePrice": {
									"description": "Selling selling goods",
									"type": "float"
								},
								"productId": {
									"description": "Product design",
									"type": "string"
								},
								"rate": {
									"description": "Rating goods",
									"type": "float"
								},
								"rates": {
									"description": "% Cachek range in percent",
									"type": "array"
								},
								"addedAt": {
									"description": "Date Add product in TimeStamp",
									"type": "integer"
								},
								"updatedAt": {
									"description": "Date of update of goods in TimeStamp",
									"type": "integer"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"description": "Request result",
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"GoodsWishlistResult": {
			"properties": {
				"data": {
					"properties": {
						"type": {
							"description": "Type of resource",
							"type": "string",
							"default": "goods-wishlist-result"
						},
						"attributes": {
							"properties": {
								"inWishlist": {
									"description": "Goods in favorites?",
									"type": "boolean"
								},
								"productId": {
									"description": "Castitoducer",
									"type": "string"
								},
								"offerId": {
									"description": "ID Offer",
									"type": "integer"
								}
							},
							"type": "object"
						}
					},
					"type": "object"
				},
				"result": {
					"description": "Request result",
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"GoodsComments": {
			"properties": {
				"data": {
					"items": {
						"properties": {
							"type": {
								"description": "Type of resource",
								"type": "string",
								"default": "goods-comments"
							},
							"id": {
								"description": "Comment ID",
								"type": "int"
							},
							"attributes": {
								"properties": {
									"comment": {
										"description": "Test comments",
										"type": "string"
									},
									"createdAt": {
										"description": "Comment date Comment in Y-M-D H: I: SP",
										"type": "string"
									},
									"goodId": {
										"description": "Castitoducer",
										"type": "int"
									},
									"images": {
										"description": "Array with images to a comment",
										"type": "array"
									},
									"isDeleted": {
										"description": "Sign of remote comment",
										"type": "boolean"
									},
									"isLiked": {
										"description": "Symptom Liked Photo Comment",
										"type": "boolean"
									},
									"likes": {
										"description": "Array of user ID, Liken Comment",
										"type": "array"
									},
									"likesCount": {
										"description": "Number of comment likes",
										"type": "int"
									},
									"parentId": {
										"description": "Parental Comment ID for Tree Build Comments",
										"type": "int"
									},
									"user": {
										"description": "Information about the author comments",
										"properties": {
											"id": {
												"description": "User ID",
												"type": "int"
											},
											"name": {
												"description": "Username",
												"type": "string"
											},
											"email": {
												"description": "disguised email user",
												"type": "string"
											},
											"avatar": {
												"description": "User Avatar",
												"type": "string"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"description": "Request result",
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		},
		"GetStories": {
			"properties": {
				"data": {
					"items": {
						"properties": {
							"type": {
								"description": "Type of resource",
								"type": "int",
								"default": "stories"
							},
							"id": {
								"description": "Id stater",
								"type": "int"
							},
							"attributes": {
								"properties": {
									"name": {
										"description": "Name Stork",
										"type": "string"
									},
									"isWatched": {
										"description": "Viewed whether Storky",
										"type": "bool"
									},
									"imageUrl": {
										"description": "Main image Storiz",
										"type": "string"
									},
									"slideShowTime": {
										"description": "Time to show slide in seconds",
										"type": "int"
									},
									"backgroundColor": {
										"description": "Background color in HEX format (#FFFFFF)",
										"type": "string"
									},
									"backgroundImage": {
										"description": "Image for background. Returns if not filled backgroundColor and ImageUrl",
										"type": "string"
									},
									"textColor": {
										"description": "Text color for HEX preview (#FFFFFF)",
										"type": "string"
									},
									"slides": {
										"description": "Massive slide storage",
										"properties": {
											"id": {
												"description": "Id slide",
												"type": "int"
											},
											"imageUrl": {
												"description": "Image Slide",
												"type": "string"
											},
											"headerText": {
												"description": "Text header",
												"type": "string"
											},
											"bodyText": {
												"description": "Main text",
												"type": "string"
											},
											"buttonText": {
												"description": "Button buttons",
												"type": "string"
											},
											"buttonColor": {
												"description": "Color of the button in HEX format (#FFFFFF)",
												"type": "string"
											},
											"buttonTextColor": {
												"description": "Text color in the button in HEX format (#FFFFFF)",
												"type": "string"
											},
											"textColor": {
												"description": "Text color in the slide in HEX format (#FFFFFF)",
												"type": "string"
											},
											"backgroundColor": {
												"description": "Background color in HEX format (#FFFFFF)",
												"type": "string"
											},
											"backgroundVideo": {
												"description": "Video for background",
												"type": "string"
											},
											"linkData": {
												"description": "Navigation information when switching by button",
												"properties": {
													"offerId": {
														"description": "What offper leads the button. Returns if a specific Pushtypeid is specified (navigation as in the Paste)",
														"type": "int"
													},
													"compilationId": {
														"description": "What a selection of offrants leads the button. Returns if a specific Pushtypeid is specified (navigation as in the Paste)",
														"type": "int"
													},
													"promocode": {
														"description": "On which promotion is the button. Returns if a specific Pushtypeid is specified (navigation as in the Paste)",
														"type": "string"
													},
													"url": {
														"description": "Link where the button leads. Returns if a specific Pushtypeid is specified (navigation as in the Paste)",
														"type": "string"
													},
													"pushSubTypeId": {
														"description": "Where the button leads, Pushtypeid subtype (navigation as in the Paste)",
														"type": "int"
													},
													"pushTypeId": {
														"description": "Where the button leads (navigation as in the Push)",
														"type": "int"
													}
												},
												"type": "object"
											}
										},
										"type": "object"
									}
								},
								"type": "object"
							}
						},
						"type": "object"
					}
				},
				"result": {
					"description": "Request result",
					"type": "boolean",
					"default": true
				}
			},
			"type": "object"
		}
	},
	"tags": [
		{
			"name": "actions",
			"description": "Obtaining data on goals. The goal is the order category, according to which the Affiliate Commission is charged."
		},
		{
			"name": "affiliate",
			"description": "Affiliates"
		},
		{
			"name": "affiliate/cashback",
			"description": "Cashbek for affiliates"
		},
		{
			"name": "auth",
			"description": "Authorization"
		},
		{
			"name": "auth/social",
			"description": "Social authorization"
		},
		{
			"name": "balance",
			"description": "User Balance Information"
		},
		{
			"name": "batch",
			"description": "Package requests"
		},
		{
			"name": "base-rates",
			"description": "Basic bets"
		},
		{
			"name": "cdn",
			"description": "Information about CDN."
		},
		{
			"name": "compensations",
			"description": "Compensation"
		},
		{
			"name": "confirmation",
			"description": "Confirmation of user actions"
		},
		{
			"name": "coupons",
			"description": "Coupons"
		},
		{
			"name": "creatives",
			"description": "Creative"
		},
		{
			"name": "doodles/list",
			"description": "Feed"
		},
		{
			"name": "export/user",
			"description": "Export for webmasters"
		},
		{
			"name": "faq",
			"description": "FAQ"
		},
		{
			"name": "feed",
			"description": "Fids"
		},
		{
			"name": "geo",
			"description": "GEO information"
		},
		{
			"name": "goods",
			"description": "Supper goods"
		},
		{
			"name": "link-reduction",
			"description": "Reduce link"
		},
		{
			"name": "loyalty",
			"description": "Loyalty"
		},
		{
			"name": "logout",
			"description": "Output"
		},
		{
			"name": "oauth/clients",
			"description": "OAuth User Clients"
		},
		{
			"name": "offers",
			"description": "List of offering"
		},
		{
			"name": "offers-meta-actions",
			"description": "List of offering"
		},
		{
			"name": "offer/labels",
			"description": "List of labels"
		},
		{
			"name": "offers/trafficBack/rules",
			"description": "Return traffic"
		},
		{
			"name": "orders",
			"description": "User orders"
		},
		{
			"name": "personal-rates",
			"description": "Personal rates"
		},
		{
			"name": "placements",
			"description": "Places"
		},
		{
			"name": "promocodes",
			"description": "Promotit"
		},
		{
			"name": "purses",
			"description": "Information about wallets"
		},
		{
			"name": "registration",
			"description": "User registration"
		},
		{
			"name": "registration/check",
			"description": "Check input data"
		},
		{
			"name": "request_limit",
			"description": "Limits for API requests"
		},
		{
			"name": "settings/common/lang",
			"description": "Settings / General"
		},
		{
			"name": "settings/common/translator",
			"description": "Settings / General / Translator"
		},
		{
			"name": "stats/cashback",
			"description": "Cashbeck statistics"
		},
		{
			"name": "stats/overall",
			"description": "Total statistics"
		},
		{
			"name": "stats/user",
			"description": "User Statistics"
		},
		{
			"name": "subs",
			"description": "Handle"
		},
		{
			"name": "support",
			"description": "Support"
		},
		{
			"name": "test",
			"description": "To verify the API."
		},
		{
			"name": "tracking",
			"description": "Tracking parcels. After adding the track numbers to the system and save it to the user information on it is updated every day."
		},
		{
			"name": "transactions",
			"description": "Get user transactions"
		},
		{
			"name": "user/checkConfirmedData",
			"description": "Check availability by user mail or confirmed phone number"
		},
		{
			"name": "user/geo-data",
			"description": "User location information"
		},
		{
			"name": "user/level",
			"description": "User level information"
		},
		{
			"name": "user/links/broken",
			"description": "Getting a List of Bied User Links"
		},
		{
			"name": "user/notifications",
			"description": "Notifications"
		},
		{
			"name": "user/payments",
			"description": "Order payment"
		},
		{
			"name": "user/profile",
			"description": "Obtaining user data"
		},
		{
			"name": "user/profile/phone",
			"description": "Binding phone numbers"
		},
		{
			"name": "user/profile/social",
			"description": "Profile settings. Social network."
		}
	]
}